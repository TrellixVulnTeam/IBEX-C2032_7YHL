from SANPolyA import *
import re
import os, sys, copy, getopt, re, argparse
import random
import pandas as pd 
import numpy as np


def dataProcessing(data_path):
	data1 = []
	data2 = []
	alphabet = np.array(['A', 'T', 'C', 'G'])

	with open(data_path,'r') as f:
		for line in f:
			line=line.rstrip('\n').split('\t')
			if (line[0]!='#pas_id')&(line[0]!='pas_id'):
				SEQUENCE=list(line[7])
				SEQUENCE=SEQUENCE[0:176]
				seq = np.array(SEQUENCE, dtype = '|U1').reshape(-1,1);
				seq_data = (seq == alphabet).astype(np.float32)
				data1.append(seq_data)
				COVERAGE=[int(float(x)) for x in line[8:184]]
				data2.append(COVERAGE)
	
	data1 = np.stack(data1).reshape([-1, 176, 4])
	data2 = np.stack(data2).reshape([-1, 176, 1])
	
	return data1 , data2

def main():

    parser = argparse.ArgumentParser(description="identification of PAS signals")
    parser.add_argument("--h5File", help="the model weights file", required=True)
    parser.add_argument("--data", help="input 176bp long sequence", required=True)
    args = parser.parse_args()

    Path = args.h5File
    data = args.data


    #if not os.path.exists(Path):
    #    print("The model not exist! Error\n")
     #   sys.exit()


    seq_data,cov_data = dataProcessing(data)
    keras_Model = SANPolyA_CNN();
    keras_Model.load_weights(Path)
    pred = keras_Model.predict({"seq_input": seq_data, "cov_input": cov_data})

    print('probablity of positive PAS signal sample is ' + str(pred[0][0]))
    
if __name__ == "__main__":
    main()
