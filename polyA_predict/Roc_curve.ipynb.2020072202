{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import sys, os\n",
    "import argparse\n",
    "import matplotlib.pyplot as plt\n",
    "from model4 import Net\n",
    "from supporting import *\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "#parser = argparse.ArgumentParser()\n",
    "#parser.add_argument('data', help='Path to data file, can be .txt file containing sequeces or .npz file containing one-hot encoded sequences')\n",
    "#parser.add_argument('wts', help='Trained model (.npz file)')\n",
    "#parser.add_argument('--out', default=None, help='Save predictions to (.txt file)')\n",
    "#opts = parser.parse_args()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_roc_curve(Infpr, Intpr,Orifpr,Oritpr):\n",
    "    plt.plot(Infpr, Intpr, color='orange', label='ROC')\n",
    "    plt.plot(Orifpr, Oritpr, color='white', label='RO')\n",
    "    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_predictions(datafile,modelfile):\n",
    "    # Load and pad data\n",
    "    data = np.load(datafile)\n",
    "    dataset = data['test_dataset']\n",
    "    labels = data['test_labels'] if 'test_labels' in data else []\n",
    "    pasid = data['test_pasid'] if 'test_pasid' in data else []\n",
    "    \n",
    "    # Build model\n",
    "    sess = tf.Session()\n",
    "    model = Net()\n",
    "\n",
    "    # Load trained model\n",
    "    model.load_weights(modelfile, sess)\n",
    "\n",
    "    dataset, labels = pad_dataset(dataset, labels)\n",
    "    print(\"Read %d sequences and %d labels from %s.\"%(len(dataset), len(labels), datafile))    \n",
    "    \n",
    "    predictions = model.get_prediction(sess, dataset, istrain=False)\n",
    "    probs = predictions[:, 1]\n",
    "    label = labels[:,1]\n",
    "    return probs,label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /home/longy/.conda/envs/python3.6/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From /home/longy/polyA_predict/model4.py:87: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n",
      "Read 8670 sequences and 8670 labels from model/Data_bl6.pAs.fibroblast.SeqRCIn2.npz.\n",
      "Read 8670 sequences and 8670 labels from model/Data_bl6.pAs.fibroblast.Ori.npz.\n"
     ]
    }
   ],
   "source": [
    "Inprobs,Inlabel = get_predictions('model/Data_bl6.pAs.fibroblast.SeqRCIn2.npz','model/Train_SeqRCIn401.npz')\n",
    "Oriprobs,Orilabel = get_predictions('model/Data_bl6.pAs.fibroblast.Ori.npz','model/Train_Ori101.npz')\n",
    "#Outprobs,Outlabel = get_predictions('model/Data_bl6.pAs.fibroblast.SeqRCOut.npz','model/Train_Out102.npz')\n",
    "#Rcprobs,Rclabel = get_predictions('model/Data_bl6.pAs.fibroblast.Rc.npz','model/Train_Rc401.npz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC: 0.980\n"
     ]
    }
   ],
   "source": [
    "Inauc = roc_auc_score(Inlabel, Inprobs)\n",
    "print('AUC: %.3f' % Inauc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC: 0.966\n"
     ]
    }
   ],
   "source": [
    "Oriauc = roc_auc_score(Orilabel, Oriprobs)\n",
    "print('AUC: %.3f' % Oriauc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "Infpr, Intpr, thresholds = roc_curve(Inlabel,Inprobs)\n",
    "Orifpr, Oritpr, thresholds = roc_curve(Orilabel,Oriprobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_roc_curve(Infpr, Intpr,Orifpr,Oritpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
