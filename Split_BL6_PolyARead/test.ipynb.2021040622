{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "file = open('BL6_stat/bl6.pAs.compare2.txt', 'r') \n",
    "gene_predict_usage = {}\n",
    "gene_exp_usage = {}\n",
    "for i, line in enumerate(file): \n",
    "    if(i>0):\n",
    "        line=line.rstrip('\\n')\n",
    "        (pas_id,symbol,predict_usage,exp_usage)= line.split('\\t')\n",
    "        gene_predict_usage.setdefault(symbol,[]).append(predict_usage)\n",
    "        gene_exp_usage.setdefault(symbol,[]).append(exp_usage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.16989404457435148\n",
      "0.33727810650887574\n"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "high_correlate = 0\n",
    "wrong_total=0\n",
    "near = 0\n",
    "for key,value1 in gene_predict_usage.items():\n",
    "    #print(value1,value2)\n",
    "    index1 = np.argsort(value1)\n",
    "    value2 = gene_exp_usage[key]\n",
    "    value2 = np.array(value2)\n",
    "    index2 = np.argsort(value2)\n",
    "    tau, p_value = stats.weightedtau(index1,index2)\n",
    "    total += 1\n",
    "    if(tau > 0.75):\n",
    "        high_correlate+=1\n",
    "    else:\n",
    "        if(len(value1)==2):\n",
    "            wrong_total += 1\n",
    "            if(abs(float(value1[0])-float(value1[1]))<0.2):\n",
    "            #print(float(value1[1]))\n",
    "                near +=1\n",
    "print(high_correlate/total)\n",
    "print(near/wrong_total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of dataset: 15234\n"
     ]
    }
   ],
   "source": [
    "from prep_data_regression import prep_data,DataGenerator\n",
    "train_data,train_labels,valid_data,valid_labels = prep_data('usage_data/BL6_REP1.pAs.predict.coverage.txt',5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.6931472],\n",
       "        [1.3862944],\n",
       "        [1.3862944],\n",
       "        ...,\n",
       "        [0.       ],\n",
       "        [0.       ],\n",
       "        [0.       ]],\n",
       "\n",
       "       [[6.7165947],\n",
       "        [6.717805 ],\n",
       "        [6.717805 ],\n",
       "        ...,\n",
       "        [0.       ],\n",
       "        [0.       ],\n",
       "        [0.       ]],\n",
       "\n",
       "       [[6.673298 ],\n",
       "        [6.6745615],\n",
       "        [6.666957 ],\n",
       "        ...,\n",
       "        [0.       ],\n",
       "        [0.       ],\n",
       "        [0.       ]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[4.26268  ],\n",
       "        [4.26268  ],\n",
       "        [4.26268  ],\n",
       "        ...,\n",
       "        [0.       ],\n",
       "        [0.       ],\n",
       "        [0.       ]],\n",
       "\n",
       "       [[5.5012584],\n",
       "        [5.5012584],\n",
       "        [5.5093884],\n",
       "        ...,\n",
       "        [0.       ],\n",
       "        [0.       ],\n",
       "        [0.       ]],\n",
       "\n",
       "       [[0.       ],\n",
       "        [0.       ],\n",
       "        [0.       ],\n",
       "        ...,\n",
       "        [0.       ],\n",
       "        [0.       ],\n",
       "        [0.       ]]], dtype=float32)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "np.log(train_data+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4.4367514, 8.342721 , 9.091838 , ..., 2.8332133, 4.9416423,\n",
       "       3.8177123], dtype=float32)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.log(train_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  84.5, 4199.5, 8882.5, ...,   17. ,  140. ,   45.5], dtype=float32)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
