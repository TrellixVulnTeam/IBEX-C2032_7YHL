{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:root:scikit-learn version 0.21.3 is not supported. Minimum required version: 0.17. Maximum required version: 0.19.2. Disabling scikit-learn conversion API.\n",
      "WARNING:root:Keras version 2.3.1 detected. Last version known to be fully compatible of Keras is 2.2.4 .\n"
     ]
    }
   ],
   "source": [
    "from __future__ import print_function\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import coremltools\n",
    "from scipy import stats\n",
    "from IPython.display import display, HTML\n",
    "\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn import preprocessing\n",
    "\n",
    "from tensorflow.keras.callbacks import ModelCheckpoint\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Activation,concatenate,BatchNormalization\n",
    "from tensorflow.keras.layers import Input, Dense, Flatten, Add,Lambda,LeakyReLU\n",
    "from tensorflow.keras.optimizers import SGD,Adam,schedules\n",
    "from tensorflow.keras.utils import plot_model\n",
    "from tensorflow.keras.layers import Dropout, Conv1D, MaxPooling1D,MaxPooling1D,GlobalMaxPooling1D,SpatialDropout1D\n",
    "from tensorflow.keras import regularizers\n",
    "from tensorflow.keras import initializers\n",
    "from tensorflow.keras import constraints\n",
    "from tensorflow.keras import backend as K\n",
    "from tensorflow.keras.layers import Layer, InputSpec\n",
    "from tensorflow.keras.metrics import binary_accuracy\n",
    "from tensorflow.keras.initializers import Ones, Zeros"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GroupNormalization(Layer):\n",
    "\tdef __init__(self,groups=32,axis=-1,epsilon=1e-5,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,\n",
    "\t\t\t\t gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs):\n",
    "\t\tsuper(GroupNormalization, self).__init__(**kwargs)\n",
    "\t\tself.supports_masking = True\n",
    "\t\tself.groups = groups\n",
    "\t\tself.axis = axis\n",
    "\t\tself.epsilon = epsilon\n",
    "\t\tself.center = center\n",
    "\t\tself.scale = scale\n",
    "\t\tself.beta_initializer = initializers.get(beta_initializer)\n",
    "\t\tself.gamma_initializer = initializers.get(gamma_initializer)\n",
    "\t\tself.beta_regularizer = regularizers.get(beta_regularizer)\n",
    "\t\tself.gamma_regularizer = regularizers.get(gamma_regularizer)\n",
    "\t\tself.beta_constraint = constraints.get(beta_constraint)\n",
    "\t\tself.gamma_constraint = constraints.get(gamma_constraint)\n",
    "\n",
    "\tdef build(self, input_shape):\n",
    "\t\tdim = input_shape[self.axis]\n",
    "\n",
    "\t\tif dim is None:\n",
    "\t\t\traise ValueError('Axis '+str(self.axis)+' of input tensor should have a defined dimension but the layer received an input with shape '+str(input_shape)+'.')\n",
    "\n",
    "\t\tif dim < self.groups:\n",
    "\t\t\traise ValueError('Number of groups ('+str(self.groups)+') cannot be more than the number of channels ('+str(dim)+').')\n",
    "\n",
    "\t\tif dim % self.groups != 0:\n",
    "\t\t\traise ValueError('Number of groups ('+str(self.groups)+') must be a multiple of the number of channels ('+str(dim)+').')\n",
    "\n",
    "\t\tself.input_spec = InputSpec(ndim=len(input_shape),axes={self.axis: dim})\n",
    "\t\tshape = (dim,)\n",
    "\n",
    "\t\tif self.scale:\n",
    "\t\t\tself.gamma = self.add_weight(shape=shape,name='gamma',initializer=self.gamma_initializer,regularizer=self.gamma_regularizer,constraint=self.gamma_constraint)\n",
    "\t\telse:\n",
    "\t\t\tself.gamma = None\n",
    "\n",
    "\t\tif self.center:\n",
    "\t\t\tself.beta = self.add_weight(shape=shape,name='beta',initializer=self.beta_initializer,regularizer=self.beta_regularizer,constraint=self.beta_constraint)\n",
    "\t\telse:\n",
    "\t\t\tself.beta = None\n",
    "\n",
    "\t\tself.built = True\n",
    "\n",
    "\tdef call(self, inputs, **kwargs):\n",
    "\t\tinput_shape = K.int_shape(inputs)\n",
    "\t\ttensor_input_shape = K.shape(inputs)\n",
    "\n",
    "\t\t# Prepare broadcasting shape.\n",
    "\t\treduction_axes = list(range(len(input_shape)))\n",
    "\t\tdel reduction_axes[self.axis]\n",
    "\t\tbroadcast_shape = [1] * len(input_shape)\n",
    "\t\tbroadcast_shape[self.axis] = input_shape[self.axis] // self.groups\n",
    "\t\tbroadcast_shape.insert(1, self.groups)\n",
    "\n",
    "\t\treshape_group_shape = K.shape(inputs)\n",
    "\t\tgroup_axes = [reshape_group_shape[i] for i in range(len(input_shape))]\n",
    "\t\tgroup_axes[self.axis] = input_shape[self.axis] // self.groups\n",
    "\t\tgroup_axes.insert(1, self.groups)\n",
    "\n",
    "\t\t# reshape inputs to new group shape\n",
    "\t\tgroup_shape = [group_axes[0], self.groups] + group_axes[2:]\n",
    "\t\tgroup_shape = K.stack(group_shape)\n",
    "\t\tinputs = K.reshape(inputs, group_shape)\n",
    "\n",
    "\t\tgroup_reduction_axes = list(range(len(group_axes)))\n",
    "\t\tgroup_reduction_axes = group_reduction_axes[2:]\n",
    "\n",
    "\t\tmean = K.mean(inputs, axis=group_reduction_axes, keepdims=True)\n",
    "\t\tvariance = K.var(inputs, axis=group_reduction_axes, keepdims=True)\n",
    "\t\tinputs = (inputs - mean) / (K.sqrt(variance + self.epsilon))\n",
    "\n",
    "\t\t# prepare broadcast shape\n",
    "\t\tinputs = K.reshape(inputs, group_shape)\n",
    "\t\toutputs = inputs\n",
    "\n",
    "\t\t# In this case we must explicitly broadcast all parameters.\n",
    "\t\tif self.scale:\n",
    "\t\t\tbroadcast_gamma = K.reshape(self.gamma, broadcast_shape)\n",
    "\t\t\toutputs = outputs * broadcast_gamma\n",
    "\n",
    "\t\tif self.center:\n",
    "\t\t\tbroadcast_beta = K.reshape(self.beta, broadcast_shape)\n",
    "\t\t\toutputs = outputs + broadcast_beta\n",
    "\n",
    "\t\toutputs = K.reshape(outputs, tensor_input_shape)\n",
    "\n",
    "\t\treturn outputs\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CNN(inputs):\n",
    "    x = Conv1D(filters= 16, kernel_size= 12, padding = 'valid', kernel_regularizer = regularizers.l2(1e-4), bias_regularizer = regularizers.l2(1e-4))(inputs)\n",
    "    #x = GroupNormalization(groups = 4, axis = -1)(x) \n",
    "    x = Activation('relu')(x)\n",
    "    x = MaxPooling1D(pool_size = 12)(x)\n",
    "    x = Dropout(0.5)(x)\n",
    "    x = Flatten()(x)\n",
    "    x = Dense(32,  kernel_regularizer = regularizers.l2(1e-4),bias_regularizer = regularizers.l2(1e-4))(x)\n",
    "    x = Activation('relu')(x)\n",
    "    x = Dropout(0.5)(x)\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Regression_CNN(length):\n",
    "\n",
    "    input_shape1 = (length,1)\n",
    "    cov_input = Input(shape = input_shape1,name=\"cov_input\")\n",
    "    input_layers = cov_input\n",
    "\n",
    "    x = CNN(cov_input)\n",
    "    outLayer= Dense(1, activation='linear')(x)\n",
    "\n",
    "    model = Model(inputs=input_layers, outputs=outLayer)\n",
    "\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Regression_CNN(1001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "cov_input (InputLayer)       [(None, 1001, 1)]         0         \n",
      "_________________________________________________________________\n",
      "conv1d (Conv1D)              (None, 990, 16)           208       \n",
      "_________________________________________________________________\n",
      "activation (Activation)      (None, 990, 16)           0         \n",
      "_________________________________________________________________\n",
      "max_pooling1d (MaxPooling1D) (None, 82, 16)            0         \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 82, 16)            0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 1312)              0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 32)                42016     \n",
      "_________________________________________________________________\n",
      "activation_1 (Activation)    (None, 32)                0         \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 32)                0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1)                 33        \n",
      "=================================================================\n",
      "Total params: 42,257\n",
      "Trainable params: 42,257\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from prep_data_regression import prep_data,DataGenerator,EvaDataGenerator,get_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of dataset: 55918\n"
     ]
    }
   ],
   "source": [
    "train_data,train_labels,train_id,valid_data,valid_labels,valid_id = prep_data('usage_data/BL6_REP1.pAs.regression.coverage.txt',5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalization(train_data,train_labels,valid_data,valid_labels):\n",
    "    train_data = np.log(train_data+1)\n",
    "    train_labels = np.log(train_labels)\n",
    "    valid_data = np.log(valid_data+1)\n",
    "    valid_labels = np.log(valid_labels)\n",
    "    data_mean = np.mean(train_data)\n",
    "    data_std  = np.std(train_data)\n",
    "    label_mean = np.mean(train_labels)\n",
    "    label_std  = np.std(train_labels)\n",
    "    \n",
    "    data_max = np.max(train_data)\n",
    "    \n",
    "    #train_data = (train_data-data_mean)/data_std\n",
    "    #train_data = train_data/data_max\n",
    "    train_data  = train_data/300\n",
    "    train_labels = (train_labels-label_mean)/label_std\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    #valid_data  = (valid_data-data_mean)/data_std\n",
    "    #valid_data    = valid_data/data_max\n",
    "    valid_data  = valid_data/300\n",
    "    valid_labels = (valid_labels-label_mean)/label_std\n",
    "    \n",
    "    \n",
    "    return data_mean,data_std,data_max,label_mean,label_std,train_data,train_labels,valid_data,valid_labels\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_mean,data_std,data_max,label_mean,label_std, train_x,train_y,valid_x,valid_y = normalization(train_data,train_labels,valid_data,valid_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.3861275 2.4915485\n",
      "3.8266706 1.8094194\n"
     ]
    }
   ],
   "source": [
    "print(data_mean,data_std)\n",
    "print(label_mean,label_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f0f28c674e0>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1101),train_x[2,:,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "training_generator =  DataGenerator(train_x,train_y,0)\n",
    "validation_generator = DataGenerator(train_x,train_y,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f0f28bf0048>]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = next(iter(training_generator))\n",
    "plt.plot(range(1001),a[0][:][5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_schedule = schedules.ExponentialDecay(5e-4,decay_steps=5000,decay_rate=0.96)\n",
    "#model.compile(loss='mean_squared_logarithmic_error', optimizer= SGD(momentum = 0.98, learning_rate = lr_schedule), metrics=['mse'])\n",
    "model.compile(loss='mean_squared_error', optimizer= SGD(momentum = 0.98, learning_rate = lr_schedule), metrics=['mse'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainid='bl6.mle.linear'\n",
    "checkpoint_path = \"Regression_Model/\"+trainid+\"-{epoch:04d}.ckpt\"\n",
    "cp_callback = ModelCheckpoint(filepath=checkpoint_path,save_weights_only=True,verbose=1,period=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train for 1397 steps, validate for 1397 steps\n",
      "Epoch 1/3000\n",
      "1397/1397 [==============================] - 13s 10ms/step - loss: 0.9093 - mse: 0.9027 - val_loss: 0.7528 - val_mse: 0.7458\n",
      "Epoch 2/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.7351 - mse: 0.7278 - val_loss: 0.6567 - val_mse: 0.6490\n",
      "Epoch 3/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.7292 - mse: 0.7213 - val_loss: 0.6846 - val_mse: 0.6764\n",
      "Epoch 4/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.7272 - mse: 0.7188 - val_loss: 0.6507 - val_mse: 0.6421\n",
      "Epoch 5/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.7053 - mse: 0.6966 - val_loss: 0.6833 - val_mse: 0.6746\n",
      "Epoch 6/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.7095 - mse: 0.7007 - val_loss: 0.6346 - val_mse: 0.6257\n",
      "Epoch 7/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.7057 - mse: 0.6967 - val_loss: 0.6351 - val_mse: 0.6260\n",
      "Epoch 8/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6960 - mse: 0.6869 - val_loss: 0.6421 - val_mse: 0.6329\n",
      "Epoch 9/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6966 - mse: 0.6874 - val_loss: 0.6580 - val_mse: 0.6487\n",
      "Epoch 10/3000\n",
      "1391/1397 [============================>.] - ETA: 0s - loss: 0.6914 - mse: 0.6820\n",
      "Epoch 00010: saving model to Regression_Model/bl6.mle.linear-0010.ckpt\n",
      "1397/1397 [==============================] - 8s 6ms/step - loss: 0.6919 - mse: 0.6826 - val_loss: 0.6706 - val_mse: 0.6612\n",
      "Epoch 11/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6928 - mse: 0.6834 - val_loss: 0.6588 - val_mse: 0.6494\n",
      "Epoch 12/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.7016 - mse: 0.6921 - val_loss: 0.6271 - val_mse: 0.6176\n",
      "Epoch 13/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6906 - mse: 0.6810 - val_loss: 0.6447 - val_mse: 0.6352\n",
      "Epoch 14/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6868 - mse: 0.6772 - val_loss: 0.6596 - val_mse: 0.6500\n",
      "Epoch 15/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6854 - mse: 0.6759 - val_loss: 0.6405 - val_mse: 0.6309\n",
      "Epoch 16/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6832 - mse: 0.6737 - val_loss: 0.6279 - val_mse: 0.6183\n",
      "Epoch 17/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6855 - mse: 0.6759 - val_loss: 0.6317 - val_mse: 0.6221\n",
      "Epoch 18/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6911 - mse: 0.6815 - val_loss: 0.6434 - val_mse: 0.6337\n",
      "Epoch 19/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6827 - mse: 0.6730 - val_loss: 0.6319 - val_mse: 0.6222\n",
      "Epoch 20/3000\n",
      "1380/1397 [============================>.] - ETA: 0s - loss: 0.6852 - mse: 0.6755\n",
      "Epoch 00020: saving model to Regression_Model/bl6.mle.linear-0020.ckpt\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6856 - mse: 0.6759 - val_loss: 0.6398 - val_mse: 0.6301\n",
      "Epoch 21/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6889 - mse: 0.6792 - val_loss: 0.6417 - val_mse: 0.6320\n",
      "Epoch 22/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6875 - mse: 0.6778 - val_loss: 0.6303 - val_mse: 0.6206\n",
      "Epoch 23/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6833 - mse: 0.6736 - val_loss: 0.6347 - val_mse: 0.6249\n",
      "Epoch 24/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6817 - mse: 0.6720 - val_loss: 0.6433 - val_mse: 0.6336\n",
      "Epoch 25/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6836 - mse: 0.6739 - val_loss: 0.6277 - val_mse: 0.6179\n",
      "Epoch 26/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6846 - mse: 0.6749 - val_loss: 0.6326 - val_mse: 0.6229\n",
      "Epoch 27/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6829 - mse: 0.6731 - val_loss: 0.6490 - val_mse: 0.6393\n",
      "Epoch 28/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6828 - mse: 0.6731 - val_loss: 0.6263 - val_mse: 0.6166\n",
      "Epoch 29/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6821 - mse: 0.6723 - val_loss: 0.6320 - val_mse: 0.6223\n",
      "Epoch 30/3000\n",
      "1395/1397 [============================>.] - ETA: 0s - loss: 0.6850 - mse: 0.6753\n",
      "Epoch 00030: saving model to Regression_Model/bl6.mle.linear-0030.ckpt\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6846 - mse: 0.6749 - val_loss: 0.6371 - val_mse: 0.6274\n",
      "Epoch 31/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6814 - mse: 0.6716 - val_loss: 0.6265 - val_mse: 0.6168\n",
      "Epoch 32/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6853 - mse: 0.6756 - val_loss: 0.6417 - val_mse: 0.6319\n",
      "Epoch 33/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6844 - mse: 0.6747 - val_loss: 0.6239 - val_mse: 0.6142\n",
      "Epoch 34/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6799 - mse: 0.6702 - val_loss: 0.6305 - val_mse: 0.6208\n",
      "Epoch 35/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6834 - mse: 0.6736 - val_loss: 0.6260 - val_mse: 0.6163\n",
      "Epoch 36/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6830 - mse: 0.6732 - val_loss: 0.6700 - val_mse: 0.6603\n",
      "Epoch 37/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6805 - mse: 0.6708 - val_loss: 0.6268 - val_mse: 0.6170\n",
      "Epoch 38/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6821 - mse: 0.6724 - val_loss: 0.6239 - val_mse: 0.6142\n",
      "Epoch 39/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6826 - mse: 0.6729 - val_loss: 0.6366 - val_mse: 0.6269\n",
      "Epoch 40/3000\n",
      "1381/1397 [============================>.] - ETA: 0s - loss: 0.6824 - mse: 0.6727\n",
      "Epoch 00040: saving model to Regression_Model/bl6.mle.linear-0040.ckpt\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6827 - mse: 0.6730 - val_loss: 0.6201 - val_mse: 0.6104\n",
      "Epoch 41/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6801 - mse: 0.6704 - val_loss: 0.6254 - val_mse: 0.6158\n",
      "Epoch 42/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6823 - mse: 0.6726 - val_loss: 0.6420 - val_mse: 0.6323\n",
      "Epoch 43/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6807 - mse: 0.6710 - val_loss: 0.6241 - val_mse: 0.6144\n",
      "Epoch 44/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6795 - mse: 0.6698 - val_loss: 0.6322 - val_mse: 0.6225\n",
      "Epoch 45/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6814 - mse: 0.6717 - val_loss: 0.6395 - val_mse: 0.6299\n",
      "Epoch 46/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6836 - mse: 0.6739 - val_loss: 0.6826 - val_mse: 0.6729\n",
      "Epoch 47/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6760 - mse: 0.6663 - val_loss: 0.6284 - val_mse: 0.6188\n",
      "Epoch 48/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6774 - mse: 0.6678 - val_loss: 0.6216 - val_mse: 0.6120\n",
      "Epoch 49/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6785 - mse: 0.6688 - val_loss: 0.6242 - val_mse: 0.6145\n",
      "Epoch 50/3000\n",
      "1391/1397 [============================>.] - ETA: 0s - loss: 0.6766 - mse: 0.6670\n",
      "Epoch 00050: saving model to Regression_Model/bl6.mle.linear-0050.ckpt\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6769 - mse: 0.6673 - val_loss: 0.6257 - val_mse: 0.6161\n",
      "Epoch 51/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6805 - mse: 0.6710 - val_loss: 0.6262 - val_mse: 0.6166\n",
      "Epoch 52/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6773 - mse: 0.6677 - val_loss: 0.6269 - val_mse: 0.6173\n",
      "Epoch 53/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6770 - mse: 0.6674 - val_loss: 0.6319 - val_mse: 0.6223\n",
      "Epoch 54/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6740 - mse: 0.6645 - val_loss: 0.6220 - val_mse: 0.6125\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 55/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6802 - mse: 0.6706 - val_loss: 0.6312 - val_mse: 0.6216\n",
      "Epoch 56/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6806 - mse: 0.6710 - val_loss: 0.6294 - val_mse: 0.6199\n",
      "Epoch 57/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6778 - mse: 0.6683 - val_loss: 0.6245 - val_mse: 0.6150\n",
      "Epoch 58/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6712 - mse: 0.6617 - val_loss: 0.6263 - val_mse: 0.6168\n",
      "Epoch 59/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6793 - mse: 0.6698 - val_loss: 0.6211 - val_mse: 0.6116\n",
      "Epoch 60/3000\n",
      "1379/1397 [============================>.] - ETA: 0s - loss: 0.6787 - mse: 0.6692\n",
      "Epoch 00060: saving model to Regression_Model/bl6.mle.linear-0060.ckpt\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6785 - mse: 0.6691 - val_loss: 0.6262 - val_mse: 0.6168\n",
      "Epoch 61/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6742 - mse: 0.6647 - val_loss: 0.6215 - val_mse: 0.6121\n",
      "Epoch 62/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6767 - mse: 0.6673 - val_loss: 0.6256 - val_mse: 0.6162\n",
      "Epoch 63/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6754 - mse: 0.6660 - val_loss: 0.6305 - val_mse: 0.6211\n",
      "Epoch 64/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6769 - mse: 0.6675 - val_loss: 0.6262 - val_mse: 0.6168\n",
      "Epoch 65/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6733 - mse: 0.6639 - val_loss: 0.6292 - val_mse: 0.6198\n",
      "Epoch 66/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6779 - mse: 0.6685 - val_loss: 0.6282 - val_mse: 0.6188\n",
      "Epoch 67/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6764 - mse: 0.6671 - val_loss: 0.6282 - val_mse: 0.6189\n",
      "Epoch 68/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6775 - mse: 0.6682 - val_loss: 0.6232 - val_mse: 0.6139\n",
      "Epoch 69/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6739 - mse: 0.6646 - val_loss: 0.6622 - val_mse: 0.6529\n",
      "Epoch 70/3000\n",
      "1387/1397 [============================>.] - ETA: 0s - loss: 0.6735 - mse: 0.6642\n",
      "Epoch 00070: saving model to Regression_Model/bl6.mle.linear-0070.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6731 - mse: 0.6639 - val_loss: 0.6236 - val_mse: 0.6144\n",
      "Epoch 71/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6754 - mse: 0.6662 - val_loss: 0.6207 - val_mse: 0.6114\n",
      "Epoch 72/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6779 - mse: 0.6687 - val_loss: 0.6231 - val_mse: 0.6139\n",
      "Epoch 73/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6769 - mse: 0.6677 - val_loss: 0.6231 - val_mse: 0.6139\n",
      "Epoch 74/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6777 - mse: 0.6685 - val_loss: 0.6244 - val_mse: 0.6152\n",
      "Epoch 75/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6717 - mse: 0.6625 - val_loss: 0.6213 - val_mse: 0.6121\n",
      "Epoch 76/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6756 - mse: 0.6664 - val_loss: 0.6291 - val_mse: 0.6200\n",
      "Epoch 77/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6768 - mse: 0.6676 - val_loss: 0.6256 - val_mse: 0.6165\n",
      "Epoch 78/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6718 - mse: 0.6626 - val_loss: 0.6226 - val_mse: 0.6135\n",
      "Epoch 79/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6768 - mse: 0.6677 - val_loss: 0.6262 - val_mse: 0.6171\n",
      "Epoch 80/3000\n",
      "1382/1397 [============================>.] - ETA: 0s - loss: 0.6702 - mse: 0.6611\n",
      "Epoch 00080: saving model to Regression_Model/bl6.mle.linear-0080.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6709 - mse: 0.6618 - val_loss: 0.6249 - val_mse: 0.6158\n",
      "Epoch 81/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6763 - mse: 0.6672 - val_loss: 0.6292 - val_mse: 0.6201\n",
      "Epoch 82/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6753 - mse: 0.6662 - val_loss: 0.6281 - val_mse: 0.6190\n",
      "Epoch 83/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6735 - mse: 0.6644 - val_loss: 0.6223 - val_mse: 0.6133\n",
      "Epoch 84/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6760 - mse: 0.6669 - val_loss: 0.6223 - val_mse: 0.6133\n",
      "Epoch 85/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6717 - mse: 0.6627 - val_loss: 0.6204 - val_mse: 0.6114\n",
      "Epoch 86/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6724 - mse: 0.6634 - val_loss: 0.6223 - val_mse: 0.6133\n",
      "Epoch 87/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6732 - mse: 0.6642 - val_loss: 0.6201 - val_mse: 0.6111\n",
      "Epoch 88/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6755 - mse: 0.6665 - val_loss: 0.6242 - val_mse: 0.6152\n",
      "Epoch 89/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6780 - mse: 0.6691 - val_loss: 0.6372 - val_mse: 0.6282\n",
      "Epoch 90/3000\n",
      "1392/1397 [============================>.] - ETA: 0s - loss: 0.6768 - mse: 0.6678\n",
      "Epoch 00090: saving model to Regression_Model/bl6.mle.linear-0090.ckpt\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6767 - mse: 0.6678 - val_loss: 0.6274 - val_mse: 0.6184\n",
      "Epoch 91/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6744 - mse: 0.6655 - val_loss: 0.6222 - val_mse: 0.6133\n",
      "Epoch 92/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6709 - mse: 0.6620 - val_loss: 0.6175 - val_mse: 0.6086\n",
      "Epoch 93/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6747 - mse: 0.6658 - val_loss: 0.6258 - val_mse: 0.6169\n",
      "Epoch 94/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6742 - mse: 0.6653 - val_loss: 0.6232 - val_mse: 0.6144\n",
      "Epoch 95/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6765 - mse: 0.6676 - val_loss: 0.6205 - val_mse: 0.6116\n",
      "Epoch 96/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6712 - mse: 0.6623 - val_loss: 0.6177 - val_mse: 0.6089\n",
      "Epoch 97/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6672 - mse: 0.6584 - val_loss: 0.6170 - val_mse: 0.6082\n",
      "Epoch 98/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6749 - mse: 0.6661 - val_loss: 0.6315 - val_mse: 0.6227\n",
      "Epoch 99/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6739 - mse: 0.6651 - val_loss: 0.6208 - val_mse: 0.6120\n",
      "Epoch 100/3000\n",
      "1384/1397 [============================>.] - ETA: 0s - loss: 0.6750 - mse: 0.6662\n",
      "Epoch 00100: saving model to Regression_Model/bl6.mle.linear-0100.ckpt\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6747 - mse: 0.6660 - val_loss: 0.6222 - val_mse: 0.6135\n",
      "Epoch 101/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6727 - mse: 0.6639 - val_loss: 0.6252 - val_mse: 0.6165\n",
      "Epoch 102/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6731 - mse: 0.6643 - val_loss: 0.6237 - val_mse: 0.6150\n",
      "Epoch 103/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6766 - mse: 0.6679 - val_loss: 0.6227 - val_mse: 0.6140\n",
      "Epoch 104/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6731 - mse: 0.6644 - val_loss: 0.6246 - val_mse: 0.6159\n",
      "Epoch 105/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6741 - mse: 0.6654 - val_loss: 0.6195 - val_mse: 0.6108\n",
      "Epoch 106/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6706 - mse: 0.6619 - val_loss: 0.6175 - val_mse: 0.6088\n",
      "Epoch 107/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6735 - mse: 0.6648 - val_loss: 0.6189 - val_mse: 0.6102\n",
      "Epoch 108/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6774 - mse: 0.6687 - val_loss: 0.6381 - val_mse: 0.6295\n",
      "Epoch 109/3000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6737 - mse: 0.6650 - val_loss: 0.6206 - val_mse: 0.6120\n",
      "Epoch 110/3000\n",
      "1385/1397 [============================>.] - ETA: 0s - loss: 0.6743 - mse: 0.6656\n",
      "Epoch 00110: saving model to Regression_Model/bl6.mle.linear-0110.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6737 - mse: 0.6650 - val_loss: 0.6196 - val_mse: 0.6110\n",
      "Epoch 111/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6740 - mse: 0.6654 - val_loss: 0.6230 - val_mse: 0.6144\n",
      "Epoch 112/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6763 - mse: 0.6677 - val_loss: 0.6221 - val_mse: 0.6134\n",
      "Epoch 113/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6741 - mse: 0.6655 - val_loss: 0.6205 - val_mse: 0.6119\n",
      "Epoch 114/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6694 - mse: 0.6608 - val_loss: 0.6200 - val_mse: 0.6114\n",
      "Epoch 115/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6736 - mse: 0.6651 - val_loss: 0.6262 - val_mse: 0.6177\n",
      "Epoch 116/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6714 - mse: 0.6629 - val_loss: 0.6240 - val_mse: 0.6154\n",
      "Epoch 117/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6741 - mse: 0.6656 - val_loss: 0.6293 - val_mse: 0.6208\n",
      "Epoch 118/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6720 - mse: 0.6634 - val_loss: 0.6200 - val_mse: 0.6115\n",
      "Epoch 119/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6711 - mse: 0.6625 - val_loss: 0.6200 - val_mse: 0.6114\n",
      "Epoch 120/3000\n",
      "1383/1397 [============================>.] - ETA: 0s - loss: 0.6680 - mse: 0.6595\n",
      "Epoch 00120: saving model to Regression_Model/bl6.mle.linear-0120.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6678 - mse: 0.6592 - val_loss: 0.6303 - val_mse: 0.6218\n",
      "Epoch 121/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6746 - mse: 0.6661 - val_loss: 0.6243 - val_mse: 0.6158\n",
      "Epoch 122/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6685 - mse: 0.6599 - val_loss: 0.6219 - val_mse: 0.6134\n",
      "Epoch 123/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6695 - mse: 0.6610 - val_loss: 0.6187 - val_mse: 0.6102\n",
      "Epoch 124/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6712 - mse: 0.6627 - val_loss: 0.6211 - val_mse: 0.6126\n",
      "Epoch 125/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6701 - mse: 0.6616 - val_loss: 0.6201 - val_mse: 0.6116\n",
      "Epoch 126/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6710 - mse: 0.6625 - val_loss: 0.6214 - val_mse: 0.6129\n",
      "Epoch 127/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6701 - mse: 0.6616 - val_loss: 0.6231 - val_mse: 0.6146\n",
      "Epoch 128/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6732 - mse: 0.6648 - val_loss: 0.6221 - val_mse: 0.6136\n",
      "Epoch 129/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6690 - mse: 0.6606 - val_loss: 0.6211 - val_mse: 0.6127\n",
      "Epoch 130/3000\n",
      "1386/1397 [============================>.] - ETA: 0s - loss: 0.6677 - mse: 0.6592\n",
      "Epoch 00130: saving model to Regression_Model/bl6.mle.linear-0130.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6680 - mse: 0.6596 - val_loss: 0.6221 - val_mse: 0.6137\n",
      "Epoch 131/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6704 - mse: 0.6620 - val_loss: 0.6213 - val_mse: 0.6129\n",
      "Epoch 132/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6721 - mse: 0.6637 - val_loss: 0.6182 - val_mse: 0.6098\n",
      "Epoch 133/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6693 - mse: 0.6609 - val_loss: 0.6197 - val_mse: 0.6114\n",
      "Epoch 134/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6694 - mse: 0.6610 - val_loss: 0.6216 - val_mse: 0.6133\n",
      "Epoch 135/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6723 - mse: 0.6640 - val_loss: 0.6247 - val_mse: 0.6163\n",
      "Epoch 136/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6711 - mse: 0.6628 - val_loss: 0.6322 - val_mse: 0.6239\n",
      "Epoch 137/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6693 - mse: 0.6610 - val_loss: 0.6239 - val_mse: 0.6156\n",
      "Epoch 138/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6752 - mse: 0.6668 - val_loss: 0.6210 - val_mse: 0.6127\n",
      "Epoch 139/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6687 - mse: 0.6604 - val_loss: 0.6212 - val_mse: 0.6128\n",
      "Epoch 140/3000\n",
      "1390/1397 [============================>.] - ETA: 0s - loss: 0.6736 - mse: 0.6653\n",
      "Epoch 00140: saving model to Regression_Model/bl6.mle.linear-0140.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6732 - mse: 0.6649 - val_loss: 0.6289 - val_mse: 0.6206\n",
      "Epoch 141/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6719 - mse: 0.6636 - val_loss: 0.6319 - val_mse: 0.6236\n",
      "Epoch 142/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6711 - mse: 0.6628 - val_loss: 0.6181 - val_mse: 0.6098\n",
      "Epoch 143/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6690 - mse: 0.6607 - val_loss: 0.6177 - val_mse: 0.6094\n",
      "Epoch 144/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6717 - mse: 0.6635 - val_loss: 0.6341 - val_mse: 0.6258\n",
      "Epoch 145/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6672 - mse: 0.6589 - val_loss: 0.6242 - val_mse: 0.6159\n",
      "Epoch 146/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6719 - mse: 0.6637 - val_loss: 0.6240 - val_mse: 0.6157\n",
      "Epoch 147/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6667 - mse: 0.6585 - val_loss: 0.6172 - val_mse: 0.6090\n",
      "Epoch 148/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6717 - mse: 0.6635 - val_loss: 0.6197 - val_mse: 0.6114\n",
      "Epoch 149/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6699 - mse: 0.6616 - val_loss: 0.6244 - val_mse: 0.6162\n",
      "Epoch 150/3000\n",
      "1385/1397 [============================>.] - ETA: 0s - loss: 0.6685 - mse: 0.6603\n",
      "Epoch 00150: saving model to Regression_Model/bl6.mle.linear-0150.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6689 - mse: 0.6607 - val_loss: 0.6298 - val_mse: 0.6216\n",
      "Epoch 151/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6699 - mse: 0.6617 - val_loss: 0.6204 - val_mse: 0.6122\n",
      "Epoch 152/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6712 - mse: 0.6630 - val_loss: 0.6230 - val_mse: 0.6148\n",
      "Epoch 153/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6699 - mse: 0.6618 - val_loss: 0.6161 - val_mse: 0.6079\n",
      "Epoch 154/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6704 - mse: 0.6623 - val_loss: 0.6222 - val_mse: 0.6140\n",
      "Epoch 155/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6679 - mse: 0.6598 - val_loss: 0.6242 - val_mse: 0.6161\n",
      "Epoch 156/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6691 - mse: 0.6609 - val_loss: 0.6209 - val_mse: 0.6128\n",
      "Epoch 157/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6701 - mse: 0.6620 - val_loss: 0.6254 - val_mse: 0.6172\n",
      "Epoch 158/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6673 - mse: 0.6591 - val_loss: 0.6184 - val_mse: 0.6103\n",
      "Epoch 159/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6708 - mse: 0.6626 - val_loss: 0.6186 - val_mse: 0.6105\n",
      "Epoch 160/3000\n",
      "1392/1397 [============================>.] - ETA: 0s - loss: 0.6677 - mse: 0.6596\n",
      "Epoch 00160: saving model to Regression_Model/bl6.mle.linear-0160.ckpt\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6676 - mse: 0.6595 - val_loss: 0.6198 - val_mse: 0.6116\n",
      "Epoch 161/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6700 - mse: 0.6619 - val_loss: 0.6199 - val_mse: 0.6118\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 162/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6718 - mse: 0.6636 - val_loss: 0.6223 - val_mse: 0.6142\n",
      "Epoch 163/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6690 - mse: 0.6609 - val_loss: 0.6197 - val_mse: 0.6116\n",
      "Epoch 164/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6708 - mse: 0.6627 - val_loss: 0.6263 - val_mse: 0.6183\n",
      "Epoch 165/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6706 - mse: 0.6625 - val_loss: 0.6244 - val_mse: 0.6163\n",
      "Epoch 166/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6697 - mse: 0.6616 - val_loss: 0.6226 - val_mse: 0.6145\n",
      "Epoch 167/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6688 - mse: 0.6607 - val_loss: 0.6205 - val_mse: 0.6125\n",
      "Epoch 168/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6694 - mse: 0.6613 - val_loss: 0.6194 - val_mse: 0.6113\n",
      "Epoch 169/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6714 - mse: 0.6633 - val_loss: 0.6201 - val_mse: 0.6121\n",
      "Epoch 170/3000\n",
      "1389/1397 [============================>.] - ETA: 0s - loss: 0.6735 - mse: 0.6655\n",
      "Epoch 00170: saving model to Regression_Model/bl6.mle.linear-0170.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6733 - mse: 0.6653 - val_loss: 0.6225 - val_mse: 0.6144\n",
      "Epoch 171/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6722 - mse: 0.6642 - val_loss: 0.6193 - val_mse: 0.6113\n",
      "Epoch 172/3000\n",
      "1397/1397 [==============================] - 7s 5ms/step - loss: 0.6694 - mse: 0.6613 - val_loss: 0.6244 - val_mse: 0.6164\n",
      "Epoch 173/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6737 - mse: 0.6657 - val_loss: 0.6169 - val_mse: 0.6089\n",
      "Epoch 174/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6678 - mse: 0.6598 - val_loss: 0.6163 - val_mse: 0.6083\n",
      "Epoch 175/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6703 - mse: 0.6623 - val_loss: 0.6175 - val_mse: 0.6095\n",
      "Epoch 176/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6681 - mse: 0.6601 - val_loss: 0.6209 - val_mse: 0.6129\n",
      "Epoch 177/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6691 - mse: 0.6611 - val_loss: 0.6197 - val_mse: 0.6117\n",
      "Epoch 178/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6671 - mse: 0.6591 - val_loss: 0.6224 - val_mse: 0.6144\n",
      "Epoch 179/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6698 - mse: 0.6618 - val_loss: 0.6191 - val_mse: 0.6111\n",
      "Epoch 180/3000\n",
      "1393/1397 [============================>.] - ETA: 0s - loss: 0.6695 - mse: 0.6615\n",
      "Epoch 00180: saving model to Regression_Model/bl6.mle.linear-0180.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6693 - mse: 0.6613 - val_loss: 0.6223 - val_mse: 0.6144\n",
      "Epoch 181/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6672 - mse: 0.6592 - val_loss: 0.6182 - val_mse: 0.6103\n",
      "Epoch 182/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6674 - mse: 0.6594 - val_loss: 0.6169 - val_mse: 0.6089\n",
      "Epoch 183/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6662 - mse: 0.6582 - val_loss: 0.6190 - val_mse: 0.6110\n",
      "Epoch 184/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6675 - mse: 0.6595 - val_loss: 0.6165 - val_mse: 0.6086\n",
      "Epoch 185/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6701 - mse: 0.6621 - val_loss: 0.6206 - val_mse: 0.6126\n",
      "Epoch 186/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6668 - mse: 0.6589 - val_loss: 0.6187 - val_mse: 0.6108\n",
      "Epoch 187/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6703 - mse: 0.6624 - val_loss: 0.6180 - val_mse: 0.6101\n",
      "Epoch 188/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6649 - mse: 0.6570 - val_loss: 0.6172 - val_mse: 0.6093\n",
      "Epoch 189/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6633 - mse: 0.6553 - val_loss: 0.6197 - val_mse: 0.6118\n",
      "Epoch 190/3000\n",
      "1391/1397 [============================>.] - ETA: 0s - loss: 0.6705 - mse: 0.6626\n",
      "Epoch 00190: saving model to Regression_Model/bl6.mle.linear-0190.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6703 - mse: 0.6624 - val_loss: 0.6207 - val_mse: 0.6128\n",
      "Epoch 191/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6679 - mse: 0.6600 - val_loss: 0.6191 - val_mse: 0.6112\n",
      "Epoch 192/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6677 - mse: 0.6598 - val_loss: 0.6177 - val_mse: 0.6098\n",
      "Epoch 193/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6673 - mse: 0.6594 - val_loss: 0.6202 - val_mse: 0.6123\n",
      "Epoch 194/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6649 - mse: 0.6570 - val_loss: 0.6168 - val_mse: 0.6089\n",
      "Epoch 195/3000\n",
      "1397/1397 [==============================] - 6s 5ms/step - loss: 0.6660 - mse: 0.6581 - val_loss: 0.6167 - val_mse: 0.6088\n",
      "Epoch 196/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6682 - mse: 0.6603 - val_loss: 0.6215 - val_mse: 0.6137\n",
      "Epoch 197/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6644 - mse: 0.6565 - val_loss: 0.6218 - val_mse: 0.6139\n",
      "Epoch 198/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6651 - mse: 0.6572 - val_loss: 0.6257 - val_mse: 0.6179\n",
      "Epoch 199/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6655 - mse: 0.6577 - val_loss: 0.6189 - val_mse: 0.6111\n",
      "Epoch 200/3000\n",
      "1395/1397 [============================>.] - ETA: 0s - loss: 0.6685 - mse: 0.6607\n",
      "Epoch 00200: saving model to Regression_Model/bl6.mle.linear-0200.ckpt\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6684 - mse: 0.6606 - val_loss: 0.6163 - val_mse: 0.6085\n",
      "Epoch 201/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6676 - mse: 0.6597 - val_loss: 0.6219 - val_mse: 0.6141\n",
      "Epoch 202/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6679 - mse: 0.6600 - val_loss: 0.6181 - val_mse: 0.6102\n",
      "Epoch 203/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6689 - mse: 0.6611 - val_loss: 0.6191 - val_mse: 0.6113\n",
      "Epoch 204/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6662 - mse: 0.6584 - val_loss: 0.6190 - val_mse: 0.6112\n",
      "Epoch 205/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6671 - mse: 0.6592 - val_loss: 0.6168 - val_mse: 0.6089\n",
      "Epoch 206/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6644 - mse: 0.6565 - val_loss: 0.6177 - val_mse: 0.6099\n",
      "Epoch 207/3000\n",
      "1397/1397 [==============================] - 6s 4ms/step - loss: 0.6665 - mse: 0.6587 - val_loss: 0.6189 - val_mse: 0.6111\n",
      "Epoch 208/3000\n",
      " 960/1397 [===================>..........] - ETA: 1s - loss: 0.6660 - mse: 0.6582"
     ]
    }
   ],
   "source": [
    " history = model.fit(training_generator,epochs=3000,validation_data=validation_generator,callbacks=[cp_callback])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for key in history.history.keys():\n",
    "    print(key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(6, 4))\n",
    "plt.plot(history.history['loss'], label='Loss of training data')\n",
    "plt.plot(history.history['val_loss'], color='red', label='Loss of validation data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate(x,y,pasid,trainid,dataset,label_mean,label_std):\n",
    "    test_generator = EvaDataGenerator(x)\n",
    "    model = Regression_CNN(1001);\n",
    "    MODEL_PATH = 'Regression_Model/'+trainid+'-2900.ckpt'\n",
    "    model.load_weights(MODEL_PATH)\n",
    "    print('load weight success')\n",
    "    pred = model.predict_generator(test_generator)\n",
    "    OUT=open(dataset+'.'+trainid,'w')\n",
    "    OUT.write(\"pas_id\\tpredict\\tpolyA\\tpredict_readCount\\tpolyA_readCount\\n\")\n",
    "    for i in range(len(pred)):\n",
    "        predict = pred[i][0]\n",
    "        predict_readCount = np.exp(predict*label_std+label_mean)\n",
    "        truth = y[i]\n",
    "        truth_readCount   = np.exp(truth*label_std+label_mean)\n",
    "        OUT.write('%s\\t%s\\t%s\\t%s\\t%s\\n'%(pasid[i],predict,truth,predict_readCount,truth_readCount))\n",
    "    OUT.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "testid='bl6.mle.linear'\n",
    "evaluate(train_x,train_y,train_id,testid,'train',label_mean,label_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "evaluate(valid_x,valid_y,valid_id,testid,'valid',label_mean,label_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_generator = DataGenerator(train_x,train_y,0,shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data1,labels,pasid = get_data('usage_data/BL6_REP1.pAs.predict.coverage.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "kf = KFold(n_splits = 5,random_state=len(labels)+1,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "folds = list(kf.split(labels))\n",
    "train_index,valid_index = folds[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "OUT=open('test','w')\n",
    "OUT.write(\"RNA_readCount\\n\")\n",
    "for coverage in valid_data:\n",
    "    mean = np.mean(coverage)\n",
    "    OUT.write('%s\\n'%(mean))\n",
    "    #for i in coverage:\n",
    "     #   OUT.write('%s\\n'%(i[0]))\n",
    "OUT.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.min(train_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
