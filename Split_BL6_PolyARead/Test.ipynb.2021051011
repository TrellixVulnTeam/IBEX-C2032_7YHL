{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from prep_data import prep_data,DataGenerator\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "ROOT_DIR = 'data'\n",
    "BLOCK_DIR = '../Split_BL6/BL6_REP1_data/Blocks'\n",
    "polyA_file = '../Split_BL6_PolyARead/BAM/BL6_REP1.PolyACount.txt'\n",
    "ROUNDNAME = 'BL6_REP1_aug8_SC_p5r10u0.05_0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of train positive dataset: 17619\n",
      "Size of train positive augmentation dataset: 297786\n",
      "Size of train negative dataset: 17619\n",
      "Size of train negative augmentation dataset: 294456\n"
     ]
    }
   ],
   "source": [
    "train_data,_ = prep_data(ROOT_DIR,BLOCK_DIR,polyA_file,ROUNDNAME,5,'train')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_standard_scaler(train_data):\n",
    "    train_array = []\n",
    "    for i,key in enumerate(train_data['meta_data'].keys()):\n",
    "        train_array.append(train_data['cov_input'][key][:,0])\n",
    "    train_array = np.array(train_array)\n",
    "    train_array = np.log(train_array+1)\n",
    "    data_mean = np.mean(train_array)\n",
    "    data_std  = np.std(train_array)\n",
    "    return data_mean,data_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_mean,data_std = get_standard_scaler(train_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Normalization(train_data,data_mean,data_std):\n",
    "    norm_cov_input = dict()\n",
    "    for key,val in train_data['cov_input'].items():\n",
    "        val = (np.log(val+1)-data_mean)/data_std\n",
    "        norm_cov_input[key] = val\n",
    "    train_data['cov_input'] = norm_cov_input\n",
    "    return train_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = Normalization(train_data,data_mean,data_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.06037054],\n",
       "       [-0.06037054],\n",
       "       [-0.06037054],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.11106398],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.08506711],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.13850595],\n",
       "       [-0.19843745],\n",
       "       [-0.19843745],\n",
       "       [-0.19843745],\n",
       "       [-0.19843745],\n",
       "       [-0.19843745],\n",
       "       [-0.21462993],\n",
       "       [-0.21462993],\n",
       "       [-0.21462993],\n",
       "       [-0.23137155],\n",
       "       [-0.23137155],\n",
       "       [-0.26665995],\n",
       "       [-0.30466548],\n",
       "       [-0.30466548],\n",
       "       [-0.30466548],\n",
       "       [-0.34584168],\n",
       "       [-0.34584168],\n",
       "       [-0.34584168],\n",
       "       [-0.34584168],\n",
       "       [-0.34584168],\n",
       "       [-0.34584168],\n",
       "       [-0.34584168],\n",
       "       [-0.34584168],\n",
       "       [-0.39076608],\n",
       "       [-0.39076608],\n",
       "       [-0.39076608],\n",
       "       [-0.39076608],\n",
       "       [-0.39076608],\n",
       "       [-0.39076608],\n",
       "       [-0.39076608],\n",
       "       [-0.39076608],\n",
       "       [-0.39076608],\n",
       "       [-0.4401902 ],\n",
       "       [-0.4401902 ],\n",
       "       [-0.4401902 ],\n",
       "       [-0.49511653],\n",
       "       [-1.0994514 ],\n",
       "       [-1.0994514 ],\n",
       "       [-1.0994514 ],\n",
       "       [-1.0994514 ],\n",
       "       [-1.0994514 ],\n",
       "       [-1.0994514 ],\n",
       "       [-1.0994514 ],\n",
       "       [-1.0994514 ],\n",
       "       [-1.0994514 ],\n",
       "       [-1.0994514 ],\n",
       "       [-1.209646  ],\n",
       "       [-1.209646  ],\n",
       "       [-1.209646  ],\n",
       "       [-1.209646  ],\n",
       "       [-1.209646  ],\n",
       "       [-1.209646  ],\n",
       "       [-1.209646  ],\n",
       "       [-1.3517115 ],\n",
       "       [-1.3517115 ],\n",
       "       [-1.5519416 ],\n",
       "       [-1.5519416 ],\n",
       "       [-1.5519416 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ],\n",
       "       [-1.8942373 ]], dtype=float32)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['cov_input']['chr10:29031308:+']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.835822, 2.0249956)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_mean,data_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
