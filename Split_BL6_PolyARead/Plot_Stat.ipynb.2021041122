{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "********************************************************\n",
      "\n",
      "Note: As of version 1.0.0, cowplot does not change the\n",
      "\n",
      "  default ggplot2 theme anymore. To recover the previous\n",
      "\n",
      "  behavior, execute:\n",
      "  theme_set(theme_cowplot())\n",
      "\n",
      "********************************************************\n",
      "\n",
      "\n",
      "\n",
      "Attaching package: ‘cowplot’\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:ggpubr’:\n",
      "\n",
      "    get_legend\n",
      "\n",
      "\n",
      "\n",
      "Attaching package: ‘plotly’\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:ggplot2’:\n",
      "\n",
      "    last_plot\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:stats’:\n",
      "\n",
      "    filter\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:graphics’:\n",
      "\n",
      "    layout\n",
      "\n",
      "\n",
      "\n",
      "Attaching package: ‘ggpmisc’\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:ggplot2’:\n",
      "\n",
      "    annotate\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "library(ggplot2)#!/usr/bin/env Rscript\n",
    "library(ggpubr)\n",
    "library(ggrepel)\n",
    "library(cowplot)\n",
    "library(plotly)\n",
    "library(ggpmisc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "roc = read.table('MaxPoint.thround5.txt',header=T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n9tprLS0tL7300mmnnWaaZmq/T33qU/v27Xv11VeH/jdSJAh22lyCHVOxAAAM1qJFi7LZ7P33\n3y8iW7dufeaZZy644ILerzY3NxuG0fvpyJEjRWTHjh1bt24Vkdtvvz3Zx+LFi0Vky5YtQ/17\nKBrsitXmGuwUwQ4AgEE56aSTpk2btmLFiq997Wu/+c1vTNM8//zzB7o4m82KiGnmKlOLFi26\n+OKLD7hmypQpwY22yBHstFmWiLArFgAA3y1cuPDaa69du3btypUrTznllDFjxvR+adu2bZZl\nRfb/+7tjxw4RaW5unjBhgohYlkWL476YitXmtiuWkycAABi8Cy+8MBKJfO9733v++eedbRO9\nuru7//u//7v308ceeyyRSMydO7ehoWHu3Lm///3vW1tbe7/6i1/84vrrr3eqesMTFTttli0y\n8K5YKnYAAAzWmDFjTj311JUrV9bW1p511ll9vzR+/Pgrr7xy48aNU6ZMefzxx3//+99fcMEF\n9fX1IvKjH/3olFNOOfnkk7/+9a+PHj366aef/uEPf/ilL30pGh2+8Wb4/s7zlqvY9VfjJNgB\nAFCYRYsW/cd//MfnP//5ZDLZ9/Wqqqr777//a1/72gsvvJBIJC6++OJbb73V+dLJJ5/8xBNP\nLF269LLLLkulUhMnTvznf/7nq666KozhFwuCnS5FHzsAAAqzYMGCgbYbxmIxETl4J4RSas6c\nOU899VS/v+qkk07qO1EL1thpc4KdyeYJAAB8lslkli5dOm/evLlz54Y9ltJGxU6bE+yiNCgG\nAMA3mzdvfumll372s5+99NJLzz77bNjDKXlU7LRZWREx+qvYGVTsAAAYlFWrVp199tnr1q17\n5JFHjjvuuLCHU/Ko2GnL7YodYCpWRJSSPq2xAQCAp0WLFi1atGigrz7zzDNDOZgyQMVOm1sf\nu/3BDgAAIDwEO13Kdj0rVgh2AAAgZAQ7bVmXdiemiHD4BAAACBfBTluuYjdAg2KhYgcAAEJG\nsNPmUrEzCXYAACB8BDtttiUiRv9r7EwR4fAJAAAQLtqdaGNXLAAA+cv+7te5f0P9E1nwCaOp\n2d97lgeCnTbLY1esUooudgAAHMB68XnJZPy9pzn7OIJdvwh2upROg2IAAHAQo3FU7MKLfbmV\n9cyT1nP/68utyhLBTptXxY5gBwBA/6JRY5RPBbbKKn/uU6bYPKEtt8aOXbEAAKBIEey0ee+K\n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\nSURBVPEVBWWLYWhNxdLuBAAAhEd388To0aMvu+yyP//5z1u2bLnlllt27979xS9+cfTo0Rdf\nfPHzzz8f6BBDp2zlneqENXYAACBkee+Kddbb/fznPz/vvPPa29vvvffe448//sQTT3zhhReC\nGF9RUAQ7AABQAvILdjt27Lj11luPPvroWbNm/frXvz7ttNN++9vfPvLII+l0et68eY8//nhA\nowyZMxXriWAHAABCFdW5KJ1OP/rooytWrHjsscey2ez06dO///3vX3jhhWPGjHEuOPXUU888\n88xLL710/fr1QY42JNoVO0WwAwAA4dEKdmPGjNmzZ091dfU//MM/LFq06KSTTjrgglgstnjx\n4nPOOSeAERYBpbwPihUqdgAAIGRawW7GjBkLFy4899xzq6qqBrpm9uzZ9957r38DKyZKialT\nsaPdCQAACJPWGrvu7u4TTjjh4FT329/+dsaMGc7H48ePX7Rokc+jKxL6u2JpdwIAAMKjFez+\n+te/dnZ2HvBiNptdu3bthg0bAhhVkdFcY8fJEwAAIFQeU7HG/kBz3HHH9XvB7NmzfR5REVLK\n0KrYMRULAADC5BHs1qxZ89RTT11xxRVnnXVWY2Nj3y8ZhjF27NiLL744yOEVB2WzeQIAABQ/\nj2B39NFHH3300f/5n/958803T506dWjGVHRoUAwAAEqB1q7Y//qv/wp6HEVNL9gZ9LEDAACh\ncgt2hx9++IUXXnjttdcefvjhLpe9+eabfo+qyOhX7PQvBgAA8JtbsKurq0smk84HQzWeoqSU\nmHpr7IRgBwAAQuMW7P7yl78c8MEwlW/FDgAAIAxaa+xEpKurq62tzTkctru7+9e//vXu3bvP\nOeecSZMmBTm84qAb7EwREWWLRIIeEQAAwMG0GhS/+eabEydOXLFihYhks9mPfvSjCxcu/MY3\nvjF79uyXXnop4BEWAf12J0LFDgAAhEYr2F133XXNzc2f+9znROSBBx544YUXfvrTn65fv37m\nzJnf+973Ah5h+JTmkWLOOjxOFQMAACHRCnbPPPPMN7/5zcmTJ4vI7373u1mzZv3jP/7j5MmT\nL7300ueeey7gERYBpcTUX2PH4RMAACAcWsGutbXVWV1nWdaf/vSnT33qU87rTU1NO3bsCHB0\nRYKpWAAAUAq0gl1zc/M777wjIk888cTevXtPPfVU5/XNmzePHDkywNEViXx2xdKjGAAAhEVr\n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\nAAAAAElFTkSuQmCC",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ggplot(data=roc,aes(x=maxPoint,group=Type,colour=Type))+geom_density()+\n",
    "#ggplot(data=roc,aes(x=maxPoint))+geom_density()+\n",
    "geom_vline(xintercept = 9)+\n",
    "theme_bw()+\n",
    "theme(legend.position = c(0.89,0.8)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "usage_recall = read.table('../K562/Control_stat/Stat.usage.recall.txt',header=T)\n",
    "ggplot(data=usage_recall,aes(x=usage,group=Predicted,colour=Predicted))+geom_density()+\n",
    "theme_bw()+\n",
    "theme(legend.position = c(0.89,0.8))+\n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "      legend.title=element_text(size=20),legend.text=element_text(size=20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov_diff = read.table('BL6_stat/Stat.conserved.diff.txt',header=T)\n",
    "ggplot(data=cov_diff,aes(x=diff,group=Conserved,colour=Conserved))+geom_density()+\n",
    "theme_bw()+\n",
    "theme(legend.position = c(0.89,0.8))+\n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "      legend.title=element_text(size=20),legend.text=element_text(size=20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(properties.tab <- with(cov_diff,table(Conserved,Predicted)))\n",
    "properties.tot <- cbind(properties.tab, \n",
    "                  Total = apply(properties.tab, 1, sum))\n",
    "(properties.tot <- rbind(properties.tot, \n",
    "                  Total = apply(properties.tot, 2, sum)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "biotype_diff = read.table('../K562/Control_stat/Stat.biotype.diff.txt',header=T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(properties.tab <- with(biotype_diff,table(Biotype,Predicted)))\n",
    "properties.tot <- cbind(properties.tab, \n",
    "                  Total = apply(properties.tab, 1, sum))\n",
    "(properties.tot <- rbind(properties.tot, \n",
    "                  Total = apply(properties.tot, 2, sum)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pastype_diff = read.table('../K562/Control_stat/Stat.pas_type.diff.txt',header=T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(properties.tab <- with(pastype_diff,table(pas_type,Predicted)))\n",
    "properties.tot <- cbind(properties.tab, \n",
    "                  Total = apply(properties.tab, 1, sum))\n",
    "(properties.tot <- rbind(properties.tot, \n",
    "                  Total = apply(properties.tot, 2, sum)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "plotPASCoverage <- function(pas,data){\n",
    "    if(is.numeric(pas)){\n",
    "        df =  data.frame(position = 1:2001,coverage = as.vector(as.matrix(data[pas,8:2008])))\n",
    "    }\n",
    "    else{\n",
    "        cov = subset(data,data$V1 == pas)[,8:2008]\n",
    "        df = data.frame(position = 1:2001,coverage = as.vector(as.matrix(cov)))\n",
    "    }\n",
    "    print(pas)\n",
    "    p = ggplot(data=df,aes(x=position,y=log(coverage+1)))+\n",
    "    geom_line()+\n",
    "    labs(title=paste(\"Coverage of PAS \",pas,sep=''))+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0),\n",
    "          legend.title=element_blank(),\n",
    "          plot.title = element_text(size=15,face = \"bold\",hjust = 0.5),\n",
    "          legend.text=element_text(size=11,color=\"black\",face=\"bold\"))\n",
    "    print(p)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "coverage= read.table('usage_data/BL6_REP1.pAs.predict.coverage.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] \"chr11:78471946:+\"\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAMAAADKOT/pAAADAFBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tM\nTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1e\nXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29w\ncHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGC\ngoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OU\nlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWm\npqanp6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4\nuLi5ubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnK\nysrLy8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc\n3Nzd3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u\n7u7v7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7////i\nsF19AAAACXBIWXMAABJ0AAASdAHeZh94AAAgAElEQVR4nOydCbxU4xvHf7fbvi+0aEUpewqJ\nbJG1aRGS5V+KkiKJopBIUUqytClJCyVZK7JEZElCJCqytd/Snpb7/s8585yZOXNme8+85977\n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\nYk4AAAAASUVORK5CYII=",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotPASCoverage('chr11:78471946:+',coverage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(devtools)\n",
    "data= read.table('usage_data/test',header=TRUE)\n",
    "ggplot(data= data, aes(x =RNA_usage , y = polyA_usage)) + \n",
    "theme_bw()+\n",
    "geom_smooth(method = 'lm', formula = y ~ x-1,fullrange = T) + #绘制回归直线\n",
    "geom_point(size=1,shape=1) +\n",
    "stat_poly_eq(aes(label = paste( ..rr.label.., sep = '~~~~')), formula = y ~ x-1, parse = T,\n",
    "            size=8,label.x = 0.5,label.y = 1) +\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "      legend.title=element_text(size=20),legend.text=element_text(size=20))+\n",
    "labs(x=\"Predict_Coverage\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(devtools)\n",
    "data= read.table('usage_data/test4',header=TRUE)\n",
    "ggplot(data= data, aes(x =predict_diff , y = polyA_diff)) + \n",
    "theme_bw()+\n",
    "geom_smooth(method = 'lm', formula = y ~ x-1,fullrange = T) + #绘制回归直线\n",
    "geom_point(size=1,shape=1) +\n",
    "stat_poly_eq(aes(label = paste( ..rr.label.., sep = '~~~~')), formula = y ~ x-1, parse = T,\n",
    "            size=8,label.x = 0.5,label.y = 1) +\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "      legend.title=element_text(size=20),legend.text=element_text(size=20))+\n",
    "labs(x=\"predict_diff\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(devtools)\n",
    "data= read.table('usage_data/test',header=TRUE)\n",
    "#data2 = data[which(data$RNA_readCount>0.1),]\n",
    "ggplot(data= data, aes(x =log2(RNA_RPM), y = log2(polyA_RPM))) + \n",
    "#ggplot(data= data, aes(x =log2(RNA_readCount), y = log2(polyA_readCount))) + \n",
    "theme_bw()+\n",
    "geom_smooth(method = 'lm', formula = y ~ x-1,fullrange = T) + #绘制回归直线\n",
    "geom_point(size=1,shape=1) +\n",
    "stat_poly_eq(aes(label = paste( ..rr.label.., sep = '~~~~')), formula = y ~ x-1, parse = T,\n",
    "            size=8,label.x = 0.5,label.y = 1) +\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "      legend.title=element_text(size=20),legend.text=element_text(size=20))+\n",
    "labs(x=\"log2(RNA_RPM)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cor(data$log2polyA_RPM , data$log2RNA_RPM,method = \"pearson\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "summary(data$polyA_readCount)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "min(data$polyA_RPM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(devtools)\n",
    "data= read.table('usage_data/test',header=TRUE)\n",
    "ggplot(data= data, aes(x =log2(RNA_RPM), y = log2(polyA_RPM))) + \n",
    "#ggplot(data= data, aes(x =log2(RNA_readCount), y = log2(polyA_readCount))) + \n",
    "geom_point(size=1,shape=1) +\n",
    "theme_bw()+\n",
    "geom_smooth(method = 'lm', formula = y ~ x-1,fullrange = T) + #绘制回归直线\n",
    "\n",
    "#stat_poly_eq(aes(label = paste( ..rr.label.., sep = '~~~~')),formula = y ~ x-1, parse = T,\n",
    " #           size=8,label.x = 0.5,label.y = 1) +\n",
    "stat_cor(method = \"pearson\", cor.coef.name = \"R\",label.x = 5, label.y = 15)+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "      legend.title=element_text(size=20),legend.text=element_text(size=20))+\n",
    "labs(x=\"log2(RNA_RPM)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(devtools)\n",
    "data= read.table('test.txt',header=TRUE)\n",
    "ggplot(data= data, aes(x =predict, y = polyA_read)) + \n",
    "#ggplot(data= data, aes(x =log2(RNA_readCount), y = log2(polyA_readCount))) + \n",
    "geom_point(size=1,shape=1) +\n",
    "theme_bw()+\n",
    "geom_smooth(method = 'lm', formula = y ~ x-1,fullrange = T) + #绘制回归直线\n",
    "\n",
    "#stat_poly_eq(aes(label = paste( ..rr.label.., sep = '~~~~')),formula = y ~ x-1, parse = T,\n",
    " #           size=8,label.x = 0.5,label.y = 1) +\n",
    "stat_cor(method = \"pearson\", cor.coef.name = \"R\",label.x = 5, label.y = 15)+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "      legend.title=element_text(size=20),legend.text=element_text(size=20))+\n",
    "labs(x=\"log2(RNA_RPM)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(devtools)\n",
    "data= read.table('usage_data/test2',header=TRUE)\n",
    "data2 = data[which(data$RNA_readCount<10000 & data$polyA_readCount<10000),]\n",
    "ggplot(data= data2, aes(x =RNA_readCount , y = polyA_readCount)) + \n",
    "theme_bw()+\n",
    "geom_smooth(method = 'lm', formula = y ~ x-1,fullrange = T) + #绘制回归直线\n",
    "geom_point(size=2,shape=1) +\n",
    "stat_poly_eq(aes(label = paste(..rr.label.., sep = '~~~~')), formula = y ~ x-1, parse = T,\n",
    "            size=8,label.x = 0.5,label.y = 1) +\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "      legend.title=element_text(size=20),legend.text=element_text(size=20))+\n",
    "labs(x=\"RNA Coverage\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data= read.table('usage_data/test',header=TRUE)\n",
    "sp <- ggscatter(data, x='polyA_usage',y='RNA_usage',\n",
    "                 shape = 1,size=1,\n",
    "                 #add = \"reg.line\",  # Add regressin line\n",
    "                 #add.params = list(color = \"blue\", fill = \"lightgray\"), # Customize reg. line\n",
    "                 #conf.int = TRUE, # Add confidence interval\n",
    "                )+geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) \n",
    "sp + stat_cor(method = \"spearman\", cor.coef.name = \"rho\",label.x = 0.45, label.y = 1.02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data= read.table('usage_data/test',header=TRUE)\n",
    "sp <- ggscatter(data, x ='log2RNA_RPM', y = 'log2polyA_RPM',\n",
    "                 shape = 1,size=1,\n",
    "                 #add = \"reg.line\",  # Add regressin line\n",
    "                 #add.params = list(color = \"blue\", fill = \"lightgray\"), # Customize reg. line\n",
    "                 #conf.int = TRUE, # Add confidence interval\n",
    "                )+geom_smooth(method = 'lm', formula = y ~ x-1,fullrange = T) \n",
    "sp + stat_cor(method = \"spearman\", cor.coef.name = \"rho\",label.x = 5, label.y = 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data= read.table('usage_data/test2',header=TRUE)\n",
    "sp <- ggscatter(data, x='polyA_usage',y='RNA_usage',\n",
    "                 shape = 19,size=1,\n",
    "                 add = \"reg.line\",  # Add regressin line\n",
    "                 add.params = list(color = \"blue\", fill = \"lightgray\"), # Customize reg. line\n",
    "                 conf.int = TRUE, # Add confidence interval\n",
    "                )\n",
    "sp + stat_cor(method = \"spearman\", cor.coef.name = \"rho\",label.x = 0.45, label.y = 1.02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Tcp1')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=coverage))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Zfp800')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=coverage))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Fbxo42')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=log(coverage)))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov[4250:4260]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Pole4')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=log(coverage)))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Syde1')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=coverage))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Hnrnph3')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=coverage))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov[900:1000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Plk2')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=coverage))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Cops3')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=coverage))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.C2cd5')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=coverage))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Ccnl1')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=log(coverage)))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Atp5b')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=log(coverage)))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = read.table('usage_data/Coverage.Mtf1')\n",
    "df = data.frame(position = 1:ncol(cov),coverage = as.vector(as.matrix(cov)))\n",
    " p = ggplot(data=df,aes(x=position,y=coverage))+\n",
    "    geom_line()+\n",
    "    theme_bw()+\n",
    "    theme(axis.title=element_text(size=12),\n",
    "          axis.text=element_text(size=12,vjust=0.5,hjust=0.5,angle=0))\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov[380:390]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RNASeqplot = function(polyASeq_Reads,bins,depth){\n",
    "    p1 = ggplot(data=polyASeq_Reads,aes(x=log10(Upstream_readCouunt/depth*1e6)))+geom_histogram(fill=\"orange\",bins = bins)+\n",
    "    theme_bw()+\n",
    "    xlab('log10(RNASeq_TPM)')+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20))\n",
    "\n",
    "\n",
    "    cat = cut(polyASeq_Reads$Upstream_readCouunt/depth*1e6, breaks=c(-Inf,0.1,0.5,1,5,10,Inf),\n",
    "        labels = c(\"<0.1\",\"0.1-0.5\",\"0.5-1\",\"1-5\",\"5-10\",\">10\"))\n",
    "    p2 = ggplot(data=data.frame(cat),aes(factor(cat), fill=factor(cat)))+geom_bar()+\n",
    "    geom_text(size=6,aes(label=scales::percent(after_stat(prop)),group=1),stat='count',nudge_y=0.125) +\n",
    "    theme_bw()+\n",
    "    xlab('RNASeq_TPM')+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "           legend.title = element_blank(),legend.position = \"none\")\n",
    "    plot_grid(p1,p2)\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "polyASeqplot = function(polyASeq_Reads,bins,depth){\n",
    "    p1 = ggplot(data=polyASeq_Reads,aes(x=log10(PolyASeq_readCount/depth*1e6)))+\n",
    "    geom_histogram(fill=\"orange\",bins = bins)+\n",
    "    theme_bw()+\n",
    "    xlab('log10(PolyASeq_TPM)')+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20))\n",
    "\n",
    "\n",
    "    cat = cut(polyASeq_Reads$PolyASeq_readCount*2,breaks=c(-Inf,2,5,10,15,20,Inf),\n",
    "        labels = c(\"<2\",\"2-5\",\"5-10\",\"10-15\",\"15-20\",\">20\"))\n",
    "    p2 = ggplot(data=data.frame(cat),aes(factor(cat), fill=factor(cat)))+geom_bar()+\n",
    "    geom_text(size=6,aes(label=scales::percent(after_stat(prop)),group=1),stat='count',nudge_y=0.125) +\n",
    "    theme_bw()+\n",
    "    xlab('PolyASeq_RC')+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title = element_blank(),legend.position = \"none\")\n",
    "    plot_grid(p1,p2)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bl6_data = read.table('../Split_BL6_PolyARead/usage_data/bl6.pAs.usage.txt',header=TRUE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "options(repr.plot.width=16, repr.plot.height=8)\n",
    "polyASeqplot(bl6_data,40,35447737)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RNASeqplot(bl6_data,40,155125974)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k562_data = read.table('../Split_BL6_PolyARead/usage_data/K562_Control.pAs.usage.txt',header=TRUE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "polyASeqplot(k562_data,40,3275611)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RNASeqplot(k562_data,40,184242893)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# volcano is a numeric matrix that ships with R\n",
    "bl6_volcano = as.matrix(read.table('../Split_BL6_PolyARead/usage_data/bl6.pAs.volcano.txt'))\n",
    "fig <- plot_ly(z = ~bl6_volcano)\n",
    "fig <- fig %>% add_surface()\n",
    "\n",
    "fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k562_volcano = as.matrix(read.table('../Split_BL6_PolyARead/usage_data/K562_ZRANB2.pAs.volcano.txt'))\n",
    "# volcano is a numeric matrix that ships with R\n",
    "fig <- plot_ly(z = ~k562_volcano)\n",
    "fig <- fig %>% add_surface()\n",
    "\n",
    "fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "install.packages('plotly')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "volcano"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "histplot = function(data,bins){\n",
    "    p1 = ggplot(data=data,aes(x=usage))+\n",
    "    geom_histogram(fill=\"orange\",breaks=seq(0, 1, by=0.05),)+\n",
    "    #geom_text(size=6,aes(label=..count..),stat='count',nudge_y=0.125) +\n",
    "    theme_bw()+\n",
    "    xlab('usage')+\n",
    "    scale_x_continuous(breaks = round(seq(0,1,by = 0.1),1))+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20))\n",
    "    print(p1)\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bl6_data = read.table('../Split_BL6_PolyARead/usage_data/K562_ZRANB2.pAs.multipAs.usage.txt',header=TRUE)\n",
    "histplot(bl6_data,25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k562_data = read.table('../Split_BL6_PolyARead/usage_data/K562_Control.pAs.pasPerGene.txt',header=TRUE)\n",
    "ggplot(k562_data, aes(x=cutoff)) +\n",
    "geom_bar(aes(y=pas_num,fill='pAs number'), size=2,stat = \"identity\",)+\n",
    "geom_bar(aes(y=gene_num,fill='gene number'), size=2,stat = \"identity\")+\n",
    "scale_color_manual(values=c(\"#999999\", \"#E69F00\"))+\n",
    "geom_text(size=5,stat=\"identity\",aes(y=pas_num,label=pas_num), vjust=-0.5)+\n",
    "geom_text(size=5,stat=\"identity\",aes(y=gene_num,label=gene_num), vjust=-0.5)+\n",
    "theme_bw()+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title = element_blank(),legend.position=c(0.9,0.93),legend.text=element_text(size=20))+\n",
    "ylab('Count')\n",
    "\n",
    "ggplot(k562_data, aes(x=cutoff)) +\n",
    "geom_bar(aes(y=pas_per_gene,fill='pAs number per gene'), size=2,stat = \"identity\",)+\n",
    "scale_color_manual(values=c(\"#999999\"))+\n",
    "geom_text(size=5,stat=\"identity\",aes(y=pas_per_gene,label= sprintf(\"%.3f\",pas_per_gene)), vjust=-0.5)+\n",
    "theme_bw()+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title = element_blank(),legend.position=c(0.9,0.93),legend.text=element_text(size=20))+\n",
    "ylab('Count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/K562_ZRANB2.pAs.multipas.txt',header=TRUE)\n",
    "ggplot(data, aes(x=cutoff)) +\n",
    "geom_bar(aes(y=percet_multipas,fill='%multipAs gene'), size=2,stat = \"identity\",)+\n",
    "scale_color_manual(values=c(\"#999999\"))+\n",
    "geom_text(size=5,stat=\"identity\",aes(y=percet_multipas,label= sprintf(\"%.1f%%\",percet_multipas*100)), vjust=-0.5)+\n",
    "theme_bw()+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title = element_blank(),legend.position=c(0.9,0.93),legend.text=element_text(size=20))+\n",
    "ylab('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.multipAs.usage.txt',header=TRUE)\n",
    "ggplot(data=data,aes(x=usage,fill=predicted))+\n",
    "    geom_density(alpha=0.25)+\n",
    "    theme_bw()+\n",
    "    xlab('usage')+\n",
    "    scale_x_continuous(breaks = round(seq(0,1,by = 0.05),1))+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20),legend.position=c(0.9,0.9))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.multipAs.usage.txt',header=TRUE)\n",
    "data =  data[ which(data$pas_type==\"ncRNA\"), ]\n",
    "ggplot(data=data,aes(x=usage,fill=predicted))+\n",
    "    geom_density(alpha=0.25)+\n",
    "    theme_bw()+\n",
    "    xlab('usage')+\n",
    "    scale_x_continuous(breaks = round(seq(0,1,by = 0.05),1))+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20),legend.position=c(0.9,0.9))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.multipAs.usage.txt',header=TRUE)\n",
    "data =  data[ which(data$pas_type==\"intergenic\"), ]\n",
    "ggplot(data=data,aes(x=usage,fill=predicted))+\n",
    "    geom_density(alpha=0.25)+\n",
    "    theme_bw()+\n",
    "    xlab('usage')+\n",
    "    scale_x_continuous(breaks = round(seq(0,1,by = 0.05),1))+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20),legend.position=c(0.9,0.9))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.multipAs.usage.txt',header=TRUE)\n",
    "data =  data[ which(data$pas_type==\"UR\"), ]\n",
    "ggplot(data=data,aes(x=usage,fill=predicted))+\n",
    "    geom_density(alpha=0.25)+\n",
    "    theme_bw()+\n",
    "    xlab('usage')+\n",
    "    scale_x_continuous(breaks = round(seq(0,1,by = 0.05),1))+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20),legend.position=c(0.9,0.9))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.multipAs.usage.txt',header=TRUE)\n",
    "data =  data[ which(data$pas_type==\"LE\"), ]\n",
    "ggplot(data=data,aes(x=usage,fill=predicted))+\n",
    "    geom_density(alpha=0.25)+\n",
    "    theme_bw()+\n",
    "    xlab('usage')+\n",
    "    scale_x_continuous(breaks = round(seq(0,1,by = 0.05),1))+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20),legend.position=c(0.9,0.9))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.multipAs.usage.txt',header=TRUE)\n",
    "(properties.tab <- with(data,table(pas_type,predicted)))\n",
    "properties.tot <- cbind(properties.tab, \n",
    "                  Total = apply(properties.tab, 1, sum))\n",
    "(properties.tot <- rbind(properties.tot, \n",
    "                  Total = apply(properties.tot, 2, sum)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.predict.multipAs.usage.txt',header=TRUE)\n",
    "(properties.tab <- with(data,table(pas_type,predicted)))\n",
    "properties.tot <- cbind(properties.tab, \n",
    "                  Total = apply(properties.tab, 1, sum))\n",
    "(properties.tot <- rbind(properties.tot, \n",
    "                  Total = apply(properties.tot, 2, sum)))\n",
    "\n",
    "(properties.tot <- cbind(properties.tot, \n",
    "                  prop = apply(properties.tot, 2, sum)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.multipAs.usage.txt',header=TRUE)\n",
    "(properties.tab <- with(data,table(motif,predicted)))\n",
    "properties.tot <- cbind(properties.tab, \n",
    "                  Total = apply(properties.tab, 1, sum))\n",
    "(properties.tot <- rbind(properties.tot, \n",
    "                  Total = apply(properties.tot, 2, sum)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.predict.multipAs.usage.txt',header=TRUE)\n",
    "(properties.tab <- with(data,table(motif,predicted)))\n",
    "properties.tot <- cbind(properties.tab, \n",
    "                  Total = apply(properties.tab, 1, sum))\n",
    "(properties.tot <- rbind(properties.tot, \n",
    "                  Total = apply(properties.tot, 2, sum)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.multipAs.usage.txt',header=TRUE)\n",
    "data =  data[ which(data$motif==\"WithMotif\"), ]\n",
    "ggplot(data=data,aes(x=usage,fill=predicted))+\n",
    "    geom_density(alpha=0.25)+\n",
    "    theme_bw()+\n",
    "    xlab('usage')+\n",
    "    scale_x_continuous(breaks = round(seq(0,1,by = 0.05),1))+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20),legend.position=c(0.9,0.9))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.multipAs.usage.txt',header=TRUE)\n",
    "data =  data[ which(data$motif==\"NoMotif\"), ]\n",
    "ggplot(data=data,aes(x=usage,fill=predicted))+\n",
    "    geom_density(alpha=0.25)+\n",
    "    theme_bw()+\n",
    "    xlab('usage')+\n",
    "    scale_x_continuous(breaks = round(seq(0,1,by = 0.05),1))+\n",
    "    theme(axis.text = element_text(size=20),axis.title = element_text(size=30),\n",
    "          legend.title=element_text(size=20),legend.text=element_text(size=20),legend.position=c(0.9,0.9))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(dplyr)\n",
    "library(ggplot2)\n",
    "\n",
    "count.data <- data.frame(\n",
    "  pAs_type=c(\"LE\",\"UR\",\"ncRNA\",\"intergenic\"),\n",
    "  value=c(18953,2244,1087,1014)\n",
    ")\n",
    "\n",
    "# Add label position\n",
    "count.data <- count.data %>%\n",
    "  arrange(desc(pAs_type)) %>%\n",
    "  mutate(label = percent(value / sum(value)))\n",
    "\n",
    "count.data %>%\n",
    "mutate(prop =100*value / sum(value)) -> count.data \n",
    "\n",
    "count.data %>%\n",
    "mutate(lab.ypos = cumsum(prop) - 0.5*prop) -> count.data\n",
    "count.data\n",
    "\n",
    "\n",
    "ggplot(count.data, aes(x = \"\", y = prop, fill = pAs_type)) +\n",
    "  geom_bar(width = 1, stat = \"identity\", color = \"white\") +\n",
    "  coord_polar(\"y\", start = 0)+\n",
    "  geom_text_repel(aes(y = lab.ypos, label = label),,size=5, color = \"white\")+\n",
    "\n",
    "  theme_void()+\n",
    "theme(legend.title=element_text(size=20),legend.text=element_text(size=20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(dplyr)\n",
    "library(ggplot2)\n",
    "\n",
    "count.data <- data.frame(\n",
    "  pAs_type=c(\"LE\",\"UR\",\"ncRNA\",\"intergenic\"),\n",
    "  value=c(13145,1770,679,697)\n",
    ")\n",
    "\n",
    "# Add label position\n",
    "count.data <- count.data %>%\n",
    "  arrange(desc(pAs_type)) %>%\n",
    "  mutate(label = percent(value / sum(value)))\n",
    "\n",
    "count.data %>%\n",
    "mutate(prop =100*value / sum(value)) -> count.data \n",
    "\n",
    "count.data %>%\n",
    "mutate(lab.ypos = cumsum(prop) - 0.5*prop) -> count.data\n",
    "count.data\n",
    "\n",
    "\n",
    "ggplot(count.data, aes(x = \"\", y = prop, fill = pAs_type)) +\n",
    "  geom_bar(width = 1, stat = \"identity\", color = \"white\") +\n",
    "  coord_polar(\"y\", start = 0)+\n",
    "  geom_text_repel(aes(y = lab.ypos, label = label),,size=5, color = \"white\")+\n",
    "\n",
    "  theme_void()+\n",
    "theme(legend.title=element_text(size=20),legend.text=element_text(size=20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(dplyr)\n",
    "library(ggplot2)\n",
    "\n",
    "count.data <- data.frame(\n",
    "  pAs_type=c(\"LE\",\"UR\",\"ncRNA\",\"intergenic\"),\n",
    "  value=c(11582,944,472,467)\n",
    ")\n",
    "\n",
    "# Add label position\n",
    "count.data <- count.data %>%\n",
    "  arrange(desc(pAs_type)) %>%\n",
    "  mutate(label = percent(value / sum(value)))\n",
    "\n",
    "count.data %>%\n",
    "mutate(prop =100*value / sum(value)) -> count.data \n",
    "\n",
    "count.data %>%\n",
    "mutate(lab.ypos = cumsum(prop) - 0.5*prop) -> count.data\n",
    "count.data\n",
    "\n",
    "\n",
    "ggplot(count.data, aes(x = \"\", y = prop, fill = pAs_type)) +\n",
    "  geom_bar(width = 1, stat = \"identity\", color = \"white\") +\n",
    "  coord_polar(\"y\", start = 0)+\n",
    "  geom_text_repel(aes(y = lab.ypos, label = label),,size=5, color = \"white\")+\n",
    "\n",
    "  theme_void()+\n",
    "theme(legend.title=element_text(size=20),legend.text=element_text(size=20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(dplyr)\n",
    "library(ggplot2)\n",
    "\n",
    "count.data <- data.frame(\n",
    "  pAs_type=c(\"withMotif\",\"noMotif\"),\n",
    "  value=c(19339,3959)\n",
    ")\n",
    "\n",
    "# Add label position\n",
    "count.data <- count.data %>%\n",
    "  arrange(desc(pAs_type)) %>%\n",
    "  mutate(label = percent(value / sum(value)))\n",
    "\n",
    "count.data %>%\n",
    "mutate(prop =100*value / sum(value)) -> count.data \n",
    "\n",
    "count.data %>%\n",
    "mutate(lab.ypos = cumsum(prop) - 0.5*prop) -> count.data\n",
    "count.data\n",
    "\n",
    "\n",
    "ggplot(count.data, aes(x = \"\", y = prop, fill = pAs_type)) +\n",
    "  geom_bar(width = 1, stat = \"identity\", color = \"white\") +\n",
    "  coord_polar(\"y\", start = 0)+\n",
    "  geom_text_repel(aes(y = lab.ypos, label = label), size=5,color = \"white\")+\n",
    "\n",
    "  theme_void()+\n",
    "theme(legend.title=element_text(size=20),legend.text=element_text(size=20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.table('../Split_BL6_PolyARead/usage_data/BL6_REP1.pAs.predict.multipAs.usage.txt',header=TRUE)\n",
    "(properties.tab <- with(data,table(motif,predicted)))\n",
    "properties.tot <- cbind(properties.tab, \n",
    "                  Total = apply(properties.tab, 1, sum))\n",
    "(properties.tot <- rbind(properties.tot, \n",
    "                  Total = apply(properties.tot, 2, sum)))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1160/1568"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "12305/14273"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
