{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import gc\n",
    "import time\n",
    "import datetime\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "#os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\"\n",
    "\n",
    "epochs = 10\n",
    "batch_size = 4\n",
    "learning_rate = 0.01\n",
    "workers = 4 # The number of parallel processes used to read data\n",
    "gpu_id = [0,1,2,3] # only modify if you machine has more than one GPU card"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.cuda.device_count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Dataset [10 points]\n",
    "We are going to use the [PASCAL VOC dataset](https://drive.google.com/drive/folders/1G54WDNnOQecr5T0sEvZcuyme0WT5Qje3?usp=sharing), which is a commonly used benchmark. In order to reduce the\n",
    "computational requirements, you should downsample the dataset to 256x256, similar to the previous project."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Part 2\n",
    "\n",
    "## Semantic Segmentation\n",
    "\n",
    "In this part of the project, you will reuse the model you created in the previous part to perform Semantic Segmentation - instead of assigning a real number to each\n",
    "pixel , you will assign it a class.\n",
    "\n",
    "The tasks are as following:\n",
    "- Write a Dataset class that processes the segmentation data. **[10 points]**\n",
    "    - Modify the UNet model that takes an RGB image and now outputs a single channel _label map_\n",
    "    - Define an approprate loss function. **[5 points]**\n",
    "- Tune the model to achieve an mIOU of **0.45** or higher on the given validation set. **[20 points]**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Now you have to implement the Dataset. Look at the file `loaders.py`.\n",
    "\n",
    "The class you will need to emulate is `class ImageDepthDataset(Dataset)`. The class is called `VOCSeg`, and it must _inherit_ from the `Dataset` class,\n",
    "just like the `ImageDepthDataset`.\n",
    "You need to fill in the `__len__` and the `__getitem__` methods.\n",
    "The `__getitem__` method should yield a dict of the RGB image and the labeled segmentation map.\n",
    "\n",
    "Make sure you downsample the image and the labels to 256x256, otherwise the training will take too much time.\n",
    "\n",
    "Make sure that the labels are in the range `0..N-1`, where\n",
    "N is the number of classes - 21 in our case. You can have one special label for unknown regions.\n",
    "\n",
    "We provide the map of RGB to label for convenience in `get_pascal_labels()`. The map should be read as this - if a pixel has color `[0, 0, 0]`, it has label 0. If the color is\n",
    "`[128, 0, 0]`, the label is 1\n",
    "\n",
    "It is also very common to change the RGB range from 0-255 to 0-1 or -1 to 1. Take a look at [torchvision.transforms.ToTensor](https://pytorch.org/docs/stable/torchvision/transforms.html#torchvision.transforms.ToTensor)\n",
    "and [torchvision.transforms.Normalize](https://pytorch.org/docs/stable/torchvision/transforms.html#torchvision.transforms.Normalize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The PASCAL VOC dataset has predefined train/val sets. Make sure your class implementation can take this _split_ as an argument. Now create train/val loaders using the `get_seg_loaders` function (look at `prep_loaders`), and we should be good to go."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "I transfer the loader to here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "%pylab inline\n",
    "import torchvision\n",
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import glob\n",
    "import torch\n",
    "import numpy as np\n",
    "from skimage import io, transform\n",
    "from torchvision import transforms\n",
    "from torchvision.utils import make_grid\n",
    "from torch.utils.data import Dataset, DataLoader, random_split\n",
    "\n",
    "np.random.seed(0) \n",
    "torch.manual_seed(0)\n",
    "VALIDATION_SPLIT = 0.02\n",
    "\n",
    "class DepthHalfSize(object):\n",
    "    def __call__(self, sample):\n",
    "        x = sample['depth']\n",
    "        sample['depth'] = transform.resize(x, (x.shape[0]//2, x.shape[1]//2))\n",
    "        return sample\n",
    "\n",
    "class ToTensor(object):\n",
    "    def __call__(self, sample):\n",
    "        image, depth = sample['image'], sample['depth']\n",
    "        # swap channel axis\n",
    "        image = image.transpose((2, 0, 1))\n",
    "        depth = depth.transpose((2, 0, 1))\n",
    "        return {'image': torch.from_numpy(image), 'depth': torch.from_numpy(depth)}\n",
    "    \n",
    "class DepthToNormal(object):\n",
    "    def __call__(self, sample):\n",
    "        dx, dy = np.gradient(sample['depth'].squeeze())\n",
    "        dx, dy, dz = dx * 2500, dy * 2500, np.ones_like(dy)\n",
    "        n = np.linalg.norm(np.stack((dy, dx, dz), axis=-1), axis=-1)\n",
    "        d = np.stack((dy/n, dx/n, dz/n), axis=-1)\n",
    "        return {'image': sample['image'], 'depth': (d + 1) * 0.5} \n",
    "        \n",
    "class ImageDepthDataset(Dataset):\n",
    "    def __init__(self, root_dir, transform=None):\n",
    "        self.transform = transform \n",
    "        self.image_files = glob.glob(root_dir + '/*.jpg')\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.image_files)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        image = io.imread(self.image_files[idx]) / 255.0\n",
    "        depth = io.imread(self.image_files[idx].replace('.jpg', '.png'))[:,:,:1] / 255.0        \n",
    "        sample = {'image': image, 'depth': depth}        \n",
    "        return self.transform(sample) if self.transform else sample\n",
    "    \n",
    "def prep_loaders(root_dir=None, batch_size=1, workers=1):\n",
    "    # Load dataset\n",
    "    image_depth_dataset = ImageDepthDataset(root_dir=root_dir, transform=transforms.Compose([DepthHalfSize(), ToTensor()]))\n",
    "\n",
    "    # Split into training and validation sets\n",
    "    train_size = int((1-VALIDATION_SPLIT) * len(image_depth_dataset))\n",
    "    test_size = len(image_depth_dataset) - train_size\n",
    "    train_dataset, test_dataset = torch.utils.data.random_split(image_depth_dataset, [train_size, test_size])\n",
    "\n",
    "    # Prepare data loaders\n",
    "    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=workers)\n",
    "    valid_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=workers)\n",
    "    print('Dataset size (num. batches)', len(train_loader), len(valid_loader))\n",
    "    \n",
    "    return train_loader, valid_loader\n",
    "\n",
    "##############################################################\n",
    "################# Segmentation Section #######################\n",
    "##############################################################\n",
    "\n",
    "class SegIdentityTransform(object):\n",
    "    # Hint: Note that our transforms work on dicts. This is an example of a transform that works\n",
    "    # on a dict whose elements can be converted to np.arrays, and are then converted to torch.tensors\n",
    "    # This performs the scaling of the RGB by division by 255, and puts channels first by performing the permute\n",
    "    # for the label, we convert to long, datatype to let torch know that this is a discrete label.\n",
    "    # You might want to change this or write different transforms depending on how you read data.\n",
    "    def __call__(self, sample):\n",
    "        x = sample['image']\n",
    "        sample['image'] = transform.resize(x, (256,256),preserve_range=True)\n",
    "        y= sample['label']\n",
    "        sample['label'] = transform.resize(y, (256,256),preserve_range=True)\n",
    "        \n",
    "        tf = transforms.Compose([transforms.ToTensor(),\n",
    "                transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),])\n",
    "        \n",
    "        \n",
    "        #sample['image'] = sample['image']/255.0\n",
    "        sample['image'] = tf(sample['image'])\n",
    "        \n",
    "        \n",
    "        #return {'image': torch.tensor(np.array(sample['image']/255.0)).permute(2,0,1),\n",
    "        return {'image': torch.tensor(np.array(sample['image']/255.0)),\n",
    "                'label': torch.tensor(np.array(sample['label'])).long()}\n",
    "        #return sample\n",
    "\n",
    "def get_pascal_labels():\n",
    "    \"\"\"Load the mapping that associates pascal classes with label colors\n",
    "    Returns:\n",
    "        np.ndarray with dimensions (21, 3)\n",
    "    \"\"\"\n",
    "    return np.asarray([[0, 0, 0],\n",
    "                       [128, 0, 0],\n",
    "                       [0, 128, 0],\n",
    "                       [128, 128, 0],\n",
    "                       [0, 0, 128],\n",
    "                       [128, 0, 128],\n",
    "                       [0, 128, 128],\n",
    "                       [128, 128, 128],\n",
    "                       [64, 0, 0],\n",
    "                       [192, 0, 0],\n",
    "                       [64, 128, 0],\n",
    "                       [192, 128, 0],\n",
    "                       [64, 0, 128],\n",
    "                       [192, 0, 128],\n",
    "                       [64, 128, 128],\n",
    "                       [192, 128, 128],\n",
    "                       [0, 64, 0],\n",
    "                       [128, 64, 0],\n",
    "                       [0, 192, 0],\n",
    "                       [128, 192, 0],\n",
    "                       [0, 64, 128]])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def encode_segmap(mask):\n",
    "    \"\"\"Encode segmentation label images as pascal classes\n",
    "    Args:\n",
    "        mask (np.ndarray): raw segmentation label image of dimension\n",
    "          (M, N, 3), in which the Pascal classes are encoded as colours.\n",
    "    Returns:\n",
    "        (np.ndarray): class map with dimensions (M,N), where the value at\n",
    "        a given location is the integer denoting the class index.\n",
    "    \"\"\"\n",
    "\n",
    "    # TODO (hint: You might not need a lot of work here with some libraries, which already read in the image as a single channel label)\n",
    "    # (hint: the said library does not return a np.ndarray object)\n",
    "    label_mask = np.zeros((mask.shape[0], mask.shape[1]), dtype=np.int16)\n",
    "    if isinstance(mask, np.ndarray):\n",
    "        # TODO\n",
    "        mask = mask.astype(int)\n",
    "        for i, label in enumerate(get_pascal_labels()):\n",
    "            #print(mask.shape)\n",
    "            #print(i)\n",
    "            #print(np.where(np.all(mask == label, axis=-1)))\n",
    "            label_mask[np.where(np.all(mask == label, axis=-1))[:2]] = i\n",
    "        label_mask = label_mask.astype(int)\n",
    "    else:\n",
    "        # TODO if the image is just single channel\n",
    "        #  you might want to convert the single channel label to a np.ndarray\n",
    "        pass\n",
    "    return label_mask\n",
    "\n",
    "def decode_segmap(label_mask, unk_label=255):\n",
    "    \"\"\"Decode segmentation label prediction as RGB images\n",
    "    Args:\n",
    "        mask (torch.tensor): class map with dimensions (B, M,N), where the value at\n",
    "        a given location is the integer denoting the class index.\n",
    "    Returns:\n",
    "        (np.ndarray): colored image of shape (BM, BN, 3)\n",
    "    \"\"\"\n",
    "    #mask[mask == unk_label] == 0\n",
    "    #mask = mask.numpy()\n",
    "    #cmap = get_pascal_labels()\n",
    "    #cmap_exp = cmap[..., None]\n",
    "    #colored = cmap[mask].squeeze()\n",
    "    #grid = make_grid(torch.tensor(colored).permute(0, 3, 1, 2))\n",
    "    #return np.permute(grid, (1, 2, 0))\n",
    "\n",
    "    label_colours = get_pascal_labels()\n",
    "    r = label_mask.copy()\n",
    "    g = label_mask.copy()\n",
    "    b = label_mask.copy()\n",
    "    for ll in range(0, 21):\n",
    "        r[label_mask == ll] = label_colours[ll, 0]\n",
    "        g[label_mask == ll] = label_colours[ll, 1]\n",
    "        b[label_mask == ll] = label_colours[ll, 2]\n",
    "    rgb = np.zeros((label_mask.shape[0], label_mask.shape[1], 3))\n",
    "    print(rgb.shape)\n",
    "    print(r.shape)\n",
    "    rgb[:, :, 0] = r / 255.0\n",
    "    rgb[:, :, 1] = g / 255.0\n",
    "    rgb[:, :, 2] = b / 255.0\n",
    "    plt.imshow(rgb)\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "\n",
    "class VOCSeg(Dataset):\n",
    "    def __init__(self, root_dir, split=None, transform=None):\n",
    "        # Known information\n",
    "        self.num_classes = 21\n",
    "        self.class_names = ['Background',\n",
    "                            'Aeroplane',\n",
    "                            'Bicycle',\n",
    "                            'Bird',\n",
    "                            'Boat',\n",
    "                            'Bottle',\n",
    "                            'Bus',\n",
    "                            'Car',\n",
    "                            'Cat',\n",
    "                            'Chair',\n",
    "                            'Cow',\n",
    "                            'Diningtable',\n",
    "                            'Dog',\n",
    "                            'Horse',\n",
    "                            'Motorbike',\n",
    "                            'Person',\n",
    "                            'Pottedplant',\n",
    "                            'Sheep',\n",
    "                            'Sofa',\n",
    "                            'Train',\n",
    "                            'Tvmonitor']\n",
    "\n",
    "        # Set up proper paths\n",
    "        self.root_dir = root_dir\n",
    "        self.image_dir = os.path.join(self.root_dir, 'JPEGImages')\n",
    "        self.label_dir = os.path.join(self.root_dir, 'SegmentationClass')\n",
    "        \n",
    "        self.transform = transform \n",
    "\n",
    "        #TODO Read the appropriate split file and save the file names\n",
    "        self.split = split\n",
    "        self.split_file_dir = os.path.join(self.root_dir, 'ImageSets', 'Segmentation')\n",
    "\n",
    "        # TODO read in ONLY files from self.split_file\n",
    "        #self.image_files = None\n",
    "        #self.label_files = None\n",
    "        with open(os.path.join(os.path.join(self.split_file_dir, self.split + '.txt')), \"r\") as f:\n",
    "            lines = f.read().splitlines()\n",
    "            self.image_files = [os.path.join(self.root_dir, \"JPEGImages\", name + \".jpg\") for name in lines]\n",
    "            self.label_files = [os.path.join(self.root_dir, \"SegmentationClass\", name + \".png\") for name in lines]\n",
    "            print(len(self.image_files))\n",
    "            \n",
    "        \n",
    "\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.image_files)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "\n",
    "        # TODO Retrieve the saved file names and perform the proper processing\n",
    "        # The images go from 0-255 to 0-1. You can also use the range -1 to 1\n",
    "        # The labels go from a 3 channel RGB to a single channel with elements in the range 0..N-1\n",
    "        #image = None\n",
    "        image = io.imread(self.image_files[idx])\n",
    "        #label_rgb = None\n",
    "        label_rgb = io.imread(self.label_files[idx])\n",
    "        label = label_rgb[:,:,:3]\n",
    "        label = encode_segmap(label) # write the encode_segmap function\n",
    "        sample = {'image': image, 'label': label}\n",
    "        \n",
    "        return self.transform(sample)\n",
    "\n",
    "\n",
    "def get_seg_loaders(root_dir=None, batch_size=1, workers=1):\n",
    "\n",
    "    #TODO optionally add more augmentation\n",
    "    ####Please see function SegIdentityTransform \n",
    "    \n",
    "    tfms = transforms.Compose([\n",
    "        #transforms.Resize(256),\n",
    "        #transforms.Normalize(mean = [0.485, 0.456, 0.406],std = [0.229, 0.224, 0.225]),\n",
    "        SegIdentityTransform()\n",
    "    ])\n",
    "\n",
    "    train_set = VOCSeg(root_dir=root_dir, split='train', transform=tfms)\n",
    "    val_set = VOCSeg(root_dir=root_dir, split='val', transform=tfms) # No transforms on the validation set\n",
    "\n",
    "    # Prepare data_loaders\n",
    "    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=workers)\n",
    "    valid_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, num_workers=workers)\n",
    "\n",
    "    return train_loader, valid_loader\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1464\n",
      "1449\n"
     ]
    }
   ],
   "source": [
    "# Sanity check\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    #from loaders import get_seg_loaders\n",
    "    train_loader, valid_loader = get_seg_loaders(root_dir='./VOC2012',batch_size=batch_size,workers=workers)\n",
    "\n",
    "    # we have read all files\n",
    "    assert len(train_loader.dataset) == 1464\n",
    "    assert len(valid_loader.dataset) == 1449\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(15)\n",
      "tensor(4.4563, dtype=torch.float64)\n",
      "torch.Size([4, 256, 256])\n",
      "torch.Size([4, 3, 256, 256])\n",
      "tensor([[[[ 7.1700e-01,  7.0006e-01,  6.8878e-01,  ...,  7.2654e-01,\n",
      "            7.3033e-01,  7.3892e-01],\n",
      "          [ 7.7284e-01,  7.4458e-01,  7.1769e-01,  ...,  7.2607e-01,\n",
      "            7.3783e-01,  7.4518e-01],\n",
      "          [ 7.9378e-01,  7.7943e-01,  7.6508e-01,  ...,  7.2806e-01,\n",
      "            7.2806e-01,  7.2806e-01],\n",
      "          ...,\n",
      "          [ 2.5944e-02,  2.5944e-02,  2.5944e-02,  ...,  2.5944e-02,\n",
      "            2.5944e-02,  4.3069e-02],\n",
      "          [ 2.5944e-02,  2.5944e-02,  2.5944e-02,  ...,  4.3069e-02,\n",
      "            4.3069e-02,  6.0194e-02],\n",
      "          [ 2.5944e-02,  2.5944e-02,  2.5944e-02,  ...,  4.3069e-02,\n",
      "            4.3069e-02,  6.0194e-02]],\n",
      "\n",
      "         [[ 8.2401e-01,  7.8982e-01,  7.7576e-01,  ...,  7.4638e-01,\n",
      "            7.3138e-01,  7.3841e-01],\n",
      "          [ 8.1180e-01,  7.7761e-01,  7.4544e-01,  ...,  7.5905e-01,\n",
      "            7.4482e-01,  7.4482e-01],\n",
      "          [ 7.6433e-01,  7.5035e-01,  7.2731e-01,  ...,  7.7983e-01,\n",
      "            7.2569e-01,  7.0980e-01],\n",
      "          ...,\n",
      "          [ 2.7031e-02,  2.7031e-02,  2.7031e-02,  ...,  9.5238e-03,\n",
      "            9.5238e-03,  9.5238e-03],\n",
      "          [ 2.7031e-02,  2.7031e-02,  2.7031e-02,  ...,  2.7031e-02,\n",
      "            2.7031e-02,  2.7031e-02],\n",
      "          [ 2.7031e-02,  2.7031e-02,  2.7031e-02,  ...,  2.7031e-02,\n",
      "            2.7031e-02,  2.7031e-02]],\n",
      "\n",
      "         [[ 8.2445e-01,  8.7013e-01,  8.4699e-01,  ...,  9.4998e-01,\n",
      "            8.2830e-01,  8.3530e-01],\n",
      "          [ 8.3783e-01,  8.5223e-01,  8.2146e-01,  ...,  9.3736e-01,\n",
      "            9.1827e-01,  9.1827e-01],\n",
      "          [ 8.4130e-01,  8.2549e-01,  8.1035e-01,  ...,  9.1102e-01,\n",
      "            9.3693e-01,  9.3693e-01],\n",
      "          ...,\n",
      "          [ 2.7782e-02,  2.7782e-02,  2.7782e-02,  ...,  2.7782e-02,\n",
      "            4.5211e-02,  3.6088e-02],\n",
      "          [ 2.7782e-02,  2.7782e-02,  2.7782e-02,  ...,  4.5211e-02,\n",
      "            6.2641e-02,  5.3517e-02],\n",
      "          [ 2.7782e-02,  2.7782e-02,  2.7782e-02,  ...,  4.5211e-02,\n",
      "            6.2641e-02,  5.3517e-02]]],\n",
      "\n",
      "\n",
      "        [[[ 1.6140e-01,  9.0496e-02,  9.4443e-02,  ...,  4.2557e-01,\n",
      "            5.4384e-01,  6.3330e-01],\n",
      "          [ 1.0651e-01,  5.3638e-02,  5.8923e-02,  ...,  1.1759e+00,\n",
      "            1.3222e+00,  8.3000e-01],\n",
      "          [ 9.7414e-02,  7.5830e-02,  6.2802e-02,  ...,  1.3405e+00,\n",
      "            1.3956e+00,  8.7041e-01],\n",
      "          ...,\n",
      "          [ 2.8157e-01,  2.7044e-01,  3.1151e-01,  ...,  9.3706e-01,\n",
      "            1.4360e+00,  2.0250e+00],\n",
      "          [ 2.9374e-01,  2.8810e-01,  3.0725e-01,  ...,  1.4851e+00,\n",
      "            1.4577e+00,  1.4889e+00],\n",
      "          [ 2.9994e-01,  2.9994e-01,  2.9994e-01,  ...,  1.3915e+00,\n",
      "            1.4388e+00,  1.5213e+00]],\n",
      "\n",
      "         [[ 1.8302e-01,  1.1053e-01,  1.1457e-01,  ...,  4.7543e-01,\n",
      "            5.7939e-01,  6.4464e-01],\n",
      "          [ 1.2056e-01,  7.2850e-02,  7.8252e-02,  ...,  1.1810e+00,\n",
      "            1.2863e+00,  7.3059e-01],\n",
      "          [ 1.0010e-01,  7.8031e-02,  8.2219e-02,  ...,  1.3580e+00,\n",
      "            1.3658e+00,  7.6617e-01],\n",
      "          ...,\n",
      "          [ 2.5335e-01,  2.4197e-01,  2.8395e-01,  ...,  9.0966e-01,\n",
      "            1.5899e+00,  2.1532e+00],\n",
      "          [ 2.6579e-01,  2.6002e-01,  2.7960e-01,  ...,  1.6447e+00,\n",
      "            1.5795e+00,  1.5092e+00],\n",
      "          [ 2.7213e-01,  2.7213e-01,  2.7213e-01,  ...,  1.5155e+00,\n",
      "            1.5097e+00,  1.5280e+00]],\n",
      "\n",
      "         [[ 8.8913e-02,  1.0353e-02,  1.7025e-02,  ...,  4.8261e-01,\n",
      "            5.4821e-01,  5.9738e-01],\n",
      "          [ 5.8419e-02, -1.6977e-03,  3.6126e-04,  ...,  1.0822e+00,\n",
      "            1.1877e+00,  6.7593e-01],\n",
      "          [ 6.5664e-02,  4.3697e-02,  2.3765e-02,  ...,  1.1526e+00,\n",
      "            1.2396e+00,  7.1147e-01],\n",
      "          ...,\n",
      "          [ 3.0538e-01,  2.9405e-01,  3.3585e-01,  ...,  1.3117e+00,\n",
      "            2.3975e+00,  3.0126e+00],\n",
      "          [ 3.1777e-01,  3.1203e-01,  3.3152e-01,  ...,  2.6272e+00,\n",
      "            2.8865e+00,  2.9470e+00],\n",
      "          [ 3.2408e-01,  3.2408e-01,  3.2408e-01,  ...,  3.0423e+00,\n",
      "            2.9385e+00,  2.9171e+00]]],\n",
      "\n",
      "\n",
      "        [[[ 6.5823e-04,  2.1466e-02,  4.8734e-02,  ...,  9.0041e-01,\n",
      "            8.2668e-01,  8.1551e-01],\n",
      "          [ 7.5441e-03,  2.4418e-02,  2.5944e-02,  ...,  1.0295e+00,\n",
      "            9.4498e-01,  8.9301e-01],\n",
      "          [ 3.3227e-02,  3.2901e-02,  2.2332e-02,  ...,  1.0703e+00,\n",
      "            1.0178e+00,  8.8924e-01],\n",
      "          ...,\n",
      "          [ 9.5221e-01,  8.9566e-01,  8.4567e-01,  ...,  1.3290e+00,\n",
      "            1.0990e+00,  8.3948e-01],\n",
      "          [ 9.4673e-01,  9.1097e-01,  8.3946e-01,  ...,  1.6707e+00,\n",
      "            1.2629e+00,  8.7688e-01],\n",
      "          [ 9.4299e-01,  9.0843e-01,  8.0487e-01,  ...,  1.3212e+00,\n",
      "            9.6714e-01,  8.2736e-01]],\n",
      "\n",
      "         [[ 3.8209e-01,  5.2804e-01,  6.6379e-01,  ...,  1.3644e+00,\n",
      "            1.3464e+00,  1.3425e+00],\n",
      "          [ 4.3126e-01,  5.4666e-01,  6.1525e-01,  ...,  1.4057e+00,\n",
      "            1.4088e+00,  1.3709e+00],\n",
      "          [ 5.5651e-01,  5.9573e-01,  6.3008e-01,  ...,  1.4381e+00,\n",
      "            1.4685e+00,  1.3918e+00],\n",
      "          ...,\n",
      "          [ 1.9866e+00,  2.0486e+00,  2.0520e+00,  ...,  2.1799e+00,\n",
      "            1.9872e+00,  1.7172e+00],\n",
      "          [ 1.9248e+00,  1.9813e+00,  1.9720e+00,  ...,  2.6683e+00,\n",
      "            2.4093e+00,  1.8961e+00],\n",
      "          [ 1.9358e+00,  1.9417e+00,  1.8902e+00,  ...,  2.4312e+00,\n",
      "            2.1461e+00,  1.8585e+00]],\n",
      "\n",
      "         [[ 4.6028e-02,  1.1834e-01,  1.5838e-01,  ...,  8.5196e-01,\n",
      "            8.1872e-01,  7.9217e-01],\n",
      "          [ 6.0045e-02,  7.6091e-02,  7.6440e-02,  ...,  9.2593e-01,\n",
      "            8.8799e-01,  8.2196e-01],\n",
      "          [ 1.2697e-01,  6.5274e-02,  3.4454e-02,  ...,  9.8923e-01,\n",
      "            1.0358e+00,  9.1014e-01],\n",
      "          ...,\n",
      "          [ 1.2798e+00,  1.3162e+00,  1.1951e+00,  ...,  1.8628e+00,\n",
      "            1.3061e+00,  8.0737e-01],\n",
      "          [ 1.2277e+00,  1.2561e+00,  1.1569e+00,  ...,  2.3607e+00,\n",
      "            1.8235e+00,  1.1045e+00],\n",
      "          [ 1.2434e+00,  1.2489e+00,  1.1112e+00,  ...,  2.0153e+00,\n",
      "            1.5353e+00,  1.0985e+00]]],\n",
      "\n",
      "\n",
      "        [[[ 6.8288e-01,  1.4124e+00,  2.2794e+00,  ...,  2.6788e-01,\n",
      "            3.7350e-01,  2.2144e-01],\n",
      "          [ 7.2343e-01,  1.3000e+00,  2.2194e+00,  ...,  2.3663e-01,\n",
      "            1.5123e-01,  1.3041e-01],\n",
      "          [ 7.0217e-01,  1.0901e+00,  6.8863e-01,  ...,  7.8450e-01,\n",
      "            4.0957e-01,  2.4866e-01],\n",
      "          ...,\n",
      "          [ 6.4590e-01,  1.2978e+00,  1.4678e+00,  ...,  5.2256e-01,\n",
      "            5.1181e-01,  5.4524e-01],\n",
      "          [ 7.0982e-01,  6.7839e-01,  1.0997e+00,  ...,  5.4507e-01,\n",
      "            5.3456e-01,  5.5112e-01],\n",
      "          [ 1.2577e+00,  8.4956e-01,  7.2037e-01,  ...,  5.3005e-01,\n",
      "            5.1905e-01,  5.3740e-01]],\n",
      "\n",
      "         [[ 9.6210e-01,  1.5579e+00,  2.5024e+00,  ...,  6.0641e-01,\n",
      "            6.1954e-01,  3.4668e-01],\n",
      "          [ 7.5050e-01,  1.3564e+00,  2.5072e+00,  ...,  7.9701e-01,\n",
      "            4.6823e-01,  2.8326e-01],\n",
      "          [ 9.2270e-01,  1.1840e+00,  8.7958e-01,  ...,  1.2658e+00,\n",
      "            6.6779e-01,  3.6789e-01],\n",
      "          ...,\n",
      "          [ 9.0675e-01,  1.5160e+00,  1.6479e+00,  ...,  7.0980e-01,\n",
      "            6.9882e-01,  7.3299e-01],\n",
      "          [ 9.4676e-01,  8.1381e-01,  1.2048e+00,  ...,  7.3282e-01,\n",
      "            7.2207e-01,  7.3900e-01],\n",
      "          [ 1.5349e+00,  1.0420e+00,  8.8853e-01,  ...,  7.0402e-01,\n",
      "            6.7933e-01,  7.0513e-01]],\n",
      "\n",
      "         [[ 8.6664e-01,  1.6335e+00,  2.5342e+00,  ...,  1.3847e-01,\n",
      "            2.7063e-01,  1.9593e-01],\n",
      "          [ 8.2162e-01,  1.4182e+00,  2.4592e+00,  ...,  5.0692e-02,\n",
      "            3.6592e-02,  1.0759e-01],\n",
      "          [ 9.5298e-01,  1.2226e+00,  9.4163e-01,  ...,  3.0561e-01,\n",
      "            1.4272e-01,  1.2079e-01],\n",
      "          ...,\n",
      "          [ 1.2014e+00,  1.7791e+00,  1.8462e+00,  ...,  9.0591e-01,\n",
      "            8.7249e-01,  9.0489e-01],\n",
      "          [ 1.1544e+00,  1.0792e+00,  1.5045e+00,  ...,  9.0472e-01,\n",
      "            8.9402e-01,  9.1088e-01],\n",
      "          [ 1.6448e+00,  1.2587e+00,  1.1965e+00,  ...,  8.8431e-01,\n",
      "            8.6486e-01,  8.7654e-01]]]], dtype=torch.float64)\n",
      "tensor([[[ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         ...,\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0]],\n",
      "\n",
      "        [[ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         ...,\n",
      "         [ 0,  0,  0,  ..., 11, 11, 11],\n",
      "         [ 0,  0,  0,  ..., 11, 11, 11],\n",
      "         [ 0,  0,  0,  ..., 11, 11, 11]],\n",
      "\n",
      "        [[ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         ...,\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0]],\n",
      "\n",
      "        [[ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         ...,\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0],\n",
      "         [ 0,  0,  0,  ...,  0,  0,  0]]])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample = iter(train_loader).next()\n",
    "figure(figsize=(9,9)); imshow(torchvision.utils.make_grid(sample['image'], padding=0).permute((1, 2, 0)))\n",
    "#figure(figsize=(9,9)); imshow(torchvision.utils.make_grid(sample['label'], padding=0).permute((1, 2, 0)))\n",
    "label = sample['label']\n",
    "image = sample['image']\n",
    "print(label.max())\n",
    "print(image.max())\n",
    "print(label.shape)\n",
    "print(image.shape)\n",
    "print(image)\n",
    "print(label)\n",
    "    \n",
    "    #print(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "You should implement a few more sanity checks - the range of data in the RGB part, the range of data in the label part, whether the dataset returns tensors,\n",
    "whether the labels have the datatype `torch.long` etc."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Modifying the Loss and Architecture [5 points]\n",
    "You will have to some form of surgery on the network you constructed in Part 1.\n",
    "\n",
    "1. The number of channels the last layer predicts must change to the number of classes in the dataset.\n",
    "2. The loss function must change to reflect the fact that we are now performing per-pixel classification. (What loss did you use for classification in Project 1?)\n",
    "3. You might get a CUDA assert error. This means that you have a label higher than the number of channels in the _logits_. This is very common with semantic segmentation, where you might want to label some region unkown as it's label might be under doubt - for example near the edges of objects. Look up how to ignore a certain label with a classification loss.\n",
    "4. Take care of input label and logit sizes. We want predictions to be 256x256 as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from math import exp\n",
    "import torch.nn.functional as F\n",
    "from torch.autograd import Variable\n",
    "####Dice Loss\n",
    "def loss_fn(y_pred, y):\n",
    "    \n",
    "    #y_pred = Variable(y_pred, requires_grad=True)\n",
    "    #y_pred.requires_grad = True\n",
    "    #print(y_pred.shape)\n",
    "    y_pred = torch.sigmoid(y_pred)\n",
    "    y_pred = torch.argmax(y_pred, dim=1)\n",
    "    #y_pred = y_pred.argmax(1)\n",
    "    #print(y_pred.shape)\n",
    "    #bce = F.binary_cross_entropy_with_logits(y_pred, y)\n",
    "    \n",
    "    #pred = y_pred.view(-1)\n",
    "    #y = y.view(-1)\n",
    "    #y = torch.as_tensor(y)\n",
    "    #y_pred = torch.as_tensor(y_pred)\n",
    "    y = F.one_hot(y.long(), num_classes = 21).contiguous().float()\n",
    "    y_pred   = F.one_hot(y_pred, num_classes = 21).contiguous().float()\n",
    "    \n",
    "    #y = Variable(y.float(), requires_grad=True)\n",
    "    #pred = Variable(pred.float(), requires_grad=True)\n",
    "    #y.requires_grad = True\n",
    "    #y_pred.requires_grad = True\n",
    "    \n",
    "    y_pred = y_pred.view(-1)\n",
    "    y = y.view(-1)\n",
    "    #y_pred = y_pred.squeeze(1)\n",
    "    #y = y.squeeze(1)\n",
    "    \n",
    "    \n",
    "    smooth = 1.\n",
    "    intersection = (y_pred * y).sum()\n",
    "    loss =  1 - ((2. * intersection + smooth)/(y_pred.sum() + y.sum() + smooth))\n",
    "    #print(loss)\n",
    "    #return bce_loss(y_pred,y)\n",
    "    #return bce\n",
    "    return loss\n",
    "\n",
    "\n",
    "### Cross Entropy\n",
    "def loss_fn(y_pred, y):\n",
    "    #y_pred.requires_grad = True\n",
    "    y_pred = torch.sigmoid(y_pred)\n",
    "    loss = nn.CrossEntropyLoss(ignore_index=0)(y_pred, y.long())\n",
    "    return loss\n",
    "\n",
    "\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Up(nn.Module):\n",
    "\n",
    "    def __init__(self, in_channels, out_channels, down):\n",
    "        super().__init__()\n",
    "\n",
    "        self.up = nn.ConvTranspose2d(in_channels , in_channels // 2, kernel_size=2, stride=2)\n",
    "        if(down==1):\n",
    "            self.conv = Down(in_channels, out_channels,pooling=False)\n",
    "        else:\n",
    "            self.conv = Down2(in_channels, out_channels,pooling=False)\n",
    "\n",
    "    def forward(self, x1, x2):\n",
    "        x1 = self.up(x1)\n",
    "        diffY = x2.shape[2] - x1.shape[2]\n",
    "        diffX = x2.shape[3] - x1.shape[3]\n",
    "\n",
    "        x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,\n",
    "                        diffY // 2, diffY - diffY // 2]) \n",
    "\n",
    "        x = torch.cat([x2, x1], dim=1)\n",
    "        return self.conv(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Down(nn.Module):\n",
    "    def __init__(self, in_channels, out_channels,pooling=True):\n",
    "        super().__init__()\n",
    "        self.pooling = pooling\n",
    "        self.maxpool = nn.MaxPool2d(2)\n",
    "        self.double_conv = nn.Sequential(\n",
    "            nn.Conv2d(in_channels, out_channels,kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(out_channels),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Conv2d(out_channels, out_channels,kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(out_channels),\n",
    "            nn.ReLU(inplace=True)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        if(self.pooling):\n",
    "            return self.maxpool(self.double_conv(x))\n",
    "        else:\n",
    "            return self.double_conv(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Down2(nn.Module):\n",
    "    def __init__(self, in_channels, out_channels,pooling=True):\n",
    "        super().__init__()\n",
    "        self.pooling = pooling\n",
    "        self.maxpool = nn.MaxPool2d(2)\n",
    "        self.double_conv = nn.Sequential(\n",
    "            nn.Conv2d(in_channels, out_channels,kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(out_channels),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Conv2d(out_channels, out_channels,kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(out_channels),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Conv2d(out_channels, out_channels,kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(out_channels),\n",
    "            nn.ReLU(inplace=True)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        if(self.pooling):\n",
    "            return self.maxpool(self.double_conv(x))\n",
    "        else:\n",
    "            return self.double_conv(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Model(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Model, self).__init__()\n",
    "        self.down1 = Down(3,64,pooling=False)\n",
    "        self.down2 = Down(64,128,pooling=True)\n",
    "        self.down3 = Down2(128,256,pooling=True)\n",
    "        self.down4 = Down2(256,512,pooling=True)\n",
    "        self.down5 = Down2(512,1024,pooling=True)\n",
    "\n",
    "        self.up1 = Up(1024,512,down=2)\n",
    "        self.up2 = Up(512, 256,down=2)\n",
    "        self.up3 = Up(256, 128,down=2)\n",
    "        self.up4 = Up(128, 64,down=1)\n",
    "        #self.maxpool = nn.MaxPool2d(2)\n",
    "        self.conv = nn.Conv2d(64, 21, kernel_size=1)\n",
    "\n",
    "\n",
    "    def forward(self, x):\n",
    "\n",
    "        x1 = self.down1(x)\n",
    "        x2 = self.down2(x1)\n",
    "        x3 = self.down3(x2)\n",
    "        x4 = self.down4(x3)\n",
    "        x5 = self.down5(x4)\n",
    "        x = self.up1(x5,x4)\n",
    "        x = self.up2(x, x3)\n",
    "        x = self.up3(x, x2)\n",
    "        x = self.up4(x, x1)\n",
    "        #x = self.maxpool(x)\n",
    "        x = self.conv(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "class UNet(nn.Module):\n",
    "    def __init__(self, n_channels, n_classes, bilinear=True):\n",
    "        super(UNet, self).__init__()\n",
    "        self.n_channels = n_channels\n",
    "        self.n_classes = n_classes\n",
    "        self.bilinear = bilinear\n",
    "\n",
    "        self.inc = DoubleConv(n_channels, 64)\n",
    "        self.down1 = Down(64, 128)\n",
    "        self.down2 = Down(128, 256)\n",
    "        self.down3 = Down(256, 512)\n",
    "        factor = 2 if bilinear else 1\n",
    "        self.down4 = Down(512, 1024 // factor)\n",
    "        self.up1 = Up(1024, 512 // factor, bilinear)\n",
    "        self.up2 = Up(512, 256 // factor, bilinear)\n",
    "        self.up3 = Up(256, 128 // factor, bilinear)\n",
    "        self.up4 = Up(128, 64, bilinear)\n",
    "        self.outc = OutConv(64, n_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x1 = self.inc(x)\n",
    "        x2 = self.down1(x1)\n",
    "        x3 = self.down2(x2)\n",
    "        x4 = self.down3(x3)\n",
    "        x5 = self.down4(x4)\n",
    "        x = self.up1(x5, x4)\n",
    "        x = self.up2(x, x3)\n",
    "        x = self.up3(x, x2)\n",
    "        x = self.up4(x, x1)\n",
    "        logits = self.outc(x)\n",
    "        return logits\n",
    "\n",
    "    \n",
    "import torch    \n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "\n",
    "class DoubleConv(nn.Module):\n",
    "    \"\"\"(convolution => [BN] => ReLU) * 2\"\"\"\n",
    "\n",
    "    def __init__(self, in_channels, out_channels, mid_channels=None):\n",
    "        super().__init__()\n",
    "        if not mid_channels:\n",
    "            mid_channels = out_channels\n",
    "        self.double_conv = nn.Sequential(\n",
    "            nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(mid_channels),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(out_channels),\n",
    "            nn.ReLU(inplace=True)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.double_conv(x)\n",
    "\n",
    "\n",
    "class Down(nn.Module):\n",
    "    \"\"\"Downscaling with maxpool then double conv\"\"\"\n",
    "\n",
    "    def __init__(self, in_channels, out_channels):\n",
    "        super().__init__()\n",
    "        self.maxpool_conv = nn.Sequential(\n",
    "            nn.MaxPool2d(2),\n",
    "            DoubleConv(in_channels, out_channels)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.maxpool_conv(x)\n",
    "\n",
    "\n",
    "class Up(nn.Module):\n",
    "    \"\"\"Upscaling then double conv\"\"\"\n",
    "\n",
    "    def __init__(self, in_channels, out_channels, bilinear=True):\n",
    "        super().__init__()\n",
    "\n",
    "        # if bilinear, use the normal convolutions to reduce the number of channels\n",
    "        if bilinear:\n",
    "            self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n",
    "            self.conv = DoubleConv(in_channels, out_channels, in_channels // 2)\n",
    "        else:\n",
    "            self.up = nn.ConvTranspose2d(in_channels , in_channels // 2, kernel_size=2, stride=2)\n",
    "            self.conv = DoubleConv(in_channels, out_channels)\n",
    "\n",
    "\n",
    "    def forward(self, x1, x2):\n",
    "        x1 = self.up(x1)\n",
    "        # input is CHW\n",
    "        diffY = x2.size()[2] - x1.size()[2]\n",
    "        diffX = x2.size()[3] - x1.size()[3]\n",
    "\n",
    "        x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,\n",
    "                        diffY // 2, diffY - diffY // 2])\n",
    "        # if you have padding issues, see\n",
    "        # https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a\n",
    "        # https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd\n",
    "        x = torch.cat([x2, x1], dim=1)\n",
    "        return self.conv(x)\n",
    "\n",
    "\n",
    "class OutConv(nn.Module):\n",
    "    def __init__(self, in_channels, out_channels):\n",
    "        super(OutConv, self).__init__()\n",
    "        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.conv(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### !! \n",
    "### <span style=\"color:red\"> At this point, we highly recommend restarting your notebook for part 2 and beginning modifying/training the  model</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import gc\n",
    "import time\n",
    "import datetime\n",
    "\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\"\n",
    "\n",
    "epochs = 30\n",
    "batch_size = 8\n",
    "learning_rate = 0.001\n",
    "workers = 4 # The number of parallel processes used to read data\n",
    "gpu_id = [0,1,2,3] # only modify if you machine has more than one GPU card"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1464\n",
      "1449\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    #from loaders import get_seg_loaders\n",
    "    train_loader, valid_loader = get_seg_loaders(root_dir='./VOC2012',batch_size=batch_size,workers=workers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "__init__() got an unexpected keyword argument 'pooling'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-15-35b2abb6f4f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_model_gpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Ready to train.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-15-35b2abb6f4f5>\u001b[0m in \u001b[0;36mcreate_model_gpu\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcreate_model_gpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataParallel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice_ids\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgpu_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-11-909db559a654>\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mModel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdown1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDown\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m64\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpooling\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdown2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDown\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m64\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpooling\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdown3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDown2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m256\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpooling\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: __init__() got an unexpected keyword argument 'pooling'"
     ]
    }
   ],
   "source": [
    "def create_model_gpu():\n",
    "    model = Model()\n",
    "    model = model.cuda()\n",
    "    model = nn.DataParallel(model, device_ids=[g for g in gpu_id])\n",
    "    return model\n",
    "\n",
    "model = create_model_gpu()\n",
    "print('Ready to train.')\n",
    "\n",
    "\n",
    "#for param in model.parameters():\n",
    "#    param.requires_grad = False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Training and Evaluation [18 points]\n",
    "Tune the hyperparameters to get the maximum possible score on the PASCAL VOC challenge. \n",
    "And answer the following questions:\n",
    "1. What is the relationship between the _size_ of the class and the IOU How would you quantify this relationship?\n",
    "2. What is the relationship between the number of instances and the IOU? how many times a class exists in an image vs the IOU?\n",
    "3. The segmentation dataset is small. Initialize the weights of the segmentation net with the weights of the trained depth network.\n",
    "4. Which weights can you not transfer?\n",
    "5. Fine tune (ie train with a lower learning rate) the model in 3 for the same number of epochs as the model with a random initialization (or ImageNet initialized weights)\n",
    "6. What trend do you observe?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "from utils import Metrics\n",
    "model = UNet(3,21)\n",
    "model = model.cuda()\n",
    "model = nn.DataParallel(model, device_ids=[g for g in gpu_id])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Training seg_model_gpu[0, 1, 2, 3]_n30_bs8_lr0.001\n",
      "\n",
      "Epoch: [0][0/183]\tTime 14.590 (14.590)\tETA 0:44:29\tTraining Loss 3.0561 (3.0561)\n",
      "\n",
      "Epoch: [0][18/183]\tTime 0.489 (22.338)\tETA 0:01:20\tTraining Loss 3.0115 (3.0332)\n",
      "\n",
      "Epoch: [0][36/183]\tTime 0.172 (33.508)\tETA 0:00:25\tTraining Loss 2.9139 (3.0238)\n",
      "\n",
      "Epoch: [0][54/183]\tTime 0.182 (44.952)\tETA 0:00:23\tTraining Loss 2.9018 (3.0138)\n",
      "\n",
      "Epoch: [0][72/183]\tTime 0.501 (56.290)\tETA 0:00:55\tTraining Loss 2.9404 (3.0022)\n",
      "\n",
      "Epoch: [0][90/183]\tTime 0.199 (67.116)\tETA 0:00:18\tTraining Loss 2.8636 (2.9922)\n",
      "\n",
      "Epoch: [0][108/183]\tTime 0.915 (78.989)\tETA 0:01:08\tTraining Loss 2.8930 (2.9856)\n",
      "\n",
      "Epoch: [0][126/183]\tTime 0.151 (90.002)\tETA 0:00:08\tTraining Loss 2.9550 (2.9768)\n",
      "\n",
      "Epoch: [0][144/183]\tTime 0.682 (101.180)\tETA 0:00:26\tTraining Loss 2.8888 (2.9725)\n",
      "\n",
      "Epoch: [0][162/183]\tTime 0.198 (112.083)\tETA 0:00:04\tTraining Loss 2.8870 (2.9711)\n",
      "\n",
      "Epoch: [0][180/183]\tTime 0.088 (122.923)\tETA 0:00:00\tTraining Loss 2.8200 (2.9627)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.006300  0.012500  0.011600  0.013800  0.962300\n",
      "Car          0.003600  0.007200  0.009400  0.005900  0.972300\n",
      "Cat          0.018200  0.035700  0.020200  0.155400  0.842600\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000700  0.001300  0.006700  0.000700  0.977700\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.048100  0.091800  0.048300  0.931100  0.214800\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.003662  0.007071  0.004581  0.052710  0.908843\n",
      "total(-bg)   0.003845  0.007425  0.004810  0.055345  0.941705\n",
      "\n",
      "Epoch: [1][0/183]\tTime 2.817 (2.817)\tETA 0:08:35\tTraining Loss 2.9185 (2.9185)\n",
      "\n",
      "Epoch: [1][18/183]\tTime 0.187 (13.701)\tETA 0:00:30\tTraining Loss 2.8158 (2.8771)\n",
      "\n",
      "Epoch: [1][36/183]\tTime 1.601 (25.840)\tETA 0:03:55\tTraining Loss 2.7465 (2.8899)\n",
      "\n",
      "Epoch: [1][54/183]\tTime 0.140 (36.605)\tETA 0:00:18\tTraining Loss 2.9140 (2.8884)\n",
      "\n",
      "Epoch: [1][72/183]\tTime 1.450 (47.610)\tETA 0:02:40\tTraining Loss 2.8939 (2.8874)\n",
      "\n",
      "Epoch: [1][90/183]\tTime 0.114 (58.147)\tETA 0:00:10\tTraining Loss 2.9202 (2.8879)\n",
      "\n",
      "Epoch: [1][108/183]\tTime 1.997 (70.128)\tETA 0:02:29\tTraining Loss 2.8298 (2.8914)\n",
      "\n",
      "Epoch: [1][126/183]\tTime 0.141 (80.225)\tETA 0:00:08\tTraining Loss 2.9095 (2.8880)\n",
      "\n",
      "Epoch: [1][144/183]\tTime 2.059 (92.595)\tETA 0:01:20\tTraining Loss 2.9743 (2.8883)\n",
      "\n",
      "Epoch: [1][162/183]\tTime 0.153 (102.742)\tETA 0:00:03\tTraining Loss 2.8877 (2.8906)\n",
      "\n",
      "Epoch: [1][180/183]\tTime 0.666 (113.547)\tETA 0:00:01\tTraining Loss 2.8770 (2.8903)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall      Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.25160\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.99340\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.99630\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.99050\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.99450\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.99120\n",
      "Bus          0.001300  0.002500  0.011800  0.001400  0.98060\n",
      "Car          0.000200  0.000400  0.005500  0.000200  0.98220\n",
      "Cat          0.002800  0.005600  0.010700  0.003800  0.97470\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.98970\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.99090\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.98650\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.97980\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.99140\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.98510\n",
      "Person       0.042900  0.082200  0.042900  0.996500  0.05170\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.99590\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.99210\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.98510\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.98730\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.99450\n",
      "total        0.002248  0.004319  0.003376  0.047710  0.90881\n",
      "total(-bg)   0.002360  0.004535  0.003545  0.050095  0.94167\n",
      "\n",
      "Epoch: [2][0/183]\tTime 2.453 (2.453)\tETA 0:07:28\tTraining Loss 2.8908 (2.8908)\n",
      "\n",
      "Epoch: [2][18/183]\tTime 1.136 (13.786)\tETA 0:03:07\tTraining Loss 2.7453 (2.8291)\n",
      "\n",
      "Epoch: [2][36/183]\tTime 0.203 (24.197)\tETA 0:00:29\tTraining Loss 2.7573 (2.8428)\n",
      "\n",
      "Epoch: [2][54/183]\tTime 1.512 (36.786)\tETA 0:03:15\tTraining Loss 2.8577 (2.8561)\n",
      "\n",
      "Epoch: [2][72/183]\tTime 0.166 (47.350)\tETA 0:00:18\tTraining Loss 2.7396 (2.8528)\n",
      "\n",
      "Epoch: [2][90/183]\tTime 1.828 (59.613)\tETA 0:02:49\tTraining Loss 2.8873 (2.8599)\n",
      "\n",
      "Epoch: [2][108/183]\tTime 0.123 (69.979)\tETA 0:00:09\tTraining Loss 2.8508 (2.8694)\n",
      "\n",
      "Epoch: [2][126/183]\tTime 2.139 (81.903)\tETA 0:02:01\tTraining Loss 2.7691 (2.8758)\n",
      "\n",
      "Epoch: [2][144/183]\tTime 0.196 (92.259)\tETA 0:00:07\tTraining Loss 2.5949 (2.8714)\n",
      "\n",
      "Epoch: [2][162/183]\tTime 2.494 (103.502)\tETA 0:00:52\tTraining Loss 2.9501 (2.8724)\n",
      "\n",
      "Epoch: [2][180/183]\tTime 0.086 (112.732)\tETA 0:00:00\tTraining Loss 2.8393 (2.8713)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec   recall      Acc\n",
      "Background   0.000000  0.000000  0.000000  0.00000  0.25160\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.00000  0.99340\n",
      "Bicycle      0.000000  0.000000  0.000000  0.00000  0.99630\n",
      "Bird         0.000000  0.000000  0.000000  0.00000  0.99050\n",
      "Boat         0.000000  0.000000  0.000000  0.00000  0.99450\n",
      "Bottle       0.000000  0.000000  0.000000  0.00000  0.99120\n",
      "Bus          0.000000  0.000000  0.000000  0.00000  0.98260\n",
      "Car          0.000000  0.000000  0.000000  0.00000  0.98280\n",
      "Cat          0.000000  0.000100  0.000400  0.00000  0.97950\n",
      "Chair        0.000000  0.000000  0.000000  0.00000  0.98970\n",
      "Cow          0.000000  0.000000  0.000000  0.00000  0.99090\n",
      "Diningtable  0.000000  0.000000  0.000000  0.00000  0.98650\n",
      "Dog          0.000000  0.000000  0.000000  0.00000  0.97980\n",
      "Horse        0.000000  0.000000  0.000000  0.00000  0.99140\n",
      "Motorbike    0.000000  0.000000  0.000000  0.00000  0.98510\n",
      "Person       0.042700  0.081900  0.042700  0.99960  0.04430\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.00000  0.99590\n",
      "Sheep        0.000000  0.000000  0.000000  0.00000  0.99210\n",
      "Sofa         0.000000  0.000000  0.000000  0.00000  0.98510\n",
      "Train        0.000000  0.000000  0.000000  0.00000  0.98730\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.00000  0.99450\n",
      "total        0.002033  0.003905  0.002052  0.04760  0.90881\n",
      "total(-bg)   0.002135  0.004100  0.002155  0.04998  0.94167\n",
      "\n",
      "Epoch: [3][0/183]\tTime 2.746 (2.746)\tETA 0:08:22\tTraining Loss 2.8391 (2.8391)\n",
      "\n",
      "Epoch: [3][18/183]\tTime 0.225 (13.236)\tETA 0:00:37\tTraining Loss 2.8182 (2.8381)\n",
      "\n",
      "Epoch: [3][36/183]\tTime 1.088 (25.046)\tETA 0:02:39\tTraining Loss 3.0698 (2.8690)\n",
      "\n",
      "Epoch: [3][54/183]\tTime 0.170 (35.892)\tETA 0:00:21\tTraining Loss 2.8736 (2.8727)\n",
      "\n",
      "Epoch: [3][72/183]\tTime 1.760 (47.912)\tETA 0:03:15\tTraining Loss 2.8273 (2.8687)\n",
      "\n",
      "Epoch: [3][90/183]\tTime 0.159 (58.526)\tETA 0:00:14\tTraining Loss 2.7955 (2.8739)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch: [3][108/183]\tTime 1.748 (70.525)\tETA 0:02:11\tTraining Loss 2.7397 (2.8646)\n",
      "\n",
      "Epoch: [3][126/183]\tTime 0.159 (80.992)\tETA 0:00:09\tTraining Loss 3.1691 (2.8599)\n",
      "\n",
      "Epoch: [3][144/183]\tTime 1.181 (93.161)\tETA 0:00:46\tTraining Loss 2.6930 (2.8547)\n",
      "\n",
      "Epoch: [3][162/183]\tTime 0.137 (104.548)\tETA 0:00:02\tTraining Loss 2.7943 (2.8601)\n",
      "\n",
      "Epoch: [3][180/183]\tTime 0.135 (113.999)\tETA 0:00:00\tTraining Loss 2.8425 (2.8628)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall      Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.25160\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.99340\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.99630\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.99050\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.99450\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.99120\n",
      "Bus          0.000000  0.000000  0.000000  0.000000  0.98260\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.98280\n",
      "Cat          0.000200  0.000400  0.002100  0.000200  0.97930\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.98970\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.99090\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.98650\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.97980\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.99140\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.98510\n",
      "Person       0.042700  0.081900  0.042700  0.999700  0.04450\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.99590\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.99210\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.98510\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.98730\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.99450\n",
      "total        0.002043  0.003919  0.002133  0.047614  0.90881\n",
      "total(-bg)   0.002145  0.004115  0.002240  0.049995  0.94167\n",
      "\n",
      "Epoch: [4][0/183]\tTime 3.006 (3.006)\tETA 0:09:10\tTraining Loss 2.7398 (2.7398)\n",
      "\n",
      "Epoch: [4][18/183]\tTime 0.146 (13.688)\tETA 0:00:24\tTraining Loss 2.7430 (2.8636)\n",
      "\n",
      "Epoch: [4][36/183]\tTime 0.993 (26.094)\tETA 0:02:25\tTraining Loss 2.6229 (2.8442)\n",
      "\n",
      "Epoch: [4][54/183]\tTime 0.166 (37.336)\tETA 0:00:21\tTraining Loss 2.6733 (2.8354)\n",
      "\n",
      "Epoch: [4][72/183]\tTime 0.126 (50.122)\tETA 0:00:13\tTraining Loss 2.8319 (2.8320)\n",
      "\n",
      "Epoch: [4][90/183]\tTime 0.157 (60.561)\tETA 0:00:14\tTraining Loss 2.8279 (2.8368)\n",
      "\n",
      "Epoch: [4][108/183]\tTime 0.099 (73.211)\tETA 0:00:07\tTraining Loss 2.6171 (2.8489)\n",
      "\n",
      "Epoch: [4][126/183]\tTime 0.135 (83.698)\tETA 0:00:07\tTraining Loss 2.9454 (2.8465)\n",
      "\n",
      "Epoch: [4][144/183]\tTime 0.127 (96.270)\tETA 0:00:04\tTraining Loss 2.7722 (2.8556)\n",
      "\n",
      "Epoch: [4][162/183]\tTime 0.165 (106.234)\tETA 0:00:03\tTraining Loss 2.9424 (2.8527)\n",
      "\n",
      "Epoch: [4][180/183]\tTime 0.063 (116.894)\tETA 0:00:00\tTraining Loss 2.8011 (2.8525)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                   IoU        F1     Prec    recall      Acc\n",
      "Background   0.00000  0.000000  0.00000  0.000000  0.25160\n",
      "Aeroplane    0.00000  0.000000  0.00000  0.000000  0.99340\n",
      "Bicycle      0.00000  0.000000  0.00000  0.000000  0.99630\n",
      "Bird         0.00000  0.000000  0.00000  0.000000  0.99050\n",
      "Boat         0.00000  0.000000  0.00000  0.000000  0.99450\n",
      "Bottle       0.00000  0.000000  0.00000  0.000000  0.99120\n",
      "Bus          0.00000  0.000100  0.06810  0.000000  0.98260\n",
      "Car          0.00000  0.000000  0.00000  0.000000  0.98280\n",
      "Cat          0.00340  0.006700  0.01090  0.004900  0.97300\n",
      "Chair        0.00000  0.000000  0.00000  0.000000  0.98970\n",
      "Cow          0.00000  0.000000  0.00000  0.000000  0.99090\n",
      "Diningtable  0.00000  0.000000  0.00000  0.000000  0.98650\n",
      "Dog          0.00000  0.000000  0.00000  0.000000  0.97980\n",
      "Horse        0.00000  0.000000  0.00000  0.000000  0.99140\n",
      "Motorbike    0.00000  0.000000  0.00000  0.000000  0.98510\n",
      "Person       0.04280  0.082100  0.04280  0.996500  0.05080\n",
      "Pottedplant  0.00000  0.000000  0.00000  0.000000  0.99590\n",
      "Sheep        0.00000  0.000000  0.00000  0.000000  0.99210\n",
      "Sofa         0.00000  0.000000  0.00000  0.000000  0.98510\n",
      "Train        0.00000  0.000000  0.00000  0.000000  0.98730\n",
      "Tvmonitor    0.00000  0.000000  0.00000  0.000000  0.99450\n",
      "total        0.00220  0.004233  0.00580  0.047686  0.90881\n",
      "total(-bg)   0.00231  0.004445  0.00609  0.050070  0.94167\n",
      "\n",
      "Epoch: [5][0/183]\tTime 2.976 (2.976)\tETA 0:09:04\tTraining Loss 2.8931 (2.8931)\n",
      "\n",
      "Epoch: [5][18/183]\tTime 0.150 (14.623)\tETA 0:00:24\tTraining Loss 3.0177 (2.8507)\n",
      "\n",
      "Epoch: [5][36/183]\tTime 1.760 (26.576)\tETA 0:04:18\tTraining Loss 3.0565 (2.8580)\n",
      "\n",
      "Epoch: [5][54/183]\tTime 0.133 (37.021)\tETA 0:00:17\tTraining Loss 2.6950 (2.8462)\n",
      "\n",
      "Epoch: [5][72/183]\tTime 2.092 (49.610)\tETA 0:03:52\tTraining Loss 2.6491 (2.8368)\n",
      "\n",
      "Epoch: [5][90/183]\tTime 0.188 (59.301)\tETA 0:00:17\tTraining Loss 2.6071 (2.8482)\n",
      "\n",
      "Epoch: [5][108/183]\tTime 2.074 (71.639)\tETA 0:02:35\tTraining Loss 2.7960 (2.8500)\n",
      "\n",
      "Epoch: [5][126/183]\tTime 0.143 (81.744)\tETA 0:00:08\tTraining Loss 2.8720 (2.8440)\n",
      "\n",
      "Epoch: [5][144/183]\tTime 2.072 (94.163)\tETA 0:01:20\tTraining Loss 2.6835 (2.8457)\n",
      "\n",
      "Epoch: [5][162/183]\tTime 0.127 (103.935)\tETA 0:00:02\tTraining Loss 2.8654 (2.8453)\n",
      "\n",
      "Epoch: [5][180/183]\tTime 0.889 (114.565)\tETA 0:00:02\tTraining Loss 3.2508 (2.8489)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU       F1      Prec    recall      Acc\n",
      "Background   0.000000  0.00000  0.000000  0.000000  0.25160\n",
      "Aeroplane    0.000000  0.00000  0.000000  0.000000  0.99340\n",
      "Bicycle      0.000000  0.00000  0.000000  0.000000  0.99630\n",
      "Bird         0.000000  0.00000  0.000000  0.000000  0.99050\n",
      "Boat         0.000000  0.00000  0.000000  0.000000  0.99450\n",
      "Bottle       0.000000  0.00000  0.000000  0.000000  0.99120\n",
      "Bus          0.001100  0.00220  0.007400  0.001300  0.97950\n",
      "Car          0.000000  0.00000  0.000000  0.000000  0.98280\n",
      "Cat          0.000000  0.00000  0.000100  0.000000  0.98060\n",
      "Chair        0.000000  0.00000  0.000000  0.000000  0.98970\n",
      "Cow          0.000000  0.00000  0.000000  0.000000  0.99090\n",
      "Diningtable  0.000000  0.00000  0.000000  0.000000  0.98650\n",
      "Dog          0.000000  0.00000  0.000000  0.000000  0.97980\n",
      "Horse        0.000000  0.00000  0.000000  0.000000  0.99140\n",
      "Motorbike    0.000000  0.00000  0.000000  0.000000  0.98510\n",
      "Person       0.042700  0.08200  0.042800  0.999400  0.04630\n",
      "Pottedplant  0.000000  0.00000  0.000000  0.000000  0.99590\n",
      "Sheep        0.000000  0.00000  0.000000  0.000000  0.99210\n",
      "Sofa         0.000000  0.00000  0.000000  0.000000  0.98510\n",
      "Train        0.000000  0.00000  0.000000  0.000000  0.98730\n",
      "Tvmonitor    0.000000  0.00000  0.000000  0.000000  0.99450\n",
      "total        0.002086  0.00401  0.002395  0.047652  0.90881\n",
      "total(-bg)   0.002190  0.00421  0.002515  0.050035  0.94167\n",
      "\n",
      "Epoch: [6][0/183]\tTime 2.045 (2.045)\tETA 0:06:14\tTraining Loss 2.7638 (2.7638)\n",
      "\n",
      "Epoch: [6][18/183]\tTime 0.130 (14.286)\tETA 0:00:21\tTraining Loss 2.9691 (2.8273)\n",
      "\n",
      "Epoch: [6][36/183]\tTime 0.184 (24.198)\tETA 0:00:26\tTraining Loss 3.0487 (2.8662)\n",
      "\n",
      "Epoch: [6][54/183]\tTime 0.179 (36.200)\tETA 0:00:23\tTraining Loss 2.8347 (2.8482)\n",
      "\n",
      "Epoch: [6][72/183]\tTime 0.131 (46.264)\tETA 0:00:14\tTraining Loss 2.8810 (2.8367)\n",
      "\n",
      "Epoch: [6][90/183]\tTime 0.717 (57.974)\tETA 0:01:06\tTraining Loss 2.7511 (2.8468)\n",
      "\n",
      "Epoch: [6][108/183]\tTime 0.166 (68.661)\tETA 0:00:12\tTraining Loss 2.6254 (2.8382)\n",
      "\n",
      "Epoch: [6][126/183]\tTime 1.899 (80.790)\tETA 0:01:48\tTraining Loss 2.9029 (2.8468)\n",
      "\n",
      "Epoch: [6][144/183]\tTime 0.119 (90.788)\tETA 0:00:04\tTraining Loss 2.6022 (2.8503)\n",
      "\n",
      "Epoch: [6][162/183]\tTime 0.173 (101.778)\tETA 0:00:03\tTraining Loss 2.7143 (2.8501)\n",
      "\n",
      "Epoch: [6][180/183]\tTime 0.098 (112.638)\tETA 0:00:00\tTraining Loss 2.7592 (2.8511)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU       F1      Prec    recall       Acc\n",
      "Background   0.000000  0.00000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.00000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.00000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.00000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.00000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.00000  0.000000  0.000000  0.991200\n",
      "Bus          0.017200  0.03380  0.019400  0.132500  0.868400\n",
      "Car          0.000000  0.00000  0.000000  0.000000  0.982800\n",
      "Cat          0.002100  0.00420  0.028400  0.002300  0.979800\n",
      "Chair        0.000000  0.00000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.00000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.00000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.00000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.00000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.00000  0.000000  0.000000  0.985100\n",
      "Person       0.045900  0.08780  0.046000  0.950200  0.158700\n",
      "Pottedplant  0.000000  0.00000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.00000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.00000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.00000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.00000  0.000000  0.000000  0.994500\n",
      "total        0.003105  0.00599  0.004467  0.051667  0.908833\n",
      "total(-bg)   0.003260  0.00629  0.004690  0.054250  0.941695\n",
      "\n",
      "Epoch: [7][0/183]\tTime 3.311 (3.311)\tETA 0:10:05\tTraining Loss 2.8195 (2.8195)\n",
      "\n",
      "Epoch: [7][18/183]\tTime 0.306 (13.350)\tETA 0:00:50\tTraining Loss 2.7615 (2.8249)\n",
      "\n",
      "Epoch: [7][36/183]\tTime 2.516 (25.846)\tETA 0:06:09\tTraining Loss 2.6649 (2.8295)\n",
      "\n",
      "Epoch: [7][54/183]\tTime 0.155 (35.877)\tETA 0:00:20\tTraining Loss 2.7045 (2.8252)\n",
      "\n",
      "Epoch: [7][72/183]\tTime 1.934 (47.904)\tETA 0:03:34\tTraining Loss 2.9125 (2.8281)\n",
      "\n",
      "Epoch: [7][90/183]\tTime 0.195 (58.542)\tETA 0:00:18\tTraining Loss 2.7169 (2.8329)\n",
      "\n",
      "Epoch: [7][108/183]\tTime 1.062 (69.793)\tETA 0:01:19\tTraining Loss 2.7222 (2.8296)\n",
      "\n",
      "Epoch: [7][126/183]\tTime 0.343 (80.756)\tETA 0:00:19\tTraining Loss 2.8203 (2.8353)\n",
      "\n",
      "Epoch: [7][144/183]\tTime 0.158 (91.941)\tETA 0:00:06\tTraining Loss 2.7127 (2.8410)\n",
      "\n",
      "Epoch: [7][162/183]\tTime 0.160 (103.446)\tETA 0:00:03\tTraining Loss 3.0102 (2.8447)\n",
      "\n",
      "Epoch: [7][180/183]\tTime 0.128 (113.714)\tETA 0:00:00\tTraining Loss 3.0320 (2.8438)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.010400  0.020400  0.025100  0.017300  0.971200\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.002600  0.005200  0.031600  0.002900  0.979600\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.043000  0.082400  0.043000  0.994600  0.055900\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.002667  0.005143  0.004748  0.048324  0.908824\n",
      "total(-bg)   0.002800  0.005400  0.004985  0.050740  0.941685\n",
      "\n",
      "Epoch: [8][0/183]\tTime 3.282 (3.282)\tETA 0:10:00\tTraining Loss 2.9815 (2.9815)\n",
      "\n",
      "Epoch: [8][18/183]\tTime 0.137 (13.731)\tETA 0:00:22\tTraining Loss 3.0722 (2.8067)\n",
      "\n",
      "Epoch: [8][36/183]\tTime 1.914 (25.789)\tETA 0:04:41\tTraining Loss 2.7909 (2.8283)\n",
      "\n",
      "Epoch: [8][54/183]\tTime 0.172 (36.389)\tETA 0:00:22\tTraining Loss 2.9333 (2.8384)\n",
      "\n",
      "Epoch: [8][72/183]\tTime 2.332 (48.968)\tETA 0:04:18\tTraining Loss 2.8027 (2.8420)\n",
      "\n",
      "Epoch: [8][90/183]\tTime 0.188 (58.901)\tETA 0:00:17\tTraining Loss 2.7814 (2.8301)\n",
      "\n",
      "Epoch: [8][108/183]\tTime 1.982 (71.244)\tETA 0:02:28\tTraining Loss 3.0291 (2.8355)\n",
      "\n",
      "Epoch: [8][126/183]\tTime 0.151 (82.046)\tETA 0:00:08\tTraining Loss 2.8534 (2.8360)\n",
      "\n",
      "Epoch: [8][144/183]\tTime 1.323 (93.297)\tETA 0:00:51\tTraining Loss 2.6369 (2.8328)\n",
      "\n",
      "Epoch: [8][162/183]\tTime 0.166 (103.340)\tETA 0:00:03\tTraining Loss 3.1156 (2.8342)\n",
      "\n",
      "Epoch: [8][180/183]\tTime 1.064 (114.277)\tETA 0:00:03\tTraining Loss 2.7828 (2.8386)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.000000  0.000100  0.006200  0.000000  0.982500\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.001300  0.002600  0.007600  0.001600  0.977400\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.042800  0.082000  0.042800  0.999200  0.046600\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.002100  0.004033  0.002695  0.047657  0.908814\n",
      "total(-bg)   0.002205  0.004235  0.002830  0.050040  0.941675\n",
      "\n",
      "Epoch: [9][0/183]\tTime 3.386 (3.386)\tETA 0:10:19\tTraining Loss 3.1029 (3.1029)\n",
      "\n",
      "Epoch: [9][18/183]\tTime 0.191 (13.811)\tETA 0:00:31\tTraining Loss 2.8137 (2.8162)\n",
      "\n",
      "Epoch: [9][36/183]\tTime 0.166 (25.048)\tETA 0:00:24\tTraining Loss 2.6899 (2.8092)\n",
      "\n",
      "Epoch: [9][54/183]\tTime 2.077 (37.892)\tETA 0:04:27\tTraining Loss 2.7534 (2.8203)\n",
      "\n",
      "Epoch: [9][72/183]\tTime 0.135 (48.294)\tETA 0:00:14\tTraining Loss 2.9879 (2.8208)\n",
      "\n",
      "Epoch: [9][90/183]\tTime 1.875 (60.082)\tETA 0:02:54\tTraining Loss 3.0178 (2.8171)\n",
      "\n",
      "Epoch: [9][108/183]\tTime 0.143 (70.740)\tETA 0:00:10\tTraining Loss 2.7505 (2.8252)\n",
      "\n",
      "Epoch: [9][126/183]\tTime 2.151 (82.402)\tETA 0:02:02\tTraining Loss 3.1523 (2.8291)\n",
      "\n",
      "Epoch: [9][144/183]\tTime 0.165 (92.424)\tETA 0:00:06\tTraining Loss 2.7720 (2.8300)\n",
      "\n",
      "Epoch: [9][162/183]\tTime 1.189 (104.498)\tETA 0:00:24\tTraining Loss 2.7321 (2.8323)\n",
      "\n",
      "Epoch: [9][180/183]\tTime 0.109 (113.793)\tETA 0:00:00\tTraining Loss 2.9485 (2.8311)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec   recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.00000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.00000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.00000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.00000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.00000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.00000  0.991200\n",
      "Bus          0.031800  0.061600  0.041600  0.11850  0.937200\n",
      "Car          0.000000  0.000000  0.000000  0.00000  0.982800\n",
      "Cat          0.000000  0.000000  0.000000  0.00000  0.981200\n",
      "Chair        0.000000  0.000000  0.000000  0.00000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.00000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.00000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.00000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.00000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.00000  0.985100\n",
      "Person       0.044200  0.084600  0.044200  0.98630  0.091000\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.00000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.00000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.00000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.00000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.00000  0.994500\n",
      "total        0.003619  0.006962  0.004086  0.05261  0.908952\n",
      "total(-bg)   0.003800  0.007310  0.004290  0.05524  0.941820\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch: [10][0/183]\tTime 3.501 (3.501)\tETA 0:10:40\tTraining Loss 2.9904 (2.9904)\n",
      "\n",
      "Epoch: [10][18/183]\tTime 0.203 (14.222)\tETA 0:00:33\tTraining Loss 2.8440 (2.8093)\n",
      "\n",
      "Epoch: [10][36/183]\tTime 1.201 (26.258)\tETA 0:02:56\tTraining Loss 2.8275 (2.7966)\n",
      "\n",
      "Epoch: [10][54/183]\tTime 0.155 (36.637)\tETA 0:00:20\tTraining Loss 2.9313 (2.8069)\n",
      "\n",
      "Epoch: [10][72/183]\tTime 1.895 (48.496)\tETA 0:03:30\tTraining Loss 3.0099 (2.8064)\n",
      "\n",
      "Epoch: [10][90/183]\tTime 0.169 (59.061)\tETA 0:00:15\tTraining Loss 2.6634 (2.8165)\n",
      "\n",
      "Epoch: [10][108/183]\tTime 1.919 (71.434)\tETA 0:02:23\tTraining Loss 2.7622 (2.8188)\n",
      "\n",
      "Epoch: [10][126/183]\tTime 0.167 (81.683)\tETA 0:00:09\tTraining Loss 2.8133 (2.8197)\n",
      "\n",
      "Epoch: [10][144/183]\tTime 2.201 (93.529)\tETA 0:01:25\tTraining Loss 2.7828 (2.8258)\n",
      "\n",
      "Epoch: [10][162/183]\tTime 1.689 (103.821)\tETA 0:00:35\tTraining Loss 2.8761 (2.8317)\n",
      "\n",
      "Epoch: [10][180/183]\tTime 0.316 (113.723)\tETA 0:00:00\tTraining Loss 2.9779 (2.8335)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.039900  0.076800  0.054100  0.132100  0.944800\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.000100  0.000100  0.000300  0.000100  0.977400\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.044100  0.084600  0.044200  0.988400  0.087900\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.004005  0.007690  0.004695  0.053362  0.908986\n",
      "total(-bg)   0.004205  0.008075  0.004930  0.056030  0.941855\n",
      "\n",
      "Epoch: [11][0/183]\tTime 3.018 (3.018)\tETA 0:09:12\tTraining Loss 2.8061 (2.8061)\n",
      "\n",
      "Epoch: [11][18/183]\tTime 0.115 (14.016)\tETA 0:00:18\tTraining Loss 2.5834 (2.8334)\n",
      "\n",
      "Epoch: [11][36/183]\tTime 1.837 (26.375)\tETA 0:04:29\tTraining Loss 2.8496 (2.8440)\n",
      "\n",
      "Epoch: [11][54/183]\tTime 0.141 (36.378)\tETA 0:00:18\tTraining Loss 2.8682 (2.8450)\n",
      "\n",
      "Epoch: [11][72/183]\tTime 2.021 (48.423)\tETA 0:03:44\tTraining Loss 2.6722 (2.8354)\n",
      "\n",
      "Epoch: [11][90/183]\tTime 0.165 (57.440)\tETA 0:00:15\tTraining Loss 2.9957 (2.8399)\n",
      "\n",
      "Epoch: [11][108/183]\tTime 1.456 (69.245)\tETA 0:01:49\tTraining Loss 2.8090 (2.8440)\n",
      "\n",
      "Epoch: [11][126/183]\tTime 0.694 (80.487)\tETA 0:00:39\tTraining Loss 2.6192 (2.8410)\n",
      "\n",
      "Epoch: [11][144/183]\tTime 0.306 (91.098)\tETA 0:00:11\tTraining Loss 2.8759 (2.8366)\n",
      "\n",
      "Epoch: [11][162/183]\tTime 0.294 (101.972)\tETA 0:00:06\tTraining Loss 2.8298 (2.8326)\n",
      "\n",
      "Epoch: [11][180/183]\tTime 0.962 (112.847)\tETA 0:00:02\tTraining Loss 2.7080 (2.8285)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.029900  0.058100  0.033900  0.203700  0.885200\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.000000  0.000000  0.000200  0.000000  0.980300\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.046400  0.088600  0.046400  0.974500  0.145800\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.003633  0.006986  0.003833  0.056105  0.909043\n",
      "total(-bg)   0.003815  0.007335  0.004025  0.058910  0.941915\n",
      "\n",
      "Epoch: [12][0/183]\tTime 3.104 (3.104)\tETA 0:09:28\tTraining Loss 2.8599 (2.8599)\n",
      "\n",
      "Epoch: [12][18/183]\tTime 0.163 (13.812)\tETA 0:00:26\tTraining Loss 2.7725 (2.8432)\n",
      "\n",
      "Epoch: [12][36/183]\tTime 2.499 (26.804)\tETA 0:06:07\tTraining Loss 2.6624 (2.8335)\n",
      "\n",
      "Epoch: [12][54/183]\tTime 0.187 (37.281)\tETA 0:00:24\tTraining Loss 3.0417 (2.8275)\n",
      "\n",
      "Epoch: [12][72/183]\tTime 1.728 (48.679)\tETA 0:03:11\tTraining Loss 2.6754 (2.8256)\n",
      "\n",
      "Epoch: [12][90/183]\tTime 0.149 (59.982)\tETA 0:00:13\tTraining Loss 2.8176 (2.8280)\n",
      "\n",
      "Epoch: [12][108/183]\tTime 1.801 (71.292)\tETA 0:02:15\tTraining Loss 2.8429 (2.8308)\n",
      "\n",
      "Epoch: [12][126/183]\tTime 1.642 (82.357)\tETA 0:01:33\tTraining Loss 2.7398 (2.8299)\n",
      "\n",
      "Epoch: [12][144/183]\tTime 1.771 (93.633)\tETA 0:01:09\tTraining Loss 2.8221 (2.8257)\n",
      "\n",
      "Epoch: [12][162/183]\tTime 0.134 (104.304)\tETA 0:00:02\tTraining Loss 3.2437 (2.8287)\n",
      "\n",
      "Epoch: [12][180/183]\tTime 0.682 (115.082)\tETA 0:00:02\tTraining Loss 2.7369 (2.8256)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.044100  0.084400  0.065000  0.120500  0.954500\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.000100  0.000300  0.065900  0.000100  0.981200\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.043600  0.083600  0.043600  0.991100  0.074100\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.004181  0.008014  0.008310  0.052938  0.908971\n",
      "total(-bg)   0.004390  0.008415  0.008725  0.055585  0.941840\n",
      "\n",
      "Epoch: [13][0/183]\tTime 2.875 (2.875)\tETA 0:08:46\tTraining Loss 3.1656 (3.1656)\n",
      "\n",
      "Epoch: [13][18/183]\tTime 0.984 (14.321)\tETA 0:02:42\tTraining Loss 2.8124 (2.8200)\n",
      "\n",
      "Epoch: [13][36/183]\tTime 0.182 (26.349)\tETA 0:00:26\tTraining Loss 2.7066 (2.8104)\n",
      "\n",
      "Epoch: [13][54/183]\tTime 1.572 (38.127)\tETA 0:03:22\tTraining Loss 2.7232 (2.8117)\n",
      "\n",
      "Epoch: [13][72/183]\tTime 0.523 (48.278)\tETA 0:00:58\tTraining Loss 2.7751 (2.8220)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch: [13][90/183]\tTime 0.393 (59.064)\tETA 0:00:36\tTraining Loss 2.9425 (2.8298)\n",
      "\n",
      "Epoch: [13][108/183]\tTime 0.134 (71.158)\tETA 0:00:10\tTraining Loss 2.7714 (2.8251)\n",
      "\n",
      "Epoch: [13][126/183]\tTime 0.146 (81.941)\tETA 0:00:08\tTraining Loss 2.8739 (2.8292)\n",
      "\n",
      "Epoch: [13][144/183]\tTime 0.138 (94.000)\tETA 0:00:05\tTraining Loss 2.8604 (2.8278)\n",
      "\n",
      "Epoch: [13][162/183]\tTime 0.180 (104.289)\tETA 0:00:03\tTraining Loss 2.6125 (2.8250)\n",
      "\n",
      "Epoch: [13][180/183]\tTime 0.085 (114.977)\tETA 0:00:00\tTraining Loss 2.7970 (2.8247)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.051600  0.098100  0.066700  0.186300  0.940500\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.002000  0.003900  0.016800  0.002200  0.978800\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.044300  0.084800  0.044300  0.987100  0.092600\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.004662  0.008895  0.006086  0.055981  0.909071\n",
      "total(-bg)   0.004895  0.009340  0.006390  0.058780  0.941945\n",
      "\n",
      "Epoch: [14][0/183]\tTime 3.478 (3.478)\tETA 0:10:36\tTraining Loss 2.9177 (2.9177)\n",
      "\n",
      "Epoch: [14][18/183]\tTime 0.174 (14.296)\tETA 0:00:28\tTraining Loss 2.6878 (2.7957)\n",
      "\n",
      "Epoch: [14][36/183]\tTime 1.856 (27.050)\tETA 0:04:32\tTraining Loss 2.6464 (2.8176)\n",
      "\n",
      "Epoch: [14][54/183]\tTime 0.178 (37.142)\tETA 0:00:22\tTraining Loss 2.8257 (2.8236)\n",
      "\n",
      "Epoch: [14][72/183]\tTime 0.170 (48.759)\tETA 0:00:18\tTraining Loss 2.6934 (2.8183)\n",
      "\n",
      "Epoch: [14][90/183]\tTime 0.144 (60.684)\tETA 0:00:13\tTraining Loss 2.9067 (2.8222)\n",
      "\n",
      "Epoch: [14][108/183]\tTime 0.169 (71.545)\tETA 0:00:12\tTraining Loss 2.9245 (2.8245)\n",
      "\n",
      "Epoch: [14][126/183]\tTime 1.310 (83.343)\tETA 0:01:14\tTraining Loss 3.0615 (2.8275)\n",
      "\n",
      "Epoch: [14][144/183]\tTime 0.150 (94.066)\tETA 0:00:05\tTraining Loss 2.6379 (2.8262)\n",
      "\n",
      "Epoch: [14][162/183]\tTime 1.701 (105.619)\tETA 0:00:35\tTraining Loss 2.6865 (2.8242)\n",
      "\n",
      "Epoch: [14][180/183]\tTime 0.087 (115.293)\tETA 0:00:00\tTraining Loss 2.6953 (2.8248)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.018900  0.037000  0.065400  0.025900  0.976600\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.000400  0.000700  0.002100  0.000500  0.977200\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.042900  0.082200  0.042900  0.995500  0.053200\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.002962  0.005710  0.005257  0.048662  0.908838\n",
      "total(-bg)   0.003110  0.005995  0.005520  0.051095  0.941700\n",
      "\n",
      "Epoch: [15][0/183]\tTime 3.083 (3.083)\tETA 0:09:24\tTraining Loss 2.7293 (2.7293)\n",
      "\n",
      "Epoch: [15][18/183]\tTime 0.191 (13.997)\tETA 0:00:31\tTraining Loss 2.7178 (2.8007)\n",
      "\n",
      "Epoch: [15][36/183]\tTime 1.643 (26.032)\tETA 0:04:01\tTraining Loss 2.7308 (2.8285)\n",
      "\n",
      "Epoch: [15][54/183]\tTime 0.163 (36.572)\tETA 0:00:21\tTraining Loss 2.6680 (2.8201)\n",
      "\n",
      "Epoch: [15][72/183]\tTime 1.625 (48.406)\tETA 0:03:00\tTraining Loss 2.9307 (2.8153)\n",
      "\n",
      "Epoch: [15][90/183]\tTime 0.156 (59.307)\tETA 0:00:14\tTraining Loss 2.6797 (2.8129)\n",
      "\n",
      "Epoch: [15][108/183]\tTime 1.192 (70.925)\tETA 0:01:29\tTraining Loss 2.9649 (2.8068)\n",
      "\n",
      "Epoch: [15][126/183]\tTime 0.194 (82.992)\tETA 0:00:11\tTraining Loss 2.9252 (2.8139)\n",
      "\n",
      "Epoch: [15][144/183]\tTime 0.153 (93.213)\tETA 0:00:05\tTraining Loss 2.8272 (2.8167)\n",
      "\n",
      "Epoch: [15][162/183]\tTime 0.169 (105.258)\tETA 0:00:03\tTraining Loss 2.8621 (2.8197)\n",
      "\n",
      "Epoch: [15][180/183]\tTime 0.078 (114.826)\tETA 0:00:00\tTraining Loss 2.8184 (2.8204)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.030600  0.059300  0.040800  0.109000  0.939900\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.004100  0.008100  0.014900  0.005600  0.974300\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.044000  0.084200  0.044000  0.977000  0.094300\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.003748  0.007219  0.004748  0.051981  0.908910\n",
      "total(-bg)   0.003935  0.007580  0.004985  0.054580  0.941775\n",
      "\n",
      "Epoch: [16][0/183]\tTime 3.538 (3.538)\tETA 0:10:47\tTraining Loss 2.7579 (2.7579)\n",
      "\n",
      "Epoch: [16][18/183]\tTime 0.144 (13.989)\tETA 0:00:23\tTraining Loss 3.0822 (2.8065)\n",
      "\n",
      "Epoch: [16][36/183]\tTime 0.888 (26.366)\tETA 0:02:10\tTraining Loss 2.8131 (2.8055)\n",
      "\n",
      "Epoch: [16][54/183]\tTime 0.195 (37.346)\tETA 0:00:25\tTraining Loss 2.8291 (2.8082)\n",
      "\n",
      "Epoch: [16][72/183]\tTime 0.208 (47.644)\tETA 0:00:23\tTraining Loss 2.9644 (2.8246)\n",
      "\n",
      "Epoch: [16][90/183]\tTime 0.169 (59.303)\tETA 0:00:15\tTraining Loss 2.9940 (2.8208)\n",
      "\n",
      "Epoch: [16][108/183]\tTime 0.152 (70.498)\tETA 0:00:11\tTraining Loss 2.7666 (2.8146)\n",
      "\n",
      "Epoch: [16][126/183]\tTime 0.166 (82.686)\tETA 0:00:09\tTraining Loss 2.6510 (2.8165)\n",
      "\n",
      "Epoch: [16][144/183]\tTime 1.223 (93.826)\tETA 0:00:47\tTraining Loss 2.7980 (2.8226)\n",
      "\n",
      "Epoch: [16][162/183]\tTime 0.186 (105.240)\tETA 0:00:03\tTraining Loss 2.9031 (2.8208)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch: [16][180/183]\tTime 0.110 (115.221)\tETA 0:00:00\tTraining Loss 2.6829 (2.8214)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU       F1      Prec    recall       Acc\n",
      "Background   0.000000  0.00000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.00000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.00000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.00000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.00000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.00000  0.000000  0.000000  0.991200\n",
      "Bus          0.044300  0.08480  0.108000  0.069800  0.973800\n",
      "Car          0.000000  0.00000  0.000000  0.000000  0.982800\n",
      "Cat          0.021300  0.04160  0.037700  0.046500  0.959800\n",
      "Chair        0.000000  0.00000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.00000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.00000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.00000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.00000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.00000  0.000000  0.000000  0.985100\n",
      "Person       0.043700  0.08380  0.043700  0.991100  0.076300\n",
      "Pottedplant  0.000000  0.00000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.00000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.00000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.00000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.00000  0.000000  0.000000  0.994500\n",
      "total        0.005205  0.01001  0.009019  0.052733  0.908976\n",
      "total(-bg)   0.005465  0.01051  0.009470  0.055370  0.941845\n",
      "\n",
      "Epoch: [17][0/183]\tTime 3.014 (3.014)\tETA 0:09:11\tTraining Loss 3.2367 (3.2367)\n",
      "\n",
      "Epoch: [17][18/183]\tTime 0.179 (14.108)\tETA 0:00:29\tTraining Loss 3.2467 (2.8733)\n",
      "\n",
      "Epoch: [17][36/183]\tTime 2.446 (27.233)\tETA 0:05:59\tTraining Loss 2.8232 (2.8265)\n",
      "\n",
      "Epoch: [17][54/183]\tTime 0.140 (38.012)\tETA 0:00:18\tTraining Loss 2.9361 (2.8287)\n",
      "\n",
      "Epoch: [17][72/183]\tTime 1.653 (48.342)\tETA 0:03:03\tTraining Loss 2.8247 (2.8177)\n",
      "\n",
      "Epoch: [17][90/183]\tTime 0.507 (58.846)\tETA 0:00:47\tTraining Loss 2.9907 (2.8270)\n",
      "\n",
      "Epoch: [17][108/183]\tTime 0.126 (70.572)\tETA 0:00:09\tTraining Loss 2.7075 (2.8232)\n",
      "\n",
      "Epoch: [17][126/183]\tTime 0.176 (82.406)\tETA 0:00:10\tTraining Loss 2.6269 (2.8227)\n",
      "\n",
      "Epoch: [17][144/183]\tTime 0.151 (93.242)\tETA 0:00:05\tTraining Loss 2.9314 (2.8237)\n",
      "\n",
      "Epoch: [17][162/183]\tTime 1.936 (105.658)\tETA 0:00:40\tTraining Loss 2.9327 (2.8217)\n",
      "\n",
      "Epoch: [17][180/183]\tTime 0.095 (115.550)\tETA 0:00:00\tTraining Loss 2.6508 (2.8186)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.054800  0.103800  0.078600  0.153000  0.954000\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.007000  0.013800  0.013100  0.014700  0.960800\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.044400  0.085100  0.044400  0.985800  0.096200\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.005057  0.009652  0.006481  0.054929  0.909029\n",
      "total(-bg)   0.005310  0.010135  0.006805  0.057675  0.941900\n",
      "\n",
      "Epoch: [18][0/183]\tTime 3.165 (3.165)\tETA 0:09:39\tTraining Loss 3.0006 (3.0006)\n",
      "\n",
      "Epoch: [18][18/183]\tTime 0.170 (14.041)\tETA 0:00:27\tTraining Loss 2.6540 (2.8313)\n",
      "\n",
      "Epoch: [18][36/183]\tTime 0.143 (24.989)\tETA 0:00:21\tTraining Loss 2.7997 (2.8436)\n",
      "\n",
      "Epoch: [18][54/183]\tTime 0.174 (35.885)\tETA 0:00:22\tTraining Loss 2.7723 (2.8290)\n",
      "\n",
      "Epoch: [18][72/183]\tTime 0.126 (48.281)\tETA 0:00:14\tTraining Loss 2.8527 (2.8207)\n",
      "\n",
      "Epoch: [18][90/183]\tTime 0.158 (58.781)\tETA 0:00:14\tTraining Loss 2.7519 (2.8224)\n",
      "\n",
      "Epoch: [18][108/183]\tTime 1.340 (70.820)\tETA 0:01:40\tTraining Loss 2.6640 (2.8159)\n",
      "\n",
      "Epoch: [18][126/183]\tTime 0.156 (80.863)\tETA 0:00:08\tTraining Loss 2.6904 (2.8194)\n",
      "\n",
      "Epoch: [18][144/183]\tTime 0.170 (92.675)\tETA 0:00:06\tTraining Loss 2.7919 (2.8173)\n",
      "\n",
      "Epoch: [18][162/183]\tTime 0.152 (104.043)\tETA 0:00:03\tTraining Loss 2.9410 (2.8154)\n",
      "\n",
      "Epoch: [18][180/183]\tTime 0.089 (114.625)\tETA 0:00:00\tTraining Loss 2.8341 (2.8077)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec   recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.00000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.00000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.00000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.00000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.00000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.00000  0.991200\n",
      "Bus          0.044200  0.084600  0.118200  0.06590  0.975200\n",
      "Car          0.000000  0.000000  0.000000  0.00000  0.982800\n",
      "Cat          0.017400  0.034100  0.033500  0.03490  0.963000\n",
      "Chair        0.000000  0.000000  0.000000  0.00000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.00000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.00000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.00000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.00000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.00000  0.985100\n",
      "Person       0.043300  0.083000  0.043300  0.98720  0.070800\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.00000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.00000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.00000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.00000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.00000  0.994500\n",
      "total        0.004995  0.009605  0.009286  0.05181  0.908933\n",
      "total(-bg)   0.005245  0.010085  0.009750  0.05440  0.941800\n",
      "\n",
      "Epoch: [19][0/183]\tTime 3.611 (3.611)\tETA 0:11:00\tTraining Loss 2.7405 (2.7405)\n",
      "\n",
      "Epoch: [19][18/183]\tTime 0.159 (13.897)\tETA 0:00:26\tTraining Loss 2.9472 (2.7866)\n",
      "\n",
      "Epoch: [19][36/183]\tTime 2.083 (26.594)\tETA 0:05:06\tTraining Loss 2.6525 (2.8094)\n",
      "\n",
      "Epoch: [19][54/183]\tTime 0.183 (37.378)\tETA 0:00:23\tTraining Loss 2.7305 (2.8065)\n",
      "\n",
      "Epoch: [19][72/183]\tTime 2.160 (49.690)\tETA 0:03:59\tTraining Loss 2.7271 (2.7929)\n",
      "\n",
      "Epoch: [19][90/183]\tTime 0.146 (59.962)\tETA 0:00:13\tTraining Loss 2.9106 (2.7955)\n",
      "\n",
      "Epoch: [19][108/183]\tTime 2.174 (76.244)\tETA 0:02:43\tTraining Loss 2.7503 (2.7990)\n",
      "\n",
      "Epoch: [19][126/183]\tTime 0.145 (85.781)\tETA 0:00:08\tTraining Loss 3.0259 (2.8026)\n",
      "\n",
      "Epoch: [19][144/183]\tTime 2.053 (97.980)\tETA 0:01:20\tTraining Loss 2.8301 (2.8070)\n",
      "\n",
      "Epoch: [19][162/183]\tTime 0.190 (108.193)\tETA 0:00:03\tTraining Loss 2.6930 (2.8024)\n",
      "\n",
      "Epoch: [19][180/183]\tTime 0.614 (118.673)\tETA 0:00:01\tTraining Loss 2.7059 (2.8043)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                   IoU       F1      Prec    recall       Acc\n",
      "Background   0.00000  0.00000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.00000  0.00000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.00000  0.00000  0.000000  0.000000  0.996300\n",
      "Bird         0.00000  0.00000  0.000000  0.000000  0.990500\n",
      "Boat         0.00000  0.00000  0.000000  0.000000  0.994500\n",
      "Bottle       0.00000  0.00000  0.000000  0.000000  0.991200\n",
      "Bus          0.02390  0.04670  0.038300  0.060000  0.957400\n",
      "Car          0.00000  0.00000  0.000000  0.000000  0.982800\n",
      "Cat          0.00000  0.00000  0.000600  0.000000  0.980900\n",
      "Chair        0.00000  0.00000  0.000000  0.000000  0.989700\n",
      "Cow          0.00000  0.00000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.00000  0.00000  0.000000  0.000000  0.986500\n",
      "Dog          0.00000  0.00000  0.000000  0.000000  0.979800\n",
      "Horse        0.00000  0.00000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.00000  0.00000  0.000000  0.000000  0.985100\n",
      "Person       0.04350  0.08330  0.043500  0.992600  0.069500\n",
      "Pottedplant  0.00000  0.00000  0.000000  0.000000  0.995900\n",
      "Sheep        0.00000  0.00000  0.000000  0.000000  0.992100\n",
      "Sofa         0.00000  0.00000  0.000000  0.000000  0.985100\n",
      "Train        0.00000  0.00000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.00000  0.00000  0.000000  0.000000  0.994500\n",
      "total        0.00321  0.00619  0.003924  0.050124  0.908876\n",
      "total(-bg)   0.00337  0.00650  0.004120  0.052630  0.941740\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch: [20][0/183]\tTime 2.891 (2.891)\tETA 0:08:49\tTraining Loss 2.6522 (2.6522)\n",
      "\n",
      "Epoch: [20][18/183]\tTime 0.313 (13.573)\tETA 0:00:51\tTraining Loss 2.9118 (2.7896)\n",
      "\n",
      "Epoch: [20][36/183]\tTime 0.262 (24.231)\tETA 0:00:38\tTraining Loss 2.9518 (2.7621)\n",
      "\n",
      "Epoch: [20][54/183]\tTime 0.177 (35.264)\tETA 0:00:22\tTraining Loss 2.6182 (2.7817)\n",
      "\n",
      "Epoch: [20][72/183]\tTime 1.418 (47.299)\tETA 0:02:37\tTraining Loss 2.7268 (2.7877)\n",
      "\n",
      "Epoch: [20][90/183]\tTime 0.553 (58.827)\tETA 0:00:51\tTraining Loss 2.7671 (2.7996)\n",
      "\n",
      "Epoch: [20][108/183]\tTime 0.969 (70.700)\tETA 0:01:12\tTraining Loss 2.9130 (2.8034)\n",
      "\n",
      "Epoch: [20][126/183]\tTime 0.149 (82.564)\tETA 0:00:08\tTraining Loss 2.7112 (2.8017)\n",
      "\n",
      "Epoch: [20][144/183]\tTime 0.146 (92.813)\tETA 0:00:05\tTraining Loss 2.9861 (2.7994)\n",
      "\n",
      "Epoch: [20][162/183]\tTime 0.087 (103.756)\tETA 0:00:01\tTraining Loss 3.0434 (2.7993)\n",
      "\n",
      "Epoch: [20][180/183]\tTime 0.139 (114.155)\tETA 0:00:00\tTraining Loss 3.0297 (2.8026)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.039900  0.076700  0.045200  0.253300  0.894000\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.014100  0.027700  0.064800  0.017600  0.976800\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.046300  0.088400  0.046300  0.975500  0.143100\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.004776  0.009181  0.007443  0.059352  0.909167\n",
      "total(-bg)   0.005015  0.009640  0.007815  0.062320  0.942045\n",
      "\n",
      "Epoch: [21][0/183]\tTime 3.314 (3.314)\tETA 0:10:06\tTraining Loss 2.7788 (2.7788)\n",
      "\n",
      "Epoch: [21][18/183]\tTime 0.178 (15.106)\tETA 0:00:29\tTraining Loss 2.6843 (2.7859)\n",
      "\n",
      "Epoch: [21][36/183]\tTime 2.004 (27.103)\tETA 0:04:54\tTraining Loss 2.6428 (2.7683)\n",
      "\n",
      "Epoch: [21][54/183]\tTime 0.151 (37.470)\tETA 0:00:19\tTraining Loss 2.6557 (2.7862)\n",
      "\n",
      "Epoch: [21][72/183]\tTime 1.492 (49.048)\tETA 0:02:45\tTraining Loss 2.9326 (2.8006)\n",
      "\n",
      "Epoch: [21][90/183]\tTime 0.152 (59.382)\tETA 0:00:14\tTraining Loss 2.8926 (2.8015)\n",
      "\n",
      "Epoch: [21][108/183]\tTime 1.055 (69.917)\tETA 0:01:19\tTraining Loss 3.0455 (2.8000)\n",
      "\n",
      "Epoch: [21][126/183]\tTime 0.126 (81.823)\tETA 0:00:07\tTraining Loss 2.8133 (2.7974)\n",
      "\n",
      "Epoch: [21][144/183]\tTime 0.166 (92.419)\tETA 0:00:06\tTraining Loss 2.8486 (2.7984)\n",
      "\n",
      "Epoch: [21][162/183]\tTime 0.137 (104.889)\tETA 0:00:02\tTraining Loss 2.6107 (2.8019)\n",
      "\n",
      "Epoch: [21][180/183]\tTime 0.162 (113.867)\tETA 0:00:00\tTraining Loss 2.7864 (2.8057)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.039800  0.076500  0.071800  0.082000  0.965600\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.034300  0.066300  0.044300  0.132100  0.930200\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.044500  0.085200  0.044500  0.966000  0.115600\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.005648  0.010857  0.007648  0.056195  0.909048\n",
      "total(-bg)   0.005930  0.011400  0.008030  0.059005  0.941920\n",
      "\n",
      "Epoch: [22][0/183]\tTime 2.770 (2.770)\tETA 0:08:26\tTraining Loss 2.9670 (2.9670)\n",
      "\n",
      "Epoch: [22][18/183]\tTime 0.420 (13.206)\tETA 0:01:09\tTraining Loss 2.9197 (2.8071)\n",
      "\n",
      "Epoch: [22][36/183]\tTime 0.271 (24.046)\tETA 0:00:39\tTraining Loss 2.7641 (2.8011)\n",
      "\n",
      "Epoch: [22][54/183]\tTime 0.159 (36.414)\tETA 0:00:20\tTraining Loss 2.8121 (2.7995)\n",
      "\n",
      "Epoch: [22][72/183]\tTime 1.055 (47.204)\tETA 0:01:57\tTraining Loss 2.8402 (2.8069)\n",
      "\n",
      "Epoch: [22][90/183]\tTime 0.169 (58.983)\tETA 0:00:15\tTraining Loss 2.7525 (2.8064)\n",
      "\n",
      "Epoch: [22][108/183]\tTime 0.168 (69.525)\tETA 0:00:12\tTraining Loss 2.8464 (2.8090)\n",
      "\n",
      "Epoch: [22][126/183]\tTime 0.178 (81.545)\tETA 0:00:10\tTraining Loss 2.6947 (2.8087)\n",
      "\n",
      "Epoch: [22][144/183]\tTime 0.149 (92.202)\tETA 0:00:05\tTraining Loss 2.8309 (2.8077)\n",
      "\n",
      "Epoch: [22][162/183]\tTime 0.178 (104.466)\tETA 0:00:03\tTraining Loss 2.7213 (2.8065)\n",
      "\n",
      "Epoch: [22][180/183]\tTime 0.142 (114.041)\tETA 0:00:00\tTraining Loss 2.6257 (2.8017)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.021600  0.042300  0.139400  0.025000  0.980400\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.000700  0.001400  0.004300  0.000900  0.977400\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.042900  0.082200  0.042900  0.999200  0.049500\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.003105  0.005995  0.008886  0.048814  0.908852\n",
      "total(-bg)   0.003260  0.006295  0.009330  0.051255  0.941715\n",
      "\n",
      "Epoch: [23][0/183]\tTime 2.944 (2.944)\tETA 0:08:58\tTraining Loss 2.7476 (2.7476)\n",
      "\n",
      "Epoch: [23][18/183]\tTime 0.168 (13.113)\tETA 0:00:27\tTraining Loss 2.8381 (2.7885)\n",
      "\n",
      "Epoch: [23][36/183]\tTime 1.360 (24.490)\tETA 0:03:19\tTraining Loss 2.7668 (2.7907)\n",
      "\n",
      "Epoch: [23][54/183]\tTime 0.217 (35.247)\tETA 0:00:28\tTraining Loss 3.0258 (2.7968)\n",
      "\n",
      "Epoch: [23][72/183]\tTime 0.147 (45.921)\tETA 0:00:16\tTraining Loss 3.1186 (2.7979)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch: [23][90/183]\tTime 0.099 (58.302)\tETA 0:00:09\tTraining Loss 2.7949 (2.7950)\n",
      "\n",
      "Epoch: [23][108/183]\tTime 0.223 (68.846)\tETA 0:00:16\tTraining Loss 2.8478 (2.7913)\n",
      "\n",
      "Epoch: [23][126/183]\tTime 0.154 (81.255)\tETA 0:00:08\tTraining Loss 2.7313 (2.8020)\n",
      "\n",
      "Epoch: [23][144/183]\tTime 0.174 (91.790)\tETA 0:00:06\tTraining Loss 2.7113 (2.8009)\n",
      "\n",
      "Epoch: [23][162/183]\tTime 0.188 (102.719)\tETA 0:00:03\tTraining Loss 2.8308 (2.8003)\n",
      "\n",
      "Epoch: [23][180/183]\tTime 0.156 (112.673)\tETA 0:00:00\tTraining Loss 2.7725 (2.8004)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU       F1      Prec    recall       Acc\n",
      "Background   0.000000  0.00000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.00000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.00000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.00000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.00000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.00000  0.000000  0.000000  0.991200\n",
      "Bus          0.040300  0.07740  0.083700  0.072200  0.970100\n",
      "Car          0.000000  0.00000  0.000000  0.000000  0.982800\n",
      "Cat          0.001800  0.00350  0.022600  0.001900  0.979700\n",
      "Chair        0.000000  0.00000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.00000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.00000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.00000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.00000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.00000  0.000000  0.000000  0.985100\n",
      "Person       0.043100  0.08270  0.043100  0.995400  0.058800\n",
      "Pottedplant  0.000000  0.00000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.00000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.00000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.00000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.00000  0.000000  0.000000  0.994500\n",
      "total        0.004057  0.00779  0.007114  0.050929  0.908914\n",
      "total(-bg)   0.004260  0.00818  0.007470  0.053475  0.941780\n",
      "\n",
      "Epoch: [24][0/183]\tTime 2.794 (2.794)\tETA 0:08:31\tTraining Loss 2.8316 (2.8316)\n",
      "\n",
      "Epoch: [24][18/183]\tTime 0.420 (13.541)\tETA 0:01:09\tTraining Loss 2.7578 (2.7661)\n",
      "\n",
      "Epoch: [24][36/183]\tTime 0.403 (24.766)\tETA 0:00:59\tTraining Loss 2.9211 (2.7740)\n",
      "\n",
      "Epoch: [24][54/183]\tTime 0.156 (36.610)\tETA 0:00:20\tTraining Loss 2.7983 (2.7769)\n",
      "\n",
      "Epoch: [24][72/183]\tTime 0.864 (46.993)\tETA 0:01:35\tTraining Loss 2.7198 (2.7664)\n",
      "\n",
      "Epoch: [24][90/183]\tTime 0.188 (57.841)\tETA 0:00:17\tTraining Loss 2.6204 (2.7797)\n",
      "\n",
      "Epoch: [24][108/183]\tTime 1.177 (68.941)\tETA 0:01:28\tTraining Loss 2.8863 (2.7917)\n",
      "\n",
      "Epoch: [24][126/183]\tTime 1.245 (80.078)\tETA 0:01:10\tTraining Loss 2.9017 (2.7838)\n",
      "\n",
      "Epoch: [24][144/183]\tTime 1.034 (91.405)\tETA 0:00:40\tTraining Loss 2.8700 (2.7894)\n",
      "\n",
      "Epoch: [24][162/183]\tTime 0.164 (101.982)\tETA 0:00:03\tTraining Loss 2.8295 (2.7894)\n",
      "\n",
      "Epoch: [24][180/183]\tTime 0.734 (113.155)\tETA 0:00:02\tTraining Loss 2.7908 (2.7884)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.021300  0.041700  0.071900  0.029400  0.976500\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.024400  0.047600  0.054000  0.042700  0.968000\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.043200  0.082800  0.043200  0.991500  0.063800\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.004233  0.008195  0.008052  0.050648  0.908900\n",
      "total(-bg)   0.004445  0.008605  0.008455  0.053180  0.941765\n",
      "\n",
      "Epoch: [25][0/183]\tTime 2.390 (2.390)\tETA 0:07:17\tTraining Loss 2.8768 (2.8768)\n",
      "\n",
      "Epoch: [25][18/183]\tTime 0.133 (14.049)\tETA 0:00:21\tTraining Loss 2.9221 (2.7826)\n",
      "\n",
      "Epoch: [25][36/183]\tTime 0.127 (24.637)\tETA 0:00:18\tTraining Loss 2.8489 (2.8005)\n",
      "\n",
      "Epoch: [25][54/183]\tTime 0.173 (36.743)\tETA 0:00:22\tTraining Loss 2.6792 (2.8017)\n",
      "\n",
      "Epoch: [25][72/183]\tTime 0.182 (47.176)\tETA 0:00:20\tTraining Loss 2.7203 (2.7991)\n",
      "\n",
      "Epoch: [25][90/183]\tTime 0.122 (58.263)\tETA 0:00:11\tTraining Loss 2.6900 (2.7939)\n",
      "\n",
      "Epoch: [25][108/183]\tTime 0.183 (69.740)\tETA 0:00:13\tTraining Loss 2.7124 (2.7959)\n",
      "\n",
      "Epoch: [25][126/183]\tTime 0.149 (80.723)\tETA 0:00:08\tTraining Loss 2.9733 (2.7891)\n",
      "\n",
      "Epoch: [25][144/183]\tTime 0.149 (91.551)\tETA 0:00:05\tTraining Loss 2.6026 (2.7910)\n",
      "\n",
      "Epoch: [25][162/183]\tTime 0.167 (104.019)\tETA 0:00:03\tTraining Loss 2.9363 (2.7885)\n",
      "\n",
      "Epoch: [25][180/183]\tTime 0.084 (113.439)\tETA 0:00:00\tTraining Loss 2.8959 (2.7854)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.056100  0.106100  0.087300  0.135400  0.960300\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.038600  0.074300  0.054400  0.117200  0.945200\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.044300  0.084900  0.044400  0.971300  0.107600\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.006619  0.012633  0.008862  0.058281  0.909129\n",
      "total(-bg)   0.006950  0.013265  0.009305  0.061195  0.942005\n",
      "\n",
      "Epoch: [26][0/183]\tTime 3.622 (3.622)\tETA 0:11:02\tTraining Loss 2.6934 (2.6934)\n",
      "\n",
      "Epoch: [26][18/183]\tTime 0.125 (14.249)\tETA 0:00:20\tTraining Loss 2.6777 (2.7963)\n",
      "\n",
      "Epoch: [26][36/183]\tTime 1.730 (26.339)\tETA 0:04:14\tTraining Loss 2.7556 (2.7990)\n",
      "\n",
      "Epoch: [26][54/183]\tTime 0.180 (36.422)\tETA 0:00:23\tTraining Loss 2.7642 (2.8027)\n",
      "\n",
      "Epoch: [26][72/183]\tTime 1.832 (48.152)\tETA 0:03:23\tTraining Loss 2.7931 (2.8017)\n",
      "\n",
      "Epoch: [26][90/183]\tTime 0.763 (58.966)\tETA 0:01:10\tTraining Loss 2.6596 (2.8046)\n",
      "\n",
      "Epoch: [26][108/183]\tTime 0.148 (69.907)\tETA 0:00:11\tTraining Loss 2.9446 (2.8002)\n",
      "\n",
      "Epoch: [26][126/183]\tTime 1.988 (82.019)\tETA 0:01:53\tTraining Loss 2.8152 (2.7971)\n",
      "\n",
      "Epoch: [26][144/183]\tTime 0.140 (92.707)\tETA 0:00:05\tTraining Loss 2.8466 (2.7930)\n",
      "\n",
      "Epoch: [26][162/183]\tTime 2.339 (105.786)\tETA 0:00:49\tTraining Loss 2.8974 (2.7963)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch: [26][180/183]\tTime 0.088 (114.320)\tETA 0:00:00\tTraining Loss 2.6941 (2.7909)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.006800  0.013400  0.149200  0.007000  0.982000\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.000000  0.000000  0.000000  0.000000  0.981100\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.042700  0.081800  0.042700  0.999800  0.043500\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.002357  0.004533  0.009138  0.047943  0.908819\n",
      "total(-bg)   0.002475  0.004760  0.009595  0.050340  0.941680\n",
      "\n",
      "Epoch: [27][0/183]\tTime 2.827 (2.827)\tETA 0:08:37\tTraining Loss 2.8133 (2.8133)\n",
      "\n",
      "Epoch: [27][18/183]\tTime 0.671 (13.413)\tETA 0:01:50\tTraining Loss 2.6946 (2.7846)\n",
      "\n",
      "Epoch: [27][36/183]\tTime 1.346 (25.152)\tETA 0:03:17\tTraining Loss 2.8870 (2.7904)\n",
      "\n",
      "Epoch: [27][54/183]\tTime 0.690 (36.109)\tETA 0:01:28\tTraining Loss 2.9218 (2.7899)\n",
      "\n",
      "Epoch: [27][72/183]\tTime 1.539 (48.317)\tETA 0:02:50\tTraining Loss 2.7365 (2.7821)\n",
      "\n",
      "Epoch: [27][90/183]\tTime 1.974 (59.887)\tETA 0:03:03\tTraining Loss 2.8774 (2.7743)\n",
      "\n",
      "Epoch: [27][108/183]\tTime 0.156 (70.726)\tETA 0:00:11\tTraining Loss 2.9071 (2.7846)\n",
      "\n",
      "Epoch: [27][126/183]\tTime 1.671 (82.546)\tETA 0:01:35\tTraining Loss 2.7577 (2.7872)\n",
      "\n",
      "Epoch: [27][144/183]\tTime 0.222 (92.958)\tETA 0:00:08\tTraining Loss 2.8240 (2.7859)\n",
      "\n",
      "Epoch: [27][162/183]\tTime 2.014 (104.892)\tETA 0:00:42\tTraining Loss 2.7091 (2.7871)\n",
      "\n",
      "Epoch: [27][180/183]\tTime 0.096 (113.525)\tETA 0:00:00\tTraining Loss 2.6001 (2.7830)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.042400  0.081300  0.053900  0.166400  0.934700\n",
      "Car          0.000000  0.000000  0.000000  0.000000  0.982800\n",
      "Cat          0.017400  0.034100  0.085200  0.021300  0.977300\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.000000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.044700  0.085500  0.044700  0.987500  0.100000\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.004976  0.009567  0.008752  0.055962  0.909076\n",
      "total(-bg)   0.005225  0.010045  0.009190  0.058760  0.941950\n",
      "\n",
      "Epoch: [28][0/183]\tTime 2.772 (2.772)\tETA 0:08:27\tTraining Loss 2.7349 (2.7349)\n",
      "\n",
      "Epoch: [28][18/183]\tTime 0.168 (13.531)\tETA 0:00:27\tTraining Loss 2.8216 (2.7689)\n",
      "\n",
      "Epoch: [28][36/183]\tTime 0.789 (24.834)\tETA 0:01:56\tTraining Loss 2.7561 (2.7609)\n",
      "\n",
      "Epoch: [28][54/183]\tTime 0.169 (36.900)\tETA 0:00:21\tTraining Loss 2.8105 (2.7526)\n",
      "\n",
      "Epoch: [28][72/183]\tTime 0.162 (47.906)\tETA 0:00:18\tTraining Loss 2.8631 (2.7596)\n",
      "\n",
      "Epoch: [28][90/183]\tTime 2.101 (61.400)\tETA 0:03:15\tTraining Loss 2.7151 (2.7768)\n",
      "\n",
      "Epoch: [28][108/183]\tTime 0.172 (72.182)\tETA 0:00:12\tTraining Loss 2.6365 (2.7813)\n",
      "\n",
      "Epoch: [28][126/183]\tTime 1.905 (82.979)\tETA 0:01:48\tTraining Loss 2.7363 (2.7789)\n",
      "\n",
      "Epoch: [28][144/183]\tTime 0.171 (94.310)\tETA 0:00:06\tTraining Loss 2.5534 (2.7740)\n",
      "\n",
      "Epoch: [28][162/183]\tTime 0.198 (105.123)\tETA 0:00:04\tTraining Loss 2.8647 (2.7763)\n",
      "\n",
      "Epoch: [28][180/183]\tTime 0.071 (115.986)\tETA 0:00:00\tTraining Loss 3.0388 (2.7815)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU        F1      Prec    recall       Acc\n",
      "Background   0.000000  0.000000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.000000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.000000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.000000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.000000  0.000000  0.000000  0.991200\n",
      "Bus          0.009200  0.018200  0.053100  0.011000  0.979400\n",
      "Car          0.000200  0.000400  0.117800  0.000200  0.982800\n",
      "Cat          0.024800  0.048300  0.032300  0.095700  0.929200\n",
      "Chair        0.000000  0.000000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.000000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.000000  0.000000  0.000000  0.986500\n",
      "Dog          0.010900  0.021500  0.044200  0.014300  0.973900\n",
      "Horse        0.000000  0.000000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Person       0.044200  0.084600  0.044300  0.970100  0.105800\n",
      "Pottedplant  0.000000  0.000000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.000000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.000000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.000000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.000000  0.000000  0.000000  0.994500\n",
      "total        0.004252  0.008238  0.013890  0.051967  0.908910\n",
      "total(-bg)   0.004465  0.008650  0.014585  0.054565  0.941775\n",
      "\n",
      "Epoch: [29][0/183]\tTime 2.993 (2.993)\tETA 0:09:07\tTraining Loss 2.6584 (2.6584)\n",
      "\n",
      "Epoch: [29][18/183]\tTime 0.416 (13.952)\tETA 0:01:08\tTraining Loss 2.8309 (2.7605)\n",
      "\n",
      "Epoch: [29][36/183]\tTime 1.916 (26.796)\tETA 0:04:41\tTraining Loss 2.7161 (2.7605)\n",
      "\n",
      "Epoch: [29][54/183]\tTime 0.176 (36.619)\tETA 0:00:22\tTraining Loss 2.9567 (2.7854)\n",
      "\n",
      "Epoch: [29][72/183]\tTime 1.947 (49.306)\tETA 0:03:36\tTraining Loss 2.6504 (2.7821)\n",
      "\n",
      "Epoch: [29][90/183]\tTime 0.195 (60.678)\tETA 0:00:18\tTraining Loss 2.7218 (2.7770)\n",
      "\n",
      "Epoch: [29][108/183]\tTime 1.999 (73.774)\tETA 0:02:29\tTraining Loss 2.7986 (2.7763)\n",
      "\n",
      "Epoch: [29][126/183]\tTime 0.755 (84.125)\tETA 0:00:43\tTraining Loss 2.6513 (2.7749)\n",
      "\n",
      "Epoch: [29][144/183]\tTime 0.835 (95.052)\tETA 0:00:32\tTraining Loss 2.9900 (2.7767)\n",
      "\n",
      "Epoch: [29][162/183]\tTime 2.218 (107.564)\tETA 0:00:46\tTraining Loss 2.7449 (2.7758)\n",
      "\n",
      "Epoch: [29][180/183]\tTime 0.085 (116.576)\tETA 0:00:00\tTraining Loss 2.5966 (2.7777)\n",
      "______________________________________________________________________________________________________________________________________________________________________________________\n",
      "Validation stats                    IoU       F1      Prec    recall       Acc\n",
      "Background   0.000000  0.00000  0.000000  0.000000  0.251600\n",
      "Aeroplane    0.000000  0.00000  0.000000  0.000000  0.993400\n",
      "Bicycle      0.000000  0.00000  0.000000  0.000000  0.996300\n",
      "Bird         0.000000  0.00000  0.000000  0.000000  0.990500\n",
      "Boat         0.000000  0.00000  0.000000  0.000000  0.994500\n",
      "Bottle       0.000000  0.00000  0.000000  0.000000  0.991200\n",
      "Bus          0.021200  0.04140  0.038100  0.045500  0.963400\n",
      "Car          0.000000  0.00000  0.000000  0.000000  0.982800\n",
      "Cat          0.000600  0.00120  0.028800  0.000600  0.980800\n",
      "Chair        0.000000  0.00000  0.000000  0.000000  0.989700\n",
      "Cow          0.000000  0.00000  0.000000  0.000000  0.990900\n",
      "Diningtable  0.000000  0.00000  0.000000  0.000000  0.986500\n",
      "Dog          0.000000  0.00000  0.000000  0.000000  0.979800\n",
      "Horse        0.000000  0.00000  0.000000  0.000000  0.991400\n",
      "Motorbike    0.000000  0.00000  0.000000  0.000000  0.985100\n",
      "Person       0.043400  0.08320  0.043400  0.997100  0.063600\n",
      "Pottedplant  0.000000  0.00000  0.000000  0.000000  0.995900\n",
      "Sheep        0.000000  0.00000  0.000000  0.000000  0.992100\n",
      "Sofa         0.000000  0.00000  0.000000  0.000000  0.985100\n",
      "Train        0.000000  0.00000  0.000000  0.000000  0.987300\n",
      "Tvmonitor    0.000000  0.00000  0.000000  0.000000  0.994500\n",
      "total        0.003105  0.00599  0.005252  0.049676  0.908876\n",
      "total(-bg)   0.003260  0.00629  0.005515  0.052160  0.941740\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training done. Model saved (seg_model_gpu[0, 1, 2, 3]_n30_bs8_lr0.001.pkl).\n"
     ]
    }
   ],
   "source": [
    "run_id = 'seg_model_gpu{}_n{}_bs{}_lr{}'.format(gpu_id, epochs, batch_size, learning_rate); print('\\n\\nTraining', run_id)\n",
    "save_path = run_id + '.pkl'\n",
    "\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n",
    "#optimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=learning_rate)\n",
    "\n",
    "metrics = Metrics(train_loader.dataset.num_classes, train_loader.dataset.class_names)\n",
    "\n",
    "# Used to keep track of statistics\n",
    "class AverageMeter(object):\n",
    "    def __init__(self):\n",
    "        self.val = 0; self.avg = 0; self.sum = 0; self.count = 0\n",
    "    def update(self, val, n=1):\n",
    "        self.val = val\n",
    "        self.sum += val * n\n",
    "        self.count += n\n",
    "        self.avg = self.sum / self.count\n",
    "\n",
    "REPORTS_PER_EPOCH = 10\n",
    "ITER_PER_EPOCH = len(train_loader)\n",
    "ITER_PER_REPORT = ITER_PER_EPOCH//REPORTS_PER_EPOCH\n",
    "\n",
    "\n",
    "\n",
    "for epoch in range(epochs):\n",
    "    model.train()\n",
    "\n",
    "    # Progress reporting\n",
    "    batch_time = AverageMeter()\n",
    "    losses = AverageMeter()\n",
    "    N = len(train_loader)\n",
    "    end = time.time()\n",
    "\n",
    "    for i, (sample) in enumerate(train_loader):\n",
    "        \n",
    "       \n",
    "        # Load a batch and send it to GPU\n",
    "        x = sample['image'].float().cuda()\n",
    "        y = sample['label'].float().cuda()\n",
    "        #y = sample['label'].cuda()\n",
    "        # Forward pass: compute predicted y by passing x to the model.\n",
    "        \n",
    "        y_pred = model(x)\n",
    "        # Compute and print loss.\n",
    "        \n",
    "        loss = loss_fn(y_pred, y)\n",
    "\n",
    "        # Record loss\n",
    "        losses.update(loss.data.item(), x.size(0))\n",
    "\n",
    "        # Before the backward pass, use the optimizer object to zero all of the\n",
    "        # gradients for the variables it will update (which are the learnable\n",
    "        # weights of the model).\n",
    "        optimizer.zero_grad()\n",
    "        \n",
    "\n",
    "        # Backward pass: compute gradient of the loss with respect to model parameters\n",
    "        loss.backward()\n",
    "\n",
    "        # Calling the step function on an Optimizer makes an update to its parameters\n",
    "        optimizer.step()\n",
    "\n",
    "        # Measure elapsed time\n",
    "        batch_time.update(time.time() - end)\n",
    "        end = time.time()\n",
    "        eta = str(datetime.timedelta(seconds=int(batch_time.val*(N - i))))\n",
    "\n",
    "        # Log training progress\n",
    "        if i % ITER_PER_REPORT == 0:\n",
    "            print('\\nEpoch: [{0}][{1}/{2}]\\t' 'Time {batch_time.val:.3f} ({batch_time.sum:.3f})\\t' 'ETA {eta}\\t'\n",
    "             'Training Loss {loss.val:.4f} ({loss.avg:.4f})'.format(epoch, i, N, batch_time=batch_time, loss=losses, eta=eta))\n",
    "        elif i % (ITER_PER_REPORT) == 0:\n",
    "            print('.', end='')\n",
    "\n",
    "        #break # useful for quick debugging\n",
    "    torch.cuda.empty_cache(); del x, y; gc.collect()\n",
    "\n",
    "    # Validation after each epoch\n",
    "    model.eval()\n",
    "    metrics.reset()\n",
    "    for i, (sample) in enumerate(valid_loader):\n",
    "        x, y = sample['image'].float().cuda(), sample['label'].numpy()\n",
    "        with torch.no_grad():\n",
    "            y_pred = model(x)\n",
    "            y_pred = torch.argmax(y_pred, dim=1) # get the most likely prediction\n",
    "\n",
    "        metrics.add_batch(y, y_pred.detach().cpu().numpy())\n",
    "        print('_', end='')\n",
    "    print('\\nValidation stats ', metrics.get_table())\n",
    "\n",
    "\n",
    "# Save model\n",
    "torch.save(model.state_dict(), save_path)\n",
    "print('\\nTraining done. Model saved ({}).'.format(save_path))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization  [2 points]\n",
    "Use the `decode_segmap` function to visualize images and their segmentation. The images must be from the validation set.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = iter(valid_loader).next()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = create_model_gpu()\n",
    "model.load_state_dict(torch.load('seg_model_gpu[0, 1, 2, 3]_n100_bs16_lr0.001.pkl'))\n",
    "model.eval() # set to evaluation mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = sample['image'].float().cuda()\n",
    "y_pred, y = model(x), sample['label'].numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "figure(figsize=(9,9)); imshow(torchvision.utils.make_grid(sample['image'], padding=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img = io.imread('VOC2012/JPEGImages/2007_000042.jpg')\n",
    "print(img.shape)\n",
    "figure(figsize=(9,9)); imshow(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lbl = io.imread('VOC2012/SegmentationClass/2007_000042.png')\n",
    "figure(figsize=(9,9)); imshow(lbl[:,:,0:4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "label = encode_segmap(lbl[:,:,:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "label[290][:]\n",
    "label.shape\n",
    "lbl.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "decode_segmap(y[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = torch.argmax(y_pred, dim=1)\n",
    "y_pred = y_pred.cpu().detach().numpy()\n",
    "decode_segmap(y_pred[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from skimage import io, transform\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "lbl = io.imread('VOC2012/SegmentationClass/2007_000032.png')\n",
    "plt.imshow(b); plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from skimage import io, transform\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "img = io.imread('VOC2012/JPEGImages/2007_000032.jpg')\n",
    "plt.imshow(img); plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "machine_shape": "hm",
   "name": "Project_Depth_Estimate_good.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
