{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import glob\n",
    "from collections import OrderedDict,defaultdict\n",
    "import pipes\n",
    "import pprint\n",
    "import tempfile\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "root_dir = 'K562_Chen_data'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "####Fixed length 1e6 = 100 blocks. \n",
    "####Fixed length 5e5 = 200 blocks. \n",
    "Fixed_length = 2e6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def binary_locate(array,ele,start,end):\n",
    "    middle = (end+start)//2\n",
    "    if(end-start>1):\n",
    "        if(array[middle]<ele):\n",
    "            return binary_locate(array,ele,middle,end)\n",
    "        elif(array[middle+1]>ele):\n",
    "            return binary_locate(array,ele,start,middle)\n",
    "        else:\n",
    "            return middle,middle+1\n",
    "    else:\n",
    "        return middle,middle+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "p = pipes.Template()\n",
    "p.append(\"zcat\", '--')\n",
    "Gene_Loc = defaultdict(list)\n",
    "f = p.open('/home/longy/cnda/ensembl/Homo_sapiens.GRCh38.102.gtf.gz', 'r')\n",
    "\n",
    "#f = p.open('/home/longy/cnda/ensembl/Mus_musculus.GRCm38.102.gtf.gz', 'r')\n",
    "for line in f.readlines():\n",
    "    if re.match('^#',line):\n",
    "        continue\n",
    "    line = line.rstrip('\\n')\n",
    "    data = line.split('\\t')\n",
    "    if(data[2] == 'gene'):\n",
    "        Gene_Loc['chr'+data[0]+data[6]].append(int(data[3]))\n",
    "        Gene_Loc['chr'+data[0]+data[6]].append(int(data[4]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1527, 1528)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sys\n",
    "sys.setrecursionlimit(10000)\n",
    "array = Gene_Loc['chr1+']\n",
    "binary_locate(array,46104790,0,3505)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing file K562_Chen_data/Blocks/chr2_-_0_39346-37232258\n",
      "writing file K562_Chen_data/Blocks/chr2_-_1_37249111-65378864\n",
      "writing file K562_Chen_data/Blocks/chr2_-_2_65380606-96845139\n",
      "writing file K562_Chen_data/Blocks/chr2_-_3_96847476-131194578\n"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "files = glob.glob(root_dir+\"/*.txt\")\n",
    "info = open(root_dir+'/Blocks/info.txt','w')\n",
    "info.write('ID\\tstart\\tend\\tlength\\tsites_num\\n')\n",
    "for file in files:\n",
    "    num_lines = sum(1 for line in open(file))\n",
    "    num_blocks = round(num_lines/Fixed_length)\n",
    "    len_blocks = num_lines/num_blocks\n",
    "    \n",
    "    f= open(file,'r')\n",
    "    pre_pos = 0\n",
    "    dict_line = OrderedDict()\n",
    "    #dict_line = dict()\n",
    "    count = 0\n",
    "    separate_num=0\n",
    "    save_block = 0\n",
    "    start = 0\n",
    "    \n",
    "    for i, line in enumerate(f):\n",
    "        line = line.rstrip('\\n')\n",
    "        if(i==0):\n",
    "            continue ###Skip header\n",
    "        chromosome,pos,strand = line.split('\\t')[0].split(':')\n",
    "        pos = int(pos)\n",
    "        count += 1\n",
    "        if(i==1):\n",
    "            start=pos\n",
    "        if(count>len_blocks and pos-pre_pos>1000 and save_block<num_blocks-1):\n",
    "            array = Gene_Loc[chromosome+strand]\n",
    "            index1,index2 = binary_locate(array,pre_pos,0,len(array)-1)\n",
    "            if(index1%2==1 and index2%2==0):\n",
    "                ww = open(root_dir+'/Blocks/%s_%s_%d'%(chromosome,strand,save_block),'w')\n",
    "                print('writing file '+root_dir+'/Blocks/%s_%s_%d_%d-%d'%(chromosome,strand,save_block,start,pre_pos))\n",
    "                info.write('%s_%s_%d\\t%d\\t%d\\t%d\\t%d\\n'%(chromosome,strand,save_block,start,pre_pos,pre_pos-start,count))\n",
    "                #print('%s_%s_%d\\t%d\\t%d\\t%d\\t%d\\n'%(chromosome,strand,save_block,start,pre_pos,pre_pos-start,count))\n",
    "                for key,val in dict_line.items():\n",
    "                    ww.write('%s\\n'%val)\n",
    "                ww.close()\n",
    "                dict_line.clear()\n",
    "                count = 0\n",
    "                save_block += 1\n",
    "                start  = pos\n",
    "            \n",
    "        \n",
    "        dict_line[pos] = line\n",
    "        pre_pos = pos\n",
    "        \n",
    "    out = open(root_dir+'/Blocks/%s_%s_%d'%(chromosome,strand,save_block),'w')\n",
    "    print('writing file '+root_dir+'/Blocks/%s_%s_%d_%d-%d'%(chromosome,strand,save_block,start,pre_pos))\n",
    "    info.write('%s_%s_%d\\t%d\\t%d\\t%d\\t%d\\n'%(chromosome,strand,save_block,start,pre_pos,pre_pos-start,count))\n",
    "    for key,val in dict_line.items():\n",
    "        out.write('%s\\n'%(val))\n",
    "    out.close()\n",
    "\n",
    "info.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
