#!/usr/bin/perl -w
my %pas_type;
open FILE,"tianbin_data/bl6.pAs.raw.tianbin.txt";
<FILE>;
while(<FILE>){
	chomp;
	my ($pas_id,$pas_type,$chr,$pos,$strand,$symbol) = split;
	if($pas_type eq "3'UTR(M)" || $pas_type eq "3'UTR(F)"){
		$pas_type = "tandemUTR";
	}
	elsif($pas_type eq "3'UTR(L)" || $pas_type eq "3'UTR(S)"){
		$pas_type = "terminal";
	}
	else{
		$pas_type = "Non_tandemUTR";
	}
	
	$pas_type{$pas_id} = "$pas_type\t$chr\t$pos\t$strand\t$symbol";
}

open FILE,"polyA_seq/pAs_tianbin_2.info";
<FILE>;
my %total;
while(<FILE>){
	chomp;
	my ($pas_id,$chr,$pos,$strand,$rep1,$rep2) = (split)[0,1,4,5,6,7];
	my $ave = ($rep1+$rep2)/2;
	next if $pas_id =~ /na/;
	next if $pas_id =~ /NO/;
	#if($ave >0){
		my ($gene_id) = split /\./,$pas_id;
		$total{$gene_id} += $ave;
		#}
}

my %filter;
open FILE,"tianbin_data/bl6.pAs.tianbin.txt";
while(<FILE>){
	chomp;
	my ($pas_id,$pas_type,$chr,$pos,$strand,$symbol) = split;
	my @data = split;
	my $before = &TrimmedMean(@data[8..108]);
	my $after = &TrimmedMean(@data[109..$#data]);
	my $ave = ($before+$after)/2;
	my $diff = $before-$after;
	my $ave_diff = $diff/$ave;
	$filter{"$chr:$pos:$strand"} = "$pas_type\t$ave_diff";
}



open FILE,"polyA_seq/pAs_tianbin_2.info";
<FILE>;
open OUT,">polyA_seq/pAs_tianbin.info.cutoff";
print OUT "pas_id\tpas_type\tchr\tposition\tstrand\tsymbol\tusage\treadCount\tmotif\tave_diff\n";
while(<FILE>){
	chomp;
	my ($pas_id,$chr,$pos,$strand,$rep1,$rep2) = (split)[0,1,4,5,6,7];
	my $ave = ($rep1+$rep2)/2;
	#next if $pas_id =~ /na/;
	#next if $pas_id =~ /NO/;
	#next if !exists $pas_type{"$chr:$pos:$strand"};
	#next if $ave <10;
	my ($gene_id) = split /\./,$pas_id;
	my $usage = $total{$gene_id}>0 ? $ave/$total{$gene_id} : 0;;
	#if($usage>0.1 && exists $filter{"$chr:$pos:$strand"}){
		my $motif = $filter{"$chr:$pos:$strand"};
		print OUT "$pas_id\t$pas_type{$pas_id}\t$usage\t$ave\t$motif\n";
	}
}


sub TrimmedMean{
	my @data = @_;
	my $sum = 0;
	my $count = 0;
	foreach my $ele (@data){
		if($ele>0){
			$sum += $ele;
			$count++;
		}
	}
	my $ave = $count>0 ? $sum/$count : 0;
	return $ave;
}
