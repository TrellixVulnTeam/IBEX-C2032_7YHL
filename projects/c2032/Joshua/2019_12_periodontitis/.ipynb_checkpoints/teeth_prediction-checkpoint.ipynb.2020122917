{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 484,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-17T13:15:19.506460Z",
     "start_time": "2019-12-17T13:15:19.467365Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn import datasets\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import numpy as np\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "def get_data(data):\n",
    "    DATA=data\n",
    "    X=[]\n",
    "    Y=[]\n",
    "    teeths=['11','12','13','14','15','16','17','18','21','22','23','24','25','26','27','28','31','32','33','34','35','36','37','38','41','42','43','44','45','46','47','48']\n",
    "    #teeths=['11','12','13','14','15','21','22','23','24','25','31','32','33','34','35','41','42','43','44','45']\n",
    "    periodontitis=['l','m','h','note1']\n",
    "\n",
    "    for key in DATA.keys():\n",
    "        try:\n",
    "            cl=DATA[key]['class']\n",
    "            \n",
    "            \n",
    "            ratio = np.zeros((32))\n",
    "            new_teeths=DATA[key].keys()\n",
    "            new_teeths=list(new_teeths)\n",
    "            new_teeths.remove('class')\n",
    "            for tooth in new_teeths:\n",
    "                #有些样本中牙的数量太少\n",
    "                if(len(new_teeths) == 1): \n",
    "                    continue\n",
    "                else:\n",
    "                    #有些样本中的牙的ratio为NaN，无法计算，continue\n",
    "                    if(math.isnan(DATA[key][tooth][2])):\n",
    "                        continue\n",
    "                    ratio[list(new_teeths).index(tooth)] = DATA[key][tooth][2]\n",
    "                    #ratio.append(distance_data[i][tooth][2])\n",
    "\n",
    "\n",
    "            #如果样本中的牙的数量小于32，则用插值的办法（第一个和第二个的mean，依此类推）来补充，直到向量长度为32\n",
    "            #将每个牙都根据周围的牙齿来进行插值，输出的顺序按照牙齿的标号顺序\n",
    "            for j in range(0,len(ratio)):\n",
    "                if(ratio.all() > 0):\n",
    "                    break\n",
    "                if(ratio[j] > 0):\n",
    "                    continue\n",
    "                elif(j == 0 and ratio[j+1] > 0 and ratio[j+2] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j+2])/2\n",
    "                elif(j == len(ratio) - 1 and  ratio[j-1] > 0 and ratio[j-2] > 0):\n",
    "                    ratio[j] = (ratio[j-1] + ratio[j-2])/2\n",
    "                elif(j > 0 and j < len(ratio) - 1 and ratio[j+1] > 0 and ratio[j-1] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j - 1])/2\n",
    "                else:\n",
    "                    ratio[j] = (np.random.choice(ratio[np.where(ratio > 0)],1)+np.random.choice(ratio[np.where(ratio > 0)],1))/2\n",
    "            X.append(ratio.tolist()) \n",
    "            \"\"\"\n",
    "            \n",
    "            tmp=[]\n",
    "            for teeth_id in teeths:\n",
    "                try:\n",
    "                    if math.isnan(DATA[key][teeth_id][2]):\n",
    "                        tmp.append(0)\n",
    "                    else:\n",
    "                        tmp.append(DATA[key][teeth_id][2])\n",
    "                except:\n",
    "                    tmp.append(0)\n",
    "            X.append(tmp)\n",
    "            \"\"\"\n",
    "                \n",
    "            if cl=='note1':\n",
    "                Y.append(1)\n",
    "            elif cl=='l':\n",
    "                Y.append(1)\n",
    "            elif cl=='m':\n",
    "                Y.append(2)\n",
    "            elif cl=='h':\n",
    "                Y.append(3)\n",
    "\n",
    "        except:\n",
    "            pass\n",
    "    \n",
    "    \n",
    "    from imblearn.over_sampling import SMOTE\n",
    "    smo = SMOTE(random_state=5)\n",
    "    X_smo, Y_smo = smo.fit_sample(X, Y)\n",
    "    \n",
    "    \n",
    "    tmp_data=[[X_smo[i],Y_smo[i]] for i in range(len(Y_smo))]\n",
    "    import random\n",
    "    random.shuffle(tmp_data)\n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "\n",
    "    \n",
    "    \"\"\"\n",
    "    tmp_data=[[X[i],Y[i]] for i in range(len(Y))]\n",
    "    import random\n",
    "    random.shuffle(tmp_data)\n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    \"\"\"\n",
    "    \n",
    "    return X_train,Y_train,X_val,Y_val\n",
    "\n",
    "def get_small_class_acc_f1(Y,pred):\n",
    "    small_class=[0,1,2,3]\n",
    "    output=[]\n",
    "\n",
    "    for key in small_class:\n",
    "\n",
    "        TP=0\n",
    "        TN=0\n",
    "        FP=0\n",
    "        FN=0\n",
    "\n",
    "        for i in range(len(Y)):\n",
    "            if Y[i]==pred[i]==int(key):\n",
    "                TP+=1\n",
    "            elif (Y[i]!=int(key))&(pred[i]==int(key)):\n",
    "                FP+=1\n",
    "            elif (Y[i]==int(key))&(pred[i]!=int(key)):\n",
    "                FN+=1\n",
    "            elif (Y[i]!=int(key))&(pred[i]!=int(key)):\n",
    "                TN+=1\n",
    "\n",
    "        try:\n",
    "            f1=2*TP/(2*TP+FP+FN)\n",
    "            acc=(TP+TN)/(TP+TN+FP+FN)\n",
    "            output.append(acc)\n",
    "            output.append(f1)\n",
    "        except:\n",
    "            output.append(0)\n",
    "            output.append(0)\n",
    "    return output\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-17T13:15:41.229588Z",
     "start_time": "2019-12-17T13:15:22.037072Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0.859375 0.8597307687346002\n",
      "1 0.78125 0.7807040262445097\n",
      "2 0.7890625 0.78342709798406\n",
      "3 0.859375 0.8497468754943838\n",
      "4 0.828125 0.8231546231546232\n",
      "5 0.8125 0.8109359468744032\n",
      "6 0.78125 0.7796717376847478\n",
      "7 0.78125 0.7811584403876491\n",
      "8 0.8515625 0.8443333501657998\n",
      "9 0.8828125 0.8817867489019718\n",
      "10 0.84375 0.840764599385289\n",
      "11 0.8125 0.8122538468202508\n",
      "12 0.7890625 0.7861346215739399\n",
      "13 0.828125 0.8304861018752495\n",
      "14 0.875 0.8712409499834123\n",
      "15 0.765625 0.752659515179077\n",
      "16 0.828125 0.8141487411765361\n",
      "17 0.8828125 0.8774323405412757\n",
      "18 0.8671875 0.8653598653598653\n",
      "19 0.8125 0.8159090909090909\n",
      "20 0.765625 0.7617543859649123\n",
      "21 0.8515625 0.8478429346422113\n",
      "22 0.859375 0.8575903676584335\n",
      "23 0.796875 0.793703007518797\n",
      "24 0.8125 0.8124681810075068\n",
      "25 0.765625 0.7665544332211\n",
      "26 0.8046875 0.8023391471737735\n",
      "27 0.7890625 0.7814463419776513\n",
      "28 0.734375 0.718989782147677\n",
      "29 0.78125 0.7674238012036497\n",
      "30 0.8203125 0.8015688259109313\n",
      "31 0.84375 0.8314080584129521\n",
      "32 0.8046875 0.8070139736806402\n",
      "33 0.78125 0.7817308106246502\n",
      "34 0.8203125 0.8178940382314672\n",
      "35 0.828125 0.8241324481599869\n",
      "36 0.7265625 0.7202325430755279\n",
      "37 0.875 0.8636985907391429\n",
      "38 0.84375 0.8386090550490314\n",
      "39 0.8125 0.8139660245259112\n",
      "40 0.8125 0.8021070982859467\n",
      "41 0.828125 0.8185815845674013\n",
      "42 0.8125 0.813208147641591\n",
      "43 0.796875 0.776702248751938\n",
      "44 0.78125 0.7691883372734436\n",
      "45 0.828125 0.8135087719298246\n",
      "46 0.796875 0.7962541426827142\n",
      "47 0.828125 0.8103732359051508\n",
      "48 0.7734375 0.7693274423171331\n",
      "49 0.8046875 0.8144565523875867\n",
      "50 0.796875 0.7858550039401103\n",
      "51 0.8359375 0.8275436945649712\n",
      "52 0.859375 0.8536672512415385\n",
      "53 0.78125 0.7850101425562691\n",
      "54 0.7890625 0.7929314935850883\n",
      "55 0.7421875 0.7324497002545783\n",
      "56 0.8125 0.8076512409177322\n",
      "57 0.78125 0.7799792799792798\n",
      "58 0.78125 0.7821294559099438\n",
      "59 0.8046875 0.7972401359129049\n",
      "60 0.8671875 0.8676390096268394\n",
      "61 0.765625 0.7728152492668622\n",
      "62 0.8046875 0.8098275993012836\n",
      "63 0.859375 0.845773228381924\n",
      "64 0.8125 0.8146031746031747\n",
      "65 0.84375 0.835745515098227\n",
      "66 0.765625 0.767998767998768\n",
      "67 0.84375 0.8428325989518126\n",
      "68 0.84375 0.841125873209263\n",
      "69 0.78125 0.7822944896115628\n",
      "70 0.8203125 0.8063759546686375\n",
      "71 0.84375 0.8465262648269185\n",
      "72 0.7890625 0.7828255805783896\n",
      "73 0.8046875 0.7796245093019287\n",
      "74 0.8359375 0.8414981482034092\n",
      "75 0.7734375 0.764383989993746\n",
      "76 0.796875 0.806607744107744\n",
      "77 0.7734375 0.7748636462086754\n",
      "78 0.8671875 0.8633265333877329\n",
      "79 0.7890625 0.7727688787185355\n",
      "80 0.8203125 0.815855762594893\n",
      "81 0.8203125 0.8224647496678149\n",
      "82 0.84375 0.8397824397824398\n",
      "83 0.8046875 0.8052416368846389\n",
      "84 0.78125 0.780420819490587\n",
      "85 0.7890625 0.7806105006105005\n",
      "86 0.828125 0.8286435786435787\n",
      "87 0.8125 0.7878272634196285\n",
      "88 0.78125 0.7656901753011592\n",
      "89 0.7421875 0.7419972640218878\n",
      "90 0.8046875 0.8020305223370358\n",
      "91 0.7890625 0.7850366892388637\n",
      "92 0.8125 0.8152909962115711\n",
      "93 0.8046875 0.8035124608317461\n",
      "94 0.8359375 0.8354487468590941\n",
      "95 0.796875 0.8015202985654653\n",
      "96 0.8125 0.810111699000588\n",
      "97 0.7109375 0.7084848348217786\n",
      "98 0.78125 0.790122595203201\n",
      "99 0.7890625 0.7870075287498967\n"
     ]
    }
   ],
   "source": [
    "accs=[]\n",
    "f1s=[]\n",
    "small_acc_f1=[]\n",
    "acc=0\n",
    "for epoch in range(100):\n",
    "    X_train,Y_train,X_val,Y_val=get_data(all_data)\n",
    "    clf = SVC(kernel='rbf', class_weight='balanced', C=1.51,gamma=0.11, random_state=1)\n",
    "    clf.fit(X_train,Y_train)\n",
    "    preds=clf.predict(X_val)\n",
    "    acc=accuracy_score(Y_val,preds)\n",
    "    f1=f1_score(Y_val,preds, average='macro')\n",
    "    accs.append(acc)\n",
    "    f1s.append(f1)\n",
    "    small_acc_f1.append(get_small_class_acc_f1(Y_val,preds))\n",
    "    print(epoch,acc,f1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-17T13:15:41.582584Z",
     "start_time": "2019-12-17T13:15:41.231152Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set()\n",
    "plt.figure(figsize=[8,8])\n",
    "sns.distplot(accs,label='Acc (Mean: %s)'%str(np.mean(accs)),bins=10)\n",
    "sns.distplot(f1s,label='F1 Score (Mean: %s)'%str(np.mean(f1s)),bins=10)\n",
    "plt.xlabel('Value',fontsize=15)\n",
    "plt.legend(fontsize=13,loc='upper left')\n",
    "plt.show()\n",
    "plt.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-17T13:15:56.851217Z",
     "start_time": "2019-12-17T13:15:55.414591Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/joshua/anaconda3/envs/ml/lib/python3.6/site-packages/statsmodels/nonparametric/kde.py:487: RuntimeWarning: invalid value encountered in true_divide\n",
      "  binned = fast_linbin(X, a, b, gridsize) / (delta * nobs)\n",
      "/home/joshua/anaconda3/envs/ml/lib/python3.6/site-packages/statsmodels/nonparametric/kdetools.py:34: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  FAC1 = 2*(np.pi*bw/RANGE)**2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(4):\n",
    "    accs=np.array(small_acc_f1)[:,2*i]\n",
    "    f1s=np.array(small_acc_f1)[:,2*i+1]\n",
    "    \n",
    "    sns.set()\n",
    "    plt.figure(figsize=[8,8])\n",
    "    sns.distplot(accs,label='Acc (Mean: %s)'%str(np.mean(accs)),bins=10)\n",
    "    sns.distplot(f1s,label='F1 Score (Mean: %s)'%str(np.mean(f1s)),bins=10)\n",
    "    plt.xlabel('Value',fontsize=15)\n",
    "    plt.legend(fontsize=13,loc='upper left')\n",
    "    plt.show()\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-17T13:11:09.019473Z",
     "start_time": "2019-12-17T13:11:08.980658Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "def get_data(data):\n",
    "    DATA=data\n",
    "    X=[]\n",
    "    Y=[]\n",
    "    teeths=['11','12','13','14','15','16','17','18','21','22','23','24','25','26','27','28','31','32','33','34','35','36','37','38','41','42','43','44','45','46','47','48']\n",
    "    #teeths=['11','12','13','14','15','21','22','23','24','25','31','32','33','34','35','41','42','43','44','45']\n",
    "    periodontitis=['l','m','h','note1']\n",
    "\n",
    "    for key in DATA.keys():\n",
    "        try:\n",
    "            cl=DATA[key]['class']\n",
    "            \n",
    "            \n",
    "            ratio = np.zeros((32))\n",
    "            new_teeths=DATA[key].keys()\n",
    "            new_teeths=list(new_teeths)\n",
    "            new_teeths.remove('class')\n",
    "            for tooth in new_teeths:\n",
    "                #有些样本中牙的数量太少\n",
    "                if(len(new_teeths) == 1): \n",
    "                    continue\n",
    "                else:\n",
    "                    #有些样本中的牙的ratio为NaN，无法计算，continue\n",
    "                    if(math.isnan(DATA[key][tooth][2])):\n",
    "                        continue\n",
    "                    ratio[list(new_teeths).index(tooth)] = DATA[key][tooth][2]\n",
    "                    #ratio.append(distance_data[i][tooth][2])\n",
    "\n",
    "\n",
    "            #如果样本中的牙的数量小于32，则用插值的办法（第一个和第二个的mean，依此类推）来补充，直到向量长度为32\n",
    "            #将每个牙都根据周围的牙齿来进行插值，输出的顺序按照牙齿的标号顺序\n",
    "            for j in range(0,len(ratio)):\n",
    "                if(ratio.all() > 0):\n",
    "                    break\n",
    "                if(ratio[j] > 0):\n",
    "                    continue\n",
    "                elif(j == 0 and ratio[j+1] > 0 and ratio[j+2] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j+2])/2\n",
    "                elif(j == len(ratio) - 1 and  ratio[j-1] > 0 and ratio[j-2] > 0):\n",
    "                    ratio[j] = (ratio[j-1] + ratio[j-2])/2\n",
    "                elif(j > 0 and j < len(ratio) - 1 and ratio[j+1] > 0 and ratio[j-1] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j - 1])/2\n",
    "                else:\n",
    "                    ratio[j] = (np.random.choice(ratio[np.where(ratio > 0)],1)+np.random.choice(ratio[np.where(ratio > 0)],1))/2\n",
    "            X.append(ratio.tolist()) \n",
    "            \"\"\"\n",
    "            \n",
    "            tmp=[]\n",
    "            for teeth_id in teeths:\n",
    "                try:\n",
    "                    if math.isnan(DATA[key][teeth_id][2]):\n",
    "                        tmp.append(0)\n",
    "                    else:\n",
    "                        tmp.append(DATA[key][teeth_id][2])\n",
    "                except:\n",
    "                    tmp.append(0)\n",
    "            X.append(tmp)\n",
    "            \"\"\"\n",
    "                \n",
    "            if cl=='note1':\n",
    "                Y.append(1)\n",
    "            elif cl=='l':\n",
    "                Y.append(1)\n",
    "            elif cl=='m':\n",
    "                Y.append(2)\n",
    "            elif cl=='h':\n",
    "                Y.append(3)\n",
    "\n",
    "        except:\n",
    "            pass\n",
    "    \n",
    "    \n",
    "    from imblearn.over_sampling import SMOTE\n",
    "    smo = SMOTE(random_state=5)\n",
    "    X_smo, Y_smo = smo.fit_sample(X, Y)\n",
    "    \n",
    "    tmp_data=[[X_smo[i],Y_smo[i]] for i in range(len(Y_smo))]\n",
    "    import random\n",
    "    random.shuffle(tmp_data)\n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    \n",
    "    \"\"\"\n",
    "    tmp_data=[[X[i],Y[i]] for i in range(len(Y))]\n",
    "    import random\n",
    "    random.shuffle(tmp_data)\n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    \"\"\"\n",
    "    \n",
    "    return X_train,Y_train,X_val,Y_val\n",
    "\n",
    "def get_small_class_acc_f1(Y,pred):\n",
    "    small_class=[0,1,2,3]\n",
    "    output=[]\n",
    "\n",
    "    for key in small_class:\n",
    "\n",
    "        TP=0\n",
    "        TN=0\n",
    "        FP=0\n",
    "        FN=0\n",
    "\n",
    "        for i in range(len(Y)):\n",
    "            if Y[i]==pred[i]==int(key):\n",
    "                TP+=1\n",
    "            elif (Y[i]!=int(key))&(pred[i]==int(key)):\n",
    "                FP+=1\n",
    "            elif (Y[i]==int(key))&(pred[i]!=int(key)):\n",
    "                FN+=1\n",
    "            elif (Y[i]!=int(key))&(pred[i]!=int(key)):\n",
    "                TN+=1\n",
    "\n",
    "        try:\n",
    "            f1=2*TP/(2*TP+FP+FN)\n",
    "            acc=(TP+TN)/(TP+TN+FP+FN)\n",
    "            output.append(acc)\n",
    "            output.append(f1)\n",
    "        except:\n",
    "            output.append(0)\n",
    "            output.append(0)\n",
    "    return output\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-17T13:11:30.052471Z",
     "start_time": "2019-12-17T13:11:11.411879Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0.9375 0.9346582836032963\n",
      "1 0.921875 0.9215026633024951\n",
      "2 0.8515625 0.8480142793395805\n",
      "3 0.8671875 0.8721633059497137\n",
      "4 0.90625 0.907946407946408\n",
      "5 0.9296875 0.9312979541405348\n",
      "6 0.9375 0.9372280307952822\n",
      "7 0.859375 0.8726227636514979\n",
      "8 0.921875 0.9234931734931736\n",
      "9 0.8515625 0.8481696813092162\n",
      "10 0.90625 0.9082298059656769\n",
      "11 0.8203125 0.8250000000000001\n",
      "12 0.921875 0.9231506041850869\n",
      "13 0.8671875 0.8651793653103125\n",
      "14 0.875 0.8752164343360235\n",
      "15 0.875 0.8723825978139557\n",
      "16 0.890625 0.8910180104326956\n",
      "17 0.8828125 0.879166558640775\n",
      "18 0.8828125 0.870754716981132\n",
      "19 0.875 0.8724426026730109\n",
      "20 0.875 0.872027972027972\n",
      "21 0.9375 0.9382456140350878\n",
      "22 0.890625 0.888951101157148\n",
      "23 0.8828125 0.8852093923989348\n",
      "24 0.9140625 0.9096917294591713\n",
      "25 0.90625 0.899749373433584\n",
      "26 0.9296875 0.9258506705256169\n",
      "27 0.8828125 0.8848845598845599\n",
      "28 0.859375 0.8505023893730103\n",
      "29 0.8828125 0.8797069597069597\n",
      "30 0.8828125 0.8856100998958141\n",
      "31 0.8984375 0.8883687826777257\n",
      "32 0.921875 0.9202773834352782\n",
      "33 0.9375 0.9381248381248382\n",
      "34 0.9296875 0.9301371850466688\n",
      "35 0.8984375 0.8962030790520671\n",
      "36 0.8828125 0.877999738869304\n",
      "37 0.8203125 0.8251450927138398\n",
      "38 0.9140625 0.9179489687780222\n",
      "39 0.890625 0.887391646966115\n",
      "40 0.8671875 0.8705808080808081\n",
      "41 0.921875 0.9220138505852792\n",
      "42 0.890625 0.8980407266292793\n",
      "43 0.9296875 0.9275578370623871\n",
      "44 0.9140625 0.917445121329041\n",
      "45 0.9375 0.935793379420109\n",
      "46 0.8984375 0.901099091602524\n",
      "47 0.8828125 0.8789324849770237\n",
      "48 0.921875 0.9234848484848485\n",
      "49 0.859375 0.8647214076246335\n",
      "50 0.859375 0.8516931216931217\n",
      "51 0.8671875 0.8643532365986207\n",
      "52 0.875 0.8802287168104259\n",
      "53 0.8828125 0.8753275148623986\n",
      "54 0.8671875 0.8638754381674412\n",
      "55 0.8671875 0.871484942886812\n",
      "56 0.8671875 0.8706164206164207\n",
      "57 0.90625 0.9075493612078978\n",
      "58 0.890625 0.8847863800370709\n",
      "59 0.875 0.8644049187527448\n",
      "60 0.8515625 0.8436861384229805\n",
      "61 0.890625 0.892838642838643\n",
      "62 0.8984375 0.8966339869281046\n",
      "63 0.890625 0.8872821615948445\n",
      "64 0.8828125 0.886537687746123\n",
      "65 0.8984375 0.8988377877266767\n",
      "66 0.921875 0.9220246238030096\n",
      "67 0.8828125 0.8752176093948246\n",
      "68 0.8671875 0.865567021054826\n",
      "69 0.890625 0.8867178390555767\n",
      "70 0.8359375 0.827226984413158\n",
      "71 0.8828125 0.8736263736263736\n",
      "72 0.8828125 0.8854847468040871\n",
      "73 0.90625 0.8966300366300367\n",
      "74 0.890625 0.8913172285844722\n",
      "75 0.875 0.8780515596068937\n",
      "76 0.8828125 0.8823090430673974\n",
      "77 0.9140625 0.9180094094269601\n",
      "78 0.9140625 0.9129983908456999\n",
      "79 0.8671875 0.8757074902661293\n",
      "80 0.9375 0.9359267734553777\n",
      "81 0.9296875 0.9273106534683505\n",
      "82 0.890625 0.8852031881638599\n",
      "83 0.8984375 0.8975852585258526\n",
      "84 0.8828125 0.8775231860338243\n",
      "85 0.9296875 0.9297139218923673\n",
      "86 0.8984375 0.9013219376908715\n",
      "87 0.890625 0.8833335531290113\n",
      "88 0.9609375 0.9596283865946788\n",
      "89 0.890625 0.8844605475040258\n",
      "90 0.8984375 0.8917864041703051\n",
      "91 0.890625 0.8924242424242425\n",
      "92 0.90625 0.8992116684216097\n",
      "93 0.9609375 0.9605956471935854\n",
      "94 0.921875 0.9248041951355205\n",
      "95 0.8828125 0.8687194427700756\n",
      "96 0.859375 0.8563089895280838\n",
      "97 0.9140625 0.9122914122914123\n",
      "98 0.859375 0.8605354962497821\n",
      "99 0.875 0.8765040483253542\n"
     ]
    }
   ],
   "source": [
    "accs=[]\n",
    "f1s=[]\n",
    "small_acc_f1=[]\n",
    "for epoch in range(100):\n",
    "    X_train,Y_train,X_val,Y_val=get_data(all_data)\n",
    "\n",
    "    clf = DecisionTreeClassifier(max_depth = 9, \n",
    "                                 random_state = 0)\n",
    "    clf.fit(X_train, Y_train)\n",
    "    preds=clf.predict(X_val)\n",
    "    acc=accuracy_score(Y_val,preds)\n",
    "    f1=f1_score(Y_val,preds, average='macro')\n",
    "    accs.append(acc)\n",
    "    f1s.append(f1)\n",
    "    small_acc_f1.append(get_small_class_acc_f1(Y_val,preds))\n",
    "    print(epoch,acc,f1)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-17T13:11:44.555988Z",
     "start_time": "2019-12-17T13:11:44.142922Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set()\n",
    "plt.figure(figsize=[8,8])\n",
    "sns.distplot(accs,label='Acc (Mean: %s)'%str(np.mean(accs)),bins=10)\n",
    "sns.distplot(f1s,label='F1 Score (Mean: %s)'%str(np.mean(f1s)),bins=10)\n",
    "plt.xlabel('Value',fontsize=15)\n",
    "plt.legend(fontsize=13,loc='upper left')\n",
    "plt.show()\n",
    "plt.close()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 478,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-17T13:11:57.947682Z",
     "start_time": "2019-12-17T13:11:56.489975Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/joshua/anaconda3/envs/ml/lib/python3.6/site-packages/statsmodels/nonparametric/kde.py:487: RuntimeWarning: invalid value encountered in true_divide\n",
      "  binned = fast_linbin(X, a, b, gridsize) / (delta * nobs)\n",
      "/home/joshua/anaconda3/envs/ml/lib/python3.6/site-packages/statsmodels/nonparametric/kdetools.py:34: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  FAC1 = 2*(np.pi*bw/RANGE)**2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(4):\n",
    "    accs=np.array(small_acc_f1)[:,2*i]\n",
    "    f1s=np.array(small_acc_f1)[:,2*i+1]\n",
    "    \n",
    "    sns.set()\n",
    "    plt.figure(figsize=[8,8])\n",
    "    sns.distplot(accs,label='Acc (Mean: %s)'%str(np.mean(accs)),bins=10)\n",
    "    sns.distplot(f1s,label='F1 Score (Mean: %s)'%str(np.mean(f1s)),bins=10)\n",
    "    plt.xlabel('Value',fontsize=15)\n",
    "    plt.legend(fontsize=13,loc='upper left')\n",
    "    plt.show()\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 调参"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-16T11:35:54.496814Z",
     "start_time": "2019-12-16T11:35:53.942078Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7feee8dca080>]"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# List of values to try for max_depth:\n",
    "max_depth_range = list(range(1, 20))\n",
    "# List to store the average RMSE for each value of max_depth:\n",
    "accuracy = []\n",
    "for depth in max_depth_range:\n",
    "    \n",
    "    clf = DecisionTreeClassifier(max_depth = depth, \n",
    "                             random_state = 0)\n",
    "    clf.fit(X_train, Y_train)\n",
    "    score = clf.score(X_val, Y_val)\n",
    "    accuracy.append(score)\n",
    "plt.plot(max_depth_range,accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# XGBoost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train and Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 541,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-18T08:27:40.041293Z",
     "start_time": "2019-12-18T08:27:12.009551Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\ttrain-merror:0.077778\tval-merror:0.205882\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.035185\tval-merror:0.183824\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.011111\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[16]\ttrain-merror:0\tval-merror:0.102941\n",
      "[17]\ttrain-merror:0\tval-merror:0.102941\n",
      "[18]\ttrain-merror:0\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "[20]\ttrain-merror:0\tval-merror:0.102941\n",
      "[21]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0\tval-merror:0.095588\n",
      "\n",
      "[0]\ttrain-merror:0.087037\tval-merror:0.286765\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.205882\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.183824\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[21]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.07963\tval-merror:0.183824\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.044444\tval-merror:0.132353\n",
      "[2]\ttrain-merror:0.016667\tval-merror:0.095588\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.102941\n",
      "[4]\ttrain-merror:0.016667\tval-merror:0.095588\n",
      "[5]\ttrain-merror:0.014815\tval-merror:0.110294\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.080882\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[13]\ttrain-merror:0\tval-merror:0.088235\n",
      "[14]\ttrain-merror:0\tval-merror:0.088235\n",
      "[15]\ttrain-merror:0\tval-merror:0.095588\n",
      "[16]\ttrain-merror:0\tval-merror:0.102941\n",
      "[17]\ttrain-merror:0\tval-merror:0.102941\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.080882\n",
      "\n",
      "[0]\ttrain-merror:0.098148\tval-merror:0.220588\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.025926\tval-merror:0.161765\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[10]\ttrain-merror:0\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.102941\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.068519\tval-merror:0.183824\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.027778\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.161765\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.139706\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0\tval-merror:0.147059\n",
      "[10]\ttrain-merror:0\tval-merror:0.147059\n",
      "[11]\ttrain-merror:0\tval-merror:0.147059\n",
      "[12]\ttrain-merror:0\tval-merror:0.139706\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0\tval-merror:0.132353\n",
      "[15]\ttrain-merror:0\tval-merror:0.125\n",
      "[16]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.125\n",
      "\n",
      "[0]\ttrain-merror:0.083333\tval-merror:0.25\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.198529\n",
      "[3]\ttrain-merror:0.024074\tval-merror:0.176471\n",
      "[4]\ttrain-merror:0.02037\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.161765\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.161765\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0\tval-merror:0.110294\n",
      "[20]\ttrain-merror:0\tval-merror:0.125\n",
      "[21]\ttrain-merror:0\tval-merror:0.125\n",
      "[22]\ttrain-merror:0\tval-merror:0.125\n",
      "[23]\ttrain-merror:0\tval-merror:0.125\n",
      "[24]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.098148\tval-merror:0.25\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.035185\tval-merror:0.139706\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.110294\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.102941\n",
      "[4]\ttrain-merror:0.014815\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[10]\ttrain-merror:0\tval-merror:0.080882\n",
      "[11]\ttrain-merror:0\tval-merror:0.088235\n",
      "[12]\ttrain-merror:0\tval-merror:0.088235\n",
      "[13]\ttrain-merror:0\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0\tval-merror:0.088235\n",
      "[15]\ttrain-merror:0\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0\tval-merror:0.088235\n",
      "[17]\ttrain-merror:0\tval-merror:0.088235\n",
      "[18]\ttrain-merror:0\tval-merror:0.088235\n",
      "[19]\ttrain-merror:0\tval-merror:0.088235\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0\tval-merror:0.080882\n",
      "\n",
      "[0]\ttrain-merror:0.116667\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.154412\n",
      "[2]\ttrain-merror:0.025926\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.183824\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.183824\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5]\ttrain-merror:0.009259\tval-merror:0.161765\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[8]\ttrain-merror:0\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0\tval-merror:0.125\n",
      "[10]\ttrain-merror:0\tval-merror:0.125\n",
      "[11]\ttrain-merror:0\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "[16]\ttrain-merror:0\tval-merror:0.102941\n",
      "[17]\ttrain-merror:0\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0\tval-merror:0.117647\n",
      "[19]\ttrain-merror:0\tval-merror:0.117647\n",
      "[20]\ttrain-merror:0\tval-merror:0.125\n",
      "[21]\ttrain-merror:0\tval-merror:0.117647\n",
      "[22]\ttrain-merror:0\tval-merror:0.110294\n",
      "[23]\ttrain-merror:0\tval-merror:0.110294\n",
      "[24]\ttrain-merror:0\tval-merror:0.102941\n",
      "[25]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.07963\tval-merror:0.25\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.220588\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.220588\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.161765\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.154412\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.147059\n",
      "[8]\ttrain-merror:0.009259\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0\tval-merror:0.132353\n",
      "[15]\ttrain-merror:0\tval-merror:0.125\n",
      "[16]\ttrain-merror:0\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0\tval-merror:0.125\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.132353\n",
      "[20]\ttrain-merror:0\tval-merror:0.132353\n",
      "[21]\ttrain-merror:0\tval-merror:0.132353\n",
      "[22]\ttrain-merror:0\tval-merror:0.125\n",
      "[23]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.068519\tval-merror:0.198529\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.154412\n",
      "[2]\ttrain-merror:0.025926\tval-merror:0.110294\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.110294\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.095588\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.095588\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.080882\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.066176\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.073529\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.058824\n",
      "[13]\ttrain-merror:0.003704\tval-merror:0.066176\n",
      "[14]\ttrain-merror:0.003704\tval-merror:0.066176\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "[17]\ttrain-merror:0\tval-merror:0.066176\n",
      "[18]\ttrain-merror:0\tval-merror:0.073529\n",
      "[19]\ttrain-merror:0\tval-merror:0.073529\n",
      "[20]\ttrain-merror:0\tval-merror:0.066176\n",
      "[21]\ttrain-merror:0\tval-merror:0.058824\n",
      "[22]\ttrain-merror:0\tval-merror:0.058824\n",
      "Stopping. Best iteration:\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.058824\n",
      "\n",
      "[0]\ttrain-merror:0.094444\tval-merror:0.294118\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.05\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.033333\tval-merror:0.132353\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.117647\n",
      "[4]\ttrain-merror:0.014815\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[21]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[22]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[23]\ttrain-merror:0\tval-merror:0.095588\n",
      "[24]\ttrain-merror:0\tval-merror:0.095588\n",
      "[25]\ttrain-merror:0\tval-merror:0.095588\n",
      "Stopping. Best iteration:\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "\n",
      "[0]\ttrain-merror:0.105556\tval-merror:0.25\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.25\n",
      "[2]\ttrain-merror:0.033333\tval-merror:0.220588\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.198529\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.183824\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.176471\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0\tval-merror:0.110294\n",
      "[10]\ttrain-merror:0\tval-merror:0.095588\n",
      "[11]\ttrain-merror:0\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0\tval-merror:0.132353\n",
      "[15]\ttrain-merror:0\tval-merror:0.110294\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.125\n",
      "[20]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0\tval-merror:0.095588\n",
      "\n",
      "[0]\ttrain-merror:0.096296\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.183824\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.176471\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.117647\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.154412\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.154412\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0\tval-merror:0.125\n",
      "[12]\ttrain-merror:0\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.111111\tval-merror:0.220588\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.139706\n",
      "[2]\ttrain-merror:0.035185\tval-merror:0.139706\n",
      "[3]\ttrain-merror:0.027778\tval-merror:0.125\n",
      "[4]\ttrain-merror:0.014815\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.102941\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.095588\n",
      "[9]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[14]\ttrain-merror:0\tval-merror:0.088235\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[16]\ttrain-merror:0\tval-merror:0.080882\n",
      "[17]\ttrain-merror:0\tval-merror:0.073529\n",
      "[18]\ttrain-merror:0\tval-merror:0.073529\n",
      "[19]\ttrain-merror:0\tval-merror:0.073529\n",
      "[20]\ttrain-merror:0\tval-merror:0.080882\n",
      "[21]\ttrain-merror:0\tval-merror:0.066176\n",
      "[22]\ttrain-merror:0\tval-merror:0.066176\n",
      "[23]\ttrain-merror:0\tval-merror:0.073529\n",
      "[24]\ttrain-merror:0\tval-merror:0.073529\n",
      "[25]\ttrain-merror:0\tval-merror:0.073529\n",
      "[26]\ttrain-merror:0\tval-merror:0.073529\n",
      "[27]\ttrain-merror:0\tval-merror:0.073529\n",
      "[28]\ttrain-merror:0\tval-merror:0.073529\n",
      "[29]\ttrain-merror:0\tval-merror:0.073529\n",
      "[30]\ttrain-merror:0\tval-merror:0.080882\n",
      "[31]\ttrain-merror:0\tval-merror:0.080882\n",
      "Stopping. Best iteration:\n",
      "[21]\ttrain-merror:0\tval-merror:0.066176\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\ttrain-merror:0.081481\tval-merror:0.198529\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.014815\tval-merror:0.161765\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.147059\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.139706\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.125\n",
      "\n",
      "[0]\ttrain-merror:0.092593\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.154412\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.139706\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.139706\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0\tval-merror:0.088235\n",
      "[17]\ttrain-merror:0\tval-merror:0.088235\n",
      "[18]\ttrain-merror:0\tval-merror:0.095588\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "[20]\ttrain-merror:0\tval-merror:0.095588\n",
      "[21]\ttrain-merror:0\tval-merror:0.095588\n",
      "[22]\ttrain-merror:0\tval-merror:0.088235\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "[24]\ttrain-merror:0\tval-merror:0.088235\n",
      "[25]\ttrain-merror:0\tval-merror:0.080882\n",
      "[26]\ttrain-merror:0\tval-merror:0.088235\n",
      "[27]\ttrain-merror:0\tval-merror:0.088235\n",
      "[28]\ttrain-merror:0\tval-merror:0.088235\n",
      "[29]\ttrain-merror:0\tval-merror:0.088235\n",
      "[30]\ttrain-merror:0\tval-merror:0.088235\n",
      "[31]\ttrain-merror:0\tval-merror:0.088235\n",
      "[32]\ttrain-merror:0\tval-merror:0.088235\n",
      "[33]\ttrain-merror:0\tval-merror:0.088235\n",
      "[34]\ttrain-merror:0\tval-merror:0.088235\n",
      "[35]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[25]\ttrain-merror:0\tval-merror:0.080882\n",
      "\n",
      "[0]\ttrain-merror:0.081481\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.191176\n",
      "[2]\ttrain-merror:0.018519\tval-merror:0.139706\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.117647\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.095588\n",
      "[20]\ttrain-merror:0\tval-merror:0.095588\n",
      "[21]\ttrain-merror:0\tval-merror:0.102941\n",
      "[22]\ttrain-merror:0\tval-merror:0.102941\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "[24]\ttrain-merror:0\tval-merror:0.095588\n",
      "[25]\ttrain-merror:0\tval-merror:0.095588\n",
      "[26]\ttrain-merror:0\tval-merror:0.110294\n",
      "[27]\ttrain-merror:0\tval-merror:0.095588\n",
      "[28]\ttrain-merror:0\tval-merror:0.102941\n",
      "[29]\ttrain-merror:0\tval-merror:0.095588\n",
      "[30]\ttrain-merror:0\tval-merror:0.102941\n",
      "[31]\ttrain-merror:0\tval-merror:0.088235\n",
      "[32]\ttrain-merror:0\tval-merror:0.088235\n",
      "[33]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.101852\tval-merror:0.183824\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.139706\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.102941\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.110294\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.102941\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.066176\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "[18]\ttrain-merror:0\tval-merror:0.073529\n",
      "[19]\ttrain-merror:0\tval-merror:0.073529\n",
      "[20]\ttrain-merror:0\tval-merror:0.073529\n",
      "[21]\ttrain-merror:0\tval-merror:0.066176\n",
      "[22]\ttrain-merror:0\tval-merror:0.066176\n",
      "[23]\ttrain-merror:0\tval-merror:0.066176\n",
      "Stopping. Best iteration:\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.066176\n",
      "\n",
      "[0]\ttrain-merror:0.087037\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.213235\n",
      "[2]\ttrain-merror:0.018519\tval-merror:0.183824\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[5]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "\n",
      "[0]\ttrain-merror:0.088889\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038889\tval-merror:0.213235\n",
      "[2]\ttrain-merror:0.025926\tval-merror:0.183824\n",
      "[3]\ttrain-merror:0.011111\tval-merror:0.183824\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.176471\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0\tval-merror:0.125\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.117647\n",
      "[19]\ttrain-merror:0\tval-merror:0.117647\n",
      "[20]\ttrain-merror:0\tval-merror:0.117647\n",
      "[21]\ttrain-merror:0\tval-merror:0.117647\n",
      "[22]\ttrain-merror:0\tval-merror:0.110294\n",
      "[23]\ttrain-merror:0\tval-merror:0.110294\n",
      "[24]\ttrain-merror:0\tval-merror:0.110294\n",
      "Stopping. Best iteration:\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.094444\tval-merror:0.198529\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.147059\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.005556\tval-merror:0.110294\n",
      "[5]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[8]\ttrain-merror:0\tval-merror:0.088235\n",
      "[9]\ttrain-merror:0\tval-merror:0.095588\n",
      "[10]\ttrain-merror:0\tval-merror:0.088235\n",
      "[11]\ttrain-merror:0\tval-merror:0.088235\n",
      "[12]\ttrain-merror:0\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0\tval-merror:0.088235\n",
      "[14]\ttrain-merror:0\tval-merror:0.088235\n",
      "[15]\ttrain-merror:0\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0\tval-merror:0.080882\n",
      "[17]\ttrain-merror:0\tval-merror:0.088235\n",
      "[18]\ttrain-merror:0\tval-merror:0.095588\n",
      "[19]\ttrain-merror:0\tval-merror:0.088235\n",
      "[20]\ttrain-merror:0\tval-merror:0.095588\n",
      "[21]\ttrain-merror:0\tval-merror:0.080882\n",
      "[22]\ttrain-merror:0\tval-merror:0.080882\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "[24]\ttrain-merror:0\tval-merror:0.095588\n",
      "[25]\ttrain-merror:0\tval-merror:0.095588\n",
      "[26]\ttrain-merror:0\tval-merror:0.095588\n",
      "Stopping. Best iteration:\n",
      "[16]\ttrain-merror:0\tval-merror:0.080882\n",
      "\n",
      "[0]\ttrain-merror:0.088889\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.027778\tval-merror:0.147059\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.176471\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.125\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.080882\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.095588\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[12]\ttrain-merror:0\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0\tval-merror:0.088235\n",
      "[14]\ttrain-merror:0\tval-merror:0.088235\n",
      "[15]\ttrain-merror:0\tval-merror:0.080882\n",
      "[16]\ttrain-merror:0\tval-merror:0.073529\n",
      "[17]\ttrain-merror:0\tval-merror:0.080882\n",
      "[18]\ttrain-merror:0\tval-merror:0.080882\n",
      "[19]\ttrain-merror:0\tval-merror:0.088235\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "[21]\ttrain-merror:0\tval-merror:0.088235\n",
      "[22]\ttrain-merror:0\tval-merror:0.073529\n",
      "[23]\ttrain-merror:0\tval-merror:0.080882\n",
      "[24]\ttrain-merror:0\tval-merror:0.080882\n",
      "[25]\ttrain-merror:0\tval-merror:0.073529\n",
      "[26]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[16]\ttrain-merror:0\tval-merror:0.073529\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.272059\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.191176\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.117647\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.125\n",
      "[18]\ttrain-merror:0\tval-merror:0.095588\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "[20]\ttrain-merror:0\tval-merror:0.095588\n",
      "[21]\ttrain-merror:0\tval-merror:0.102941\n",
      "[22]\ttrain-merror:0\tval-merror:0.088235\n",
      "[23]\ttrain-merror:0\tval-merror:0.095588\n",
      "[24]\ttrain-merror:0\tval-merror:0.095588\n",
      "[25]\ttrain-merror:0\tval-merror:0.095588\n",
      "[26]\ttrain-merror:0\tval-merror:0.102941\n",
      "[27]\ttrain-merror:0\tval-merror:0.102941\n",
      "[28]\ttrain-merror:0\tval-merror:0.095588\n",
      "[29]\ttrain-merror:0\tval-merror:0.110294\n",
      "[30]\ttrain-merror:0\tval-merror:0.102941\n",
      "[31]\ttrain-merror:0\tval-merror:0.110294\n",
      "[32]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[22]\ttrain-merror:0\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.191176\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.044444\tval-merror:0.213235\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[13]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[14]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[21]\ttrain-merror:0\tval-merror:0.080882\n",
      "[22]\ttrain-merror:0\tval-merror:0.073529\n",
      "[23]\ttrain-merror:0\tval-merror:0.073529\n",
      "[24]\ttrain-merror:0\tval-merror:0.073529\n",
      "[25]\ttrain-merror:0\tval-merror:0.073529\n",
      "[26]\ttrain-merror:0\tval-merror:0.066176\n",
      "[27]\ttrain-merror:0\tval-merror:0.073529\n",
      "[28]\ttrain-merror:0\tval-merror:0.066176\n",
      "[29]\ttrain-merror:0\tval-merror:0.073529\n",
      "[30]\ttrain-merror:0\tval-merror:0.073529\n",
      "[31]\ttrain-merror:0\tval-merror:0.073529\n",
      "[32]\ttrain-merror:0\tval-merror:0.066176\n",
      "[33]\ttrain-merror:0\tval-merror:0.066176\n",
      "[34]\ttrain-merror:0\tval-merror:0.066176\n",
      "[35]\ttrain-merror:0\tval-merror:0.066176\n",
      "[36]\ttrain-merror:0\tval-merror:0.066176\n",
      "Stopping. Best iteration:\n",
      "[26]\ttrain-merror:0\tval-merror:0.066176\n",
      "\n",
      "[0]\ttrain-merror:0.077778\tval-merror:0.25\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.169118\n",
      "[2]\ttrain-merror:0.025926\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.169118\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.154412\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.147059\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[18]\ttrain-merror:0\tval-merror:0.147059\n",
      "[19]\ttrain-merror:0\tval-merror:0.132353\n",
      "[20]\ttrain-merror:0\tval-merror:0.139706\n",
      "[21]\ttrain-merror:0\tval-merror:0.139706\n",
      "[22]\ttrain-merror:0\tval-merror:0.139706\n",
      "[23]\ttrain-merror:0\tval-merror:0.139706\n",
      "[24]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.094444\tval-merror:0.25\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.05\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.035185\tval-merror:0.183824\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3]\ttrain-merror:0.02963\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.02037\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.02037\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.012963\tval-merror:0.176471\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.169118\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.176471\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.176471\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.117647\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0\tval-merror:0.117647\n",
      "[19]\ttrain-merror:0\tval-merror:0.117647\n",
      "[20]\ttrain-merror:0\tval-merror:0.110294\n",
      "[21]\ttrain-merror:0\tval-merror:0.125\n",
      "[22]\ttrain-merror:0\tval-merror:0.117647\n",
      "[23]\ttrain-merror:0\tval-merror:0.102941\n",
      "[24]\ttrain-merror:0\tval-merror:0.102941\n",
      "[25]\ttrain-merror:0\tval-merror:0.110294\n",
      "[26]\ttrain-merror:0\tval-merror:0.110294\n",
      "[27]\ttrain-merror:0\tval-merror:0.110294\n",
      "[28]\ttrain-merror:0\tval-merror:0.110294\n",
      "[29]\ttrain-merror:0\tval-merror:0.102941\n",
      "[30]\ttrain-merror:0\tval-merror:0.110294\n",
      "[31]\ttrain-merror:0\tval-merror:0.117647\n",
      "[32]\ttrain-merror:0\tval-merror:0.117647\n",
      "[33]\ttrain-merror:0\tval-merror:0.110294\n",
      "Stopping. Best iteration:\n",
      "[23]\ttrain-merror:0\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.191176\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.147059\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.117647\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[9]\ttrain-merror:0\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "[15]\ttrain-merror:0\tval-merror:0.125\n",
      "[16]\ttrain-merror:0\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0\tval-merror:0.125\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.081481\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.018519\tval-merror:0.147059\n",
      "[3]\ttrain-merror:0.009259\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[19]\ttrain-merror:0\tval-merror:0.095588\n",
      "[20]\ttrain-merror:0\tval-merror:0.102941\n",
      "[21]\ttrain-merror:0\tval-merror:0.110294\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "\n",
      "[0]\ttrain-merror:0.07963\tval-merror:0.257353\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.044444\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.198529\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.191176\n",
      "[4]\ttrain-merror:0.005556\tval-merror:0.176471\n",
      "[5]\ttrain-merror:0.001852\tval-merror:0.183824\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.154412\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "[15]\ttrain-merror:0\tval-merror:0.132353\n",
      "[16]\ttrain-merror:0\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0\tval-merror:0.139706\n",
      "[18]\ttrain-merror:0\tval-merror:0.132353\n",
      "[19]\ttrain-merror:0\tval-merror:0.132353\n",
      "[20]\ttrain-merror:0\tval-merror:0.132353\n",
      "[21]\ttrain-merror:0\tval-merror:0.139706\n",
      "[22]\ttrain-merror:0\tval-merror:0.147059\n",
      "[23]\ttrain-merror:0\tval-merror:0.147059\n",
      "[24]\ttrain-merror:0\tval-merror:0.147059\n",
      "Stopping. Best iteration:\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038889\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.014815\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.022222\tval-merror:0.183824\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.161765\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0\tval-merror:0.125\n",
      "[20]\ttrain-merror:0\tval-merror:0.125\n",
      "[21]\ttrain-merror:0\tval-merror:0.125\n",
      "[22]\ttrain-merror:0\tval-merror:0.125\n",
      "[23]\ttrain-merror:0\tval-merror:0.125\n",
      "[24]\ttrain-merror:0\tval-merror:0.110294\n",
      "[25]\ttrain-merror:0\tval-merror:0.117647\n",
      "[26]\ttrain-merror:0\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.035185\tval-merror:0.235294\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.161765\n",
      "[4]\ttrain-merror:0.014815\tval-merror:0.169118\n",
      "[5]\ttrain-merror:0.014815\tval-merror:0.176471\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.183824\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.176471\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.183824\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.169118\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.169118\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.176471\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.169118\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.176471\n",
      "Stopping. Best iteration:\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.161765\n",
      "\n",
      "[0]\ttrain-merror:0.090741\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.02963\tval-merror:0.183824\n",
      "[2]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[3]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[4]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0\tval-merror:0.110294\n",
      "[10]\ttrain-merror:0\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.117647\n",
      "[17]\ttrain-merror:0\tval-merror:0.102941\n",
      "[18]\ttrain-merror:0\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0\tval-merror:0.117647\n",
      "[20]\ttrain-merror:0\tval-merror:0.117647\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.092593\tval-merror:0.301471\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.044444\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.147059\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.139706\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.139706\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[20]\ttrain-merror:0\tval-merror:0.095588\n",
      "[21]\ttrain-merror:0\tval-merror:0.102941\n",
      "[22]\ttrain-merror:0\tval-merror:0.095588\n",
      "[23]\ttrain-merror:0\tval-merror:0.095588\n",
      "[24]\ttrain-merror:0\tval-merror:0.088235\n",
      "[25]\ttrain-merror:0\tval-merror:0.095588\n",
      "[26]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.092593\tval-merror:0.257353\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.048148\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.027778\tval-merror:0.176471\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[9]\ttrain-merror:0\tval-merror:0.095588\n",
      "[10]\ttrain-merror:0\tval-merror:0.088235\n",
      "[11]\ttrain-merror:0\tval-merror:0.088235\n",
      "[12]\ttrain-merror:0\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "[16]\ttrain-merror:0\tval-merror:0.095588\n",
      "[17]\ttrain-merror:0\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.110294\n",
      "[20]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.088889\tval-merror:0.264706\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.198529\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.183824\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0\tval-merror:0.125\n",
      "[12]\ttrain-merror:0\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0\tval-merror:0.132353\n",
      "[15]\ttrain-merror:0\tval-merror:0.125\n",
      "[16]\ttrain-merror:0\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0\tval-merror:0.125\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "\n",
      "[0]\ttrain-merror:0.105556\tval-merror:0.257353\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.044444\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.176471\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.161765\n",
      "[4]\ttrain-merror:0.02037\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0.014815\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.110294\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0\tval-merror:0.095588\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0\tval-merror:0.095588\n",
      "[19]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.087037\tval-merror:0.264706\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.02963\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.012963\tval-merror:0.132353\n",
      "[3]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[4]\ttrain-merror:0.005556\tval-merror:0.102941\n",
      "[5]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0\tval-merror:0.095588\n",
      "[11]\ttrain-merror:0\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0\tval-merror:0.088235\n",
      "[13]\ttrain-merror:0\tval-merror:0.088235\n",
      "[14]\ttrain-merror:0\tval-merror:0.080882\n",
      "[15]\ttrain-merror:0\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0\tval-merror:0.088235\n",
      "[17]\ttrain-merror:0\tval-merror:0.080882\n",
      "[18]\ttrain-merror:0\tval-merror:0.088235\n",
      "[19]\ttrain-merror:0\tval-merror:0.080882\n",
      "[20]\ttrain-merror:0\tval-merror:0.080882\n",
      "[21]\ttrain-merror:0\tval-merror:0.080882\n",
      "[22]\ttrain-merror:0\tval-merror:0.073529\n",
      "[23]\ttrain-merror:0\tval-merror:0.073529\n",
      "[24]\ttrain-merror:0\tval-merror:0.073529\n",
      "[25]\ttrain-merror:0\tval-merror:0.073529\n",
      "[26]\ttrain-merror:0\tval-merror:0.073529\n",
      "[27]\ttrain-merror:0\tval-merror:0.073529\n",
      "[28]\ttrain-merror:0\tval-merror:0.073529\n",
      "[29]\ttrain-merror:0\tval-merror:0.073529\n",
      "[30]\ttrain-merror:0\tval-merror:0.073529\n",
      "[31]\ttrain-merror:0\tval-merror:0.080882\n",
      "[32]\ttrain-merror:0\tval-merror:0.080882\n",
      "Stopping. Best iteration:\n",
      "[22]\ttrain-merror:0\tval-merror:0.073529\n",
      "\n",
      "[0]\ttrain-merror:0.087037\tval-merror:0.191176\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.044444\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.018519\tval-merror:0.161765\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.139706\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.095588\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.073529\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.095588\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.073529\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.088235\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0\tval-merror:0.088235\n",
      "[17]\ttrain-merror:0\tval-merror:0.080882\n",
      "Stopping. Best iteration:\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.073529\n",
      "\n",
      "[0]\ttrain-merror:0.075926\tval-merror:0.294118\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.031481\tval-merror:0.227941\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.191176\n",
      "[4]\ttrain-merror:0.003704\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0\tval-merror:0.161765\n",
      "[6]\ttrain-merror:0\tval-merror:0.161765\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[8]\ttrain-merror:0\tval-merror:0.161765\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0\tval-merror:0.139706\n",
      "[15]\ttrain-merror:0\tval-merror:0.125\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[17]\ttrain-merror:0\tval-merror:0.102941\n",
      "[18]\ttrain-merror:0\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "[20]\ttrain-merror:0\tval-merror:0.110294\n",
      "[21]\ttrain-merror:0\tval-merror:0.110294\n",
      "[22]\ttrain-merror:0\tval-merror:0.110294\n",
      "[23]\ttrain-merror:0\tval-merror:0.117647\n",
      "[24]\ttrain-merror:0\tval-merror:0.117647\n",
      "[25]\ttrain-merror:0\tval-merror:0.117647\n",
      "[26]\ttrain-merror:0\tval-merror:0.110294\n",
      "[27]\ttrain-merror:0\tval-merror:0.110294\n",
      "Stopping. Best iteration:\n",
      "[17]\ttrain-merror:0\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.107407\tval-merror:0.272059\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.048148\tval-merror:0.183824\n",
      "[2]\ttrain-merror:0.033333\tval-merror:0.183824\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0\tval-merror:0.147059\n",
      "[10]\ttrain-merror:0\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0\tval-merror:0.139706\n",
      "[13]\ttrain-merror:0\tval-merror:0.125\n",
      "[14]\ttrain-merror:0\tval-merror:0.139706\n",
      "[15]\ttrain-merror:0\tval-merror:0.139706\n",
      "[16]\ttrain-merror:0\tval-merror:0.139706\n",
      "[17]\ttrain-merror:0\tval-merror:0.132353\n",
      "[18]\ttrain-merror:0\tval-merror:0.139706\n",
      "[19]\ttrain-merror:0\tval-merror:0.139706\n",
      "[20]\ttrain-merror:0\tval-merror:0.132353\n",
      "[21]\ttrain-merror:0\tval-merror:0.132353\n",
      "[22]\ttrain-merror:0\tval-merror:0.132353\n",
      "[23]\ttrain-merror:0\tval-merror:0.147059\n",
      "Stopping. Best iteration:\n",
      "[13]\ttrain-merror:0\tval-merror:0.125\n",
      "\n",
      "[0]\ttrain-merror:0.094444\tval-merror:0.198529\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.154412\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.147059\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.117647\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.154412\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.109259\tval-merror:0.272059\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038889\tval-merror:0.169118\n",
      "[2]\ttrain-merror:0.018519\tval-merror:0.132353\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.095588\n",
      "[4]\ttrain-merror:0.018519\tval-merror:0.095588\n",
      "[5]\ttrain-merror:0.018519\tval-merror:0.088235\n",
      "[6]\ttrain-merror:0.016667\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0\tval-merror:0.088235\n",
      "[12]\ttrain-merror:0\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0\tval-merror:0.073529\n",
      "[15]\ttrain-merror:0\tval-merror:0.080882\n",
      "[16]\ttrain-merror:0\tval-merror:0.080882\n",
      "[17]\ttrain-merror:0\tval-merror:0.080882\n",
      "[18]\ttrain-merror:0\tval-merror:0.080882\n",
      "[19]\ttrain-merror:0\tval-merror:0.073529\n",
      "[20]\ttrain-merror:0\tval-merror:0.073529\n",
      "[21]\ttrain-merror:0\tval-merror:0.080882\n",
      "[22]\ttrain-merror:0\tval-merror:0.088235\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "[24]\ttrain-merror:0\tval-merror:0.080882\n",
      "Stopping. Best iteration:\n",
      "[14]\ttrain-merror:0\tval-merror:0.073529\n",
      "\n",
      "[0]\ttrain-merror:0.096296\tval-merror:0.205882\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.048148\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.027778\tval-merror:0.176471\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.176471\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0\tval-merror:0.139706\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "[15]\ttrain-merror:0\tval-merror:0.132353\n",
      "[16]\ttrain-merror:0\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0\tval-merror:0.132353\n",
      "[18]\ttrain-merror:0\tval-merror:0.132353\n",
      "[19]\ttrain-merror:0\tval-merror:0.132353\n",
      "[20]\ttrain-merror:0\tval-merror:0.132353\n",
      "[21]\ttrain-merror:0\tval-merror:0.139706\n",
      "[22]\ttrain-merror:0\tval-merror:0.132353\n",
      "[23]\ttrain-merror:0\tval-merror:0.132353\n",
      "[24]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "\n",
      "[0]\ttrain-merror:0.090741\tval-merror:0.191176\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.031481\tval-merror:0.125\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.117647\n",
      "[3]\ttrain-merror:0.011111\tval-merror:0.102941\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.066176\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.073529\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.051471\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.066176\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.080882\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.080882\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.073529\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.066176\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.066176\n",
      "Stopping. Best iteration:\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.051471\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.257353\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.095588\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.088235\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.095588\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[16]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[17]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.198529\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.154412\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.169118\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.154412\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0\tval-merror:0.139706\n",
      "[14]\ttrain-merror:0\tval-merror:0.147059\n",
      "[15]\ttrain-merror:0\tval-merror:0.147059\n",
      "[16]\ttrain-merror:0\tval-merror:0.125\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[17]\ttrain-merror:0\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.117647\n",
      "[20]\ttrain-merror:0\tval-merror:0.110294\n",
      "[21]\ttrain-merror:0\tval-merror:0.117647\n",
      "[22]\ttrain-merror:0\tval-merror:0.117647\n",
      "[23]\ttrain-merror:0\tval-merror:0.125\n",
      "[24]\ttrain-merror:0\tval-merror:0.125\n",
      "[25]\ttrain-merror:0\tval-merror:0.125\n",
      "[26]\ttrain-merror:0\tval-merror:0.117647\n",
      "[27]\ttrain-merror:0\tval-merror:0.117647\n",
      "[28]\ttrain-merror:0\tval-merror:0.117647\n",
      "[29]\ttrain-merror:0\tval-merror:0.117647\n",
      "[30]\ttrain-merror:0\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[20]\ttrain-merror:0\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.092593\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.031481\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.027778\tval-merror:0.176471\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.169118\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.154412\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.176471\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.176471\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.161765\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[11]\ttrain-merror:0\tval-merror:0.154412\n",
      "[12]\ttrain-merror:0\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[16]\ttrain-merror:0\tval-merror:0.147059\n",
      "[17]\ttrain-merror:0\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.117647\n",
      "[20]\ttrain-merror:0\tval-merror:0.125\n",
      "[21]\ttrain-merror:0\tval-merror:0.139706\n",
      "[22]\ttrain-merror:0\tval-merror:0.139706\n",
      "[23]\ttrain-merror:0\tval-merror:0.125\n",
      "[24]\ttrain-merror:0\tval-merror:0.132353\n",
      "[25]\ttrain-merror:0\tval-merror:0.132353\n",
      "[26]\ttrain-merror:0\tval-merror:0.132353\n",
      "[27]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[17]\ttrain-merror:0\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.088889\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.227941\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.191176\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.191176\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.183824\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.169118\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[11]\ttrain-merror:0\tval-merror:0.147059\n",
      "[12]\ttrain-merror:0\tval-merror:0.147059\n",
      "[13]\ttrain-merror:0\tval-merror:0.147059\n",
      "[14]\ttrain-merror:0\tval-merror:0.147059\n",
      "[15]\ttrain-merror:0\tval-merror:0.147059\n",
      "[16]\ttrain-merror:0\tval-merror:0.154412\n",
      "[17]\ttrain-merror:0\tval-merror:0.154412\n",
      "Stopping. Best iteration:\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "\n",
      "[0]\ttrain-merror:0.077778\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038889\tval-merror:0.169118\n",
      "[2]\ttrain-merror:0.031481\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.161765\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.154412\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[21]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[22]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[23]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[24]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[25]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[26]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[27]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[28]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.098148\tval-merror:0.25\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038889\tval-merror:0.169118\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.139706\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.018519\tval-merror:0.169118\n",
      "[5]\ttrain-merror:0.016667\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.161765\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.154412\n",
      "[8]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0.007407\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[13]\ttrain-merror:0\tval-merror:0.147059\n",
      "Stopping. Best iteration:\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.132353\n",
      "\n",
      "[0]\ttrain-merror:0.094444\tval-merror:0.198529\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038889\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.176471\n",
      "[3]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.102941\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.102941\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.080882\n",
      "[11]\ttrain-merror:0\tval-merror:0.073529\n",
      "[12]\ttrain-merror:0\tval-merror:0.080882\n",
      "[13]\ttrain-merror:0\tval-merror:0.066176\n",
      "[14]\ttrain-merror:0\tval-merror:0.066176\n",
      "[15]\ttrain-merror:0\tval-merror:0.080882\n",
      "[16]\ttrain-merror:0\tval-merror:0.080882\n",
      "[17]\ttrain-merror:0\tval-merror:0.088235\n",
      "[18]\ttrain-merror:0\tval-merror:0.088235\n",
      "[19]\ttrain-merror:0\tval-merror:0.088235\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "[21]\ttrain-merror:0\tval-merror:0.080882\n",
      "[22]\ttrain-merror:0\tval-merror:0.080882\n",
      "[23]\ttrain-merror:0\tval-merror:0.080882\n",
      "Stopping. Best iteration:\n",
      "[13]\ttrain-merror:0\tval-merror:0.066176\n",
      "\n",
      "[0]\ttrain-merror:0.098148\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.198529\n",
      "[2]\ttrain-merror:0.031481\tval-merror:0.213235\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.198529\n",
      "[4]\ttrain-merror:0.014815\tval-merror:0.191176\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.176471\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.176471\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.169118\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.169118\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.161765\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[14]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[15]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[18]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[19]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[20]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[21]\ttrain-merror:0\tval-merror:0.117647\n",
      "[22]\ttrain-merror:0\tval-merror:0.117647\n",
      "[23]\ttrain-merror:0\tval-merror:0.117647\n",
      "[24]\ttrain-merror:0\tval-merror:0.125\n",
      "[25]\ttrain-merror:0\tval-merror:0.125\n",
      "[26]\ttrain-merror:0\tval-merror:0.125\n",
      "[27]\ttrain-merror:0\tval-merror:0.125\n",
      "[28]\ttrain-merror:0\tval-merror:0.125\n",
      "[29]\ttrain-merror:0\tval-merror:0.125\n",
      "[30]\ttrain-merror:0\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[20]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\ttrain-merror:0.090741\tval-merror:0.257353\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.044444\tval-merror:0.213235\n",
      "[2]\ttrain-merror:0.02963\tval-merror:0.183824\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.176471\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.154412\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.161765\n",
      "[6]\ttrain-merror:0\tval-merror:0.161765\n",
      "[7]\ttrain-merror:0\tval-merror:0.154412\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[9]\ttrain-merror:0\tval-merror:0.154412\n",
      "[10]\ttrain-merror:0\tval-merror:0.154412\n",
      "[11]\ttrain-merror:0\tval-merror:0.147059\n",
      "[12]\ttrain-merror:0\tval-merror:0.139706\n",
      "[13]\ttrain-merror:0\tval-merror:0.139706\n",
      "[14]\ttrain-merror:0\tval-merror:0.139706\n",
      "[15]\ttrain-merror:0\tval-merror:0.139706\n",
      "[16]\ttrain-merror:0\tval-merror:0.147059\n",
      "[17]\ttrain-merror:0\tval-merror:0.132353\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.132353\n",
      "[20]\ttrain-merror:0\tval-merror:0.125\n",
      "[21]\ttrain-merror:0\tval-merror:0.125\n",
      "[22]\ttrain-merror:0\tval-merror:0.117647\n",
      "[23]\ttrain-merror:0\tval-merror:0.132353\n",
      "[24]\ttrain-merror:0\tval-merror:0.132353\n",
      "[25]\ttrain-merror:0\tval-merror:0.132353\n",
      "[26]\ttrain-merror:0\tval-merror:0.147059\n",
      "[27]\ttrain-merror:0\tval-merror:0.139706\n",
      "[28]\ttrain-merror:0\tval-merror:0.139706\n",
      "[29]\ttrain-merror:0\tval-merror:0.139706\n",
      "[30]\ttrain-merror:0\tval-merror:0.147059\n",
      "[31]\ttrain-merror:0\tval-merror:0.139706\n",
      "[32]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[22]\ttrain-merror:0\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.077778\tval-merror:0.220588\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038889\tval-merror:0.102941\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.125\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.110294\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.110294\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.102941\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "[16]\ttrain-merror:0\tval-merror:0.095588\n",
      "[17]\ttrain-merror:0\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "[21]\ttrain-merror:0\tval-merror:0.125\n",
      "[22]\ttrain-merror:0\tval-merror:0.102941\n",
      "[23]\ttrain-merror:0\tval-merror:0.110294\n",
      "[24]\ttrain-merror:0\tval-merror:0.110294\n",
      "[25]\ttrain-merror:0\tval-merror:0.117647\n",
      "[26]\ttrain-merror:0\tval-merror:0.117647\n",
      "[27]\ttrain-merror:0\tval-merror:0.117647\n",
      "[28]\ttrain-merror:0\tval-merror:0.117647\n",
      "[29]\ttrain-merror:0\tval-merror:0.117647\n",
      "[30]\ttrain-merror:0\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.109259\tval-merror:0.330882\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.051852\tval-merror:0.25\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.213235\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.213235\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.183824\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.191176\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.191176\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.176471\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.169118\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.176471\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.176471\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.169118\n",
      "[12]\ttrain-merror:0\tval-merror:0.176471\n",
      "[13]\ttrain-merror:0\tval-merror:0.176471\n",
      "[14]\ttrain-merror:0\tval-merror:0.176471\n",
      "[15]\ttrain-merror:0\tval-merror:0.176471\n",
      "[16]\ttrain-merror:0\tval-merror:0.161765\n",
      "[17]\ttrain-merror:0\tval-merror:0.154412\n",
      "[18]\ttrain-merror:0\tval-merror:0.154412\n",
      "[19]\ttrain-merror:0\tval-merror:0.169118\n",
      "[20]\ttrain-merror:0\tval-merror:0.169118\n",
      "[21]\ttrain-merror:0\tval-merror:0.169118\n",
      "[22]\ttrain-merror:0\tval-merror:0.169118\n",
      "[23]\ttrain-merror:0\tval-merror:0.169118\n",
      "[24]\ttrain-merror:0\tval-merror:0.169118\n",
      "[25]\ttrain-merror:0\tval-merror:0.169118\n",
      "[26]\ttrain-merror:0\tval-merror:0.169118\n",
      "[27]\ttrain-merror:0\tval-merror:0.169118\n",
      "Stopping. Best iteration:\n",
      "[17]\ttrain-merror:0\tval-merror:0.154412\n",
      "\n",
      "[0]\ttrain-merror:0.098148\tval-merror:0.220588\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.169118\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.024074\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.117647\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[17]\ttrain-merror:0\tval-merror:0.080882\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[19]\ttrain-merror:0\tval-merror:0.073529\n",
      "[20]\ttrain-merror:0\tval-merror:0.073529\n",
      "[21]\ttrain-merror:0\tval-merror:0.080882\n",
      "[22]\ttrain-merror:0\tval-merror:0.073529\n",
      "[23]\ttrain-merror:0\tval-merror:0.080882\n",
      "[24]\ttrain-merror:0\tval-merror:0.073529\n",
      "[25]\ttrain-merror:0\tval-merror:0.073529\n",
      "[26]\ttrain-merror:0\tval-merror:0.080882\n",
      "[27]\ttrain-merror:0\tval-merror:0.080882\n",
      "[28]\ttrain-merror:0\tval-merror:0.080882\n",
      "[29]\ttrain-merror:0\tval-merror:0.080882\n",
      "Stopping. Best iteration:\n",
      "[19]\ttrain-merror:0\tval-merror:0.073529\n",
      "\n",
      "[0]\ttrain-merror:0.072222\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.048148\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.027778\tval-merror:0.147059\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.110294\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0\tval-merror:0.095588\n",
      "[16]\ttrain-merror:0\tval-merror:0.095588\n",
      "[17]\ttrain-merror:0\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0\tval-merror:0.088235\n",
      "[19]\ttrain-merror:0\tval-merror:0.088235\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "[21]\ttrain-merror:0\tval-merror:0.088235\n",
      "[22]\ttrain-merror:0\tval-merror:0.088235\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "[24]\ttrain-merror:0\tval-merror:0.088235\n",
      "[25]\ttrain-merror:0\tval-merror:0.088235\n",
      "[26]\ttrain-merror:0\tval-merror:0.088235\n",
      "[27]\ttrain-merror:0\tval-merror:0.088235\n",
      "[28]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[18]\ttrain-merror:0\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.066667\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.198529\n",
      "[2]\ttrain-merror:0.027778\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.183824\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.088235\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[14]\ttrain-merror:0\tval-merror:0.080882\n",
      "[15]\ttrain-merror:0\tval-merror:0.080882\n",
      "[16]\ttrain-merror:0\tval-merror:0.080882\n",
      "[17]\ttrain-merror:0\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0\tval-merror:0.088235\n",
      "[19]\ttrain-merror:0\tval-merror:0.080882\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "[21]\ttrain-merror:0\tval-merror:0.080882\n",
      "[22]\ttrain-merror:0\tval-merror:0.073529\n",
      "[23]\ttrain-merror:0\tval-merror:0.073529\n",
      "[24]\ttrain-merror:0\tval-merror:0.073529\n",
      "[25]\ttrain-merror:0\tval-merror:0.073529\n",
      "[26]\ttrain-merror:0\tval-merror:0.080882\n",
      "[27]\ttrain-merror:0\tval-merror:0.073529\n",
      "[28]\ttrain-merror:0\tval-merror:0.073529\n",
      "[29]\ttrain-merror:0\tval-merror:0.073529\n",
      "[30]\ttrain-merror:0\tval-merror:0.073529\n",
      "[31]\ttrain-merror:0\tval-merror:0.073529\n",
      "[32]\ttrain-merror:0\tval-merror:0.073529\n",
      "Stopping. Best iteration:\n",
      "[22]\ttrain-merror:0\tval-merror:0.073529\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.198529\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.024074\tval-merror:0.176471\n",
      "[4]\ttrain-merror:0.014815\tval-merror:0.154412\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[12]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[13]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[14]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[15]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.125\n",
      "[20]\ttrain-merror:0\tval-merror:0.117647\n",
      "[21]\ttrain-merror:0\tval-merror:0.117647\n",
      "[22]\ttrain-merror:0\tval-merror:0.125\n",
      "[23]\ttrain-merror:0\tval-merror:0.117647\n",
      "[24]\ttrain-merror:0\tval-merror:0.117647\n",
      "[25]\ttrain-merror:0\tval-merror:0.117647\n",
      "[26]\ttrain-merror:0\tval-merror:0.117647\n",
      "[27]\ttrain-merror:0\tval-merror:0.125\n",
      "[28]\ttrain-merror:0\tval-merror:0.125\n",
      "[29]\ttrain-merror:0\tval-merror:0.125\n",
      "[30]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[20]\ttrain-merror:0\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.077778\tval-merror:0.272059\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.213235\n",
      "[2]\ttrain-merror:0.02963\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.169118\n",
      "[4]\ttrain-merror:0.014815\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[8]\ttrain-merror:0\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0\tval-merror:0.139706\n",
      "[13]\ttrain-merror:0\tval-merror:0.147059\n",
      "[14]\ttrain-merror:0\tval-merror:0.139706\n",
      "[15]\ttrain-merror:0\tval-merror:0.147059\n",
      "[16]\ttrain-merror:0\tval-merror:0.147059\n",
      "[17]\ttrain-merror:0\tval-merror:0.147059\n",
      "Stopping. Best iteration:\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.087037\tval-merror:0.264706\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.227941\n",
      "[2]\ttrain-merror:0.025926\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.161765\n",
      "[4]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[5]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[8]\ttrain-merror:0\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[10]\ttrain-merror:0\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0\tval-merror:0.125\n",
      "[12]\ttrain-merror:0\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "[15]\ttrain-merror:0\tval-merror:0.139706\n",
      "[16]\ttrain-merror:0\tval-merror:0.125\n",
      "[17]\ttrain-merror:0\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0\tval-merror:0.117647\n",
      "[19]\ttrain-merror:0\tval-merror:0.110294\n",
      "[20]\ttrain-merror:0\tval-merror:0.117647\n",
      "[21]\ttrain-merror:0\tval-merror:0.117647\n",
      "[22]\ttrain-merror:0\tval-merror:0.117647\n",
      "[23]\ttrain-merror:0\tval-merror:0.117647\n",
      "[24]\ttrain-merror:0\tval-merror:0.117647\n",
      "[25]\ttrain-merror:0\tval-merror:0.117647\n",
      "[26]\ttrain-merror:0\tval-merror:0.117647\n",
      "[27]\ttrain-merror:0\tval-merror:0.132353\n",
      "[28]\ttrain-merror:0\tval-merror:0.132353\n",
      "[29]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[19]\ttrain-merror:0\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.083333\tval-merror:0.198529\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.161765\n",
      "[2]\ttrain-merror:0.016667\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.011111\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0\tval-merror:0.125\n",
      "[14]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[4]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.220588\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.183824\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.161765\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.161765\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.154412\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.139706\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[9]\ttrain-merror:0\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0\tval-merror:0.125\n",
      "[11]\ttrain-merror:0\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0\tval-merror:0.132353\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.125\n",
      "[17]\ttrain-merror:0\tval-merror:0.132353\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[9]\ttrain-merror:0\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.103704\tval-merror:0.272059\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.061111\tval-merror:0.191176\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.022222\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.102941\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.110294\n",
      "[20]\ttrain-merror:0\tval-merror:0.102941\n",
      "[21]\ttrain-merror:0\tval-merror:0.110294\n",
      "[22]\ttrain-merror:0\tval-merror:0.110294\n",
      "[23]\ttrain-merror:0\tval-merror:0.110294\n",
      "[24]\ttrain-merror:0\tval-merror:0.110294\n",
      "Stopping. Best iteration:\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "\n",
      "[0]\ttrain-merror:0.090741\tval-merror:0.198529\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1]\ttrain-merror:0.035185\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.018519\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.011111\tval-merror:0.139706\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[5]\ttrain-merror:0.003704\tval-merror:0.073529\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0\tval-merror:0.066176\n",
      "[8]\ttrain-merror:0\tval-merror:0.088235\n",
      "[9]\ttrain-merror:0\tval-merror:0.095588\n",
      "[10]\ttrain-merror:0\tval-merror:0.080882\n",
      "[11]\ttrain-merror:0\tval-merror:0.080882\n",
      "[12]\ttrain-merror:0\tval-merror:0.088235\n",
      "[13]\ttrain-merror:0\tval-merror:0.073529\n",
      "[14]\ttrain-merror:0\tval-merror:0.073529\n",
      "[15]\ttrain-merror:0\tval-merror:0.073529\n",
      "[16]\ttrain-merror:0\tval-merror:0.073529\n",
      "[17]\ttrain-merror:0\tval-merror:0.073529\n",
      "Stopping. Best iteration:\n",
      "[7]\ttrain-merror:0\tval-merror:0.066176\n",
      "\n",
      "[0]\ttrain-merror:0.088889\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.161765\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[15]\ttrain-merror:0\tval-merror:0.125\n",
      "[16]\ttrain-merror:0\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.096296\tval-merror:0.213235\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.053704\tval-merror:0.191176\n",
      "[2]\ttrain-merror:0.031481\tval-merror:0.147059\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.110294\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.117647\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.088235\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.080882\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.088235\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.088235\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.080882\n",
      "[10]\ttrain-merror:0\tval-merror:0.073529\n",
      "[11]\ttrain-merror:0\tval-merror:0.088235\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0\tval-merror:0.102941\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "[16]\ttrain-merror:0\tval-merror:0.102941\n",
      "[17]\ttrain-merror:0\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0\tval-merror:0.095588\n",
      "[19]\ttrain-merror:0\tval-merror:0.088235\n",
      "[20]\ttrain-merror:0\tval-merror:0.073529\n",
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0\tval-merror:0.073529\n",
      "\n",
      "[0]\ttrain-merror:0.062963\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.191176\n",
      "[2]\ttrain-merror:0.025926\tval-merror:0.205882\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.183824\n",
      "[4]\ttrain-merror:0.014815\tval-merror:0.176471\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.169118\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.154412\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.161765\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.161765\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.169118\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[11]\ttrain-merror:0\tval-merror:0.154412\n",
      "[12]\ttrain-merror:0\tval-merror:0.147059\n",
      "[13]\ttrain-merror:0\tval-merror:0.161765\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[15]\ttrain-merror:0\tval-merror:0.169118\n",
      "[16]\ttrain-merror:0\tval-merror:0.154412\n",
      "[17]\ttrain-merror:0\tval-merror:0.147059\n",
      "[18]\ttrain-merror:0\tval-merror:0.154412\n",
      "[19]\ttrain-merror:0\tval-merror:0.139706\n",
      "[20]\ttrain-merror:0\tval-merror:0.139706\n",
      "[21]\ttrain-merror:0\tval-merror:0.132353\n",
      "[22]\ttrain-merror:0\tval-merror:0.132353\n",
      "[23]\ttrain-merror:0\tval-merror:0.132353\n",
      "[24]\ttrain-merror:0\tval-merror:0.132353\n",
      "[25]\ttrain-merror:0\tval-merror:0.132353\n",
      "[26]\ttrain-merror:0\tval-merror:0.139706\n",
      "[27]\ttrain-merror:0\tval-merror:0.132353\n",
      "[28]\ttrain-merror:0\tval-merror:0.132353\n",
      "[29]\ttrain-merror:0\tval-merror:0.132353\n",
      "[30]\ttrain-merror:0\tval-merror:0.132353\n",
      "[31]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[21]\ttrain-merror:0\tval-merror:0.132353\n",
      "\n",
      "[0]\ttrain-merror:0.092593\tval-merror:0.294118\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.044444\tval-merror:0.25\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.235294\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.183824\n",
      "[4]\ttrain-merror:0.018519\tval-merror:0.176471\n",
      "[5]\ttrain-merror:0.014815\tval-merror:0.161765\n",
      "[6]\ttrain-merror:0.012963\tval-merror:0.154412\n",
      "[7]\ttrain-merror:0.011111\tval-merror:0.147059\n",
      "[8]\ttrain-merror:0.009259\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.102941\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "[16]\ttrain-merror:0\tval-merror:0.102941\n",
      "[17]\ttrain-merror:0\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "[20]\ttrain-merror:0\tval-merror:0.110294\n",
      "[21]\ttrain-merror:0\tval-merror:0.095588\n",
      "[22]\ttrain-merror:0\tval-merror:0.102941\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "[24]\ttrain-merror:0\tval-merror:0.088235\n",
      "[25]\ttrain-merror:0\tval-merror:0.088235\n",
      "[26]\ttrain-merror:0\tval-merror:0.095588\n",
      "[27]\ttrain-merror:0\tval-merror:0.102941\n",
      "[28]\ttrain-merror:0\tval-merror:0.110294\n",
      "[29]\ttrain-merror:0\tval-merror:0.110294\n",
      "[30]\ttrain-merror:0\tval-merror:0.102941\n",
      "[31]\ttrain-merror:0\tval-merror:0.102941\n",
      "[32]\ttrain-merror:0\tval-merror:0.102941\n",
      "[33]\ttrain-merror:0\tval-merror:0.095588\n",
      "Stopping. Best iteration:\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.077778\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.035185\tval-merror:0.183824\n",
      "[2]\ttrain-merror:0.02963\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.139706\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[10]\ttrain-merror:0\tval-merror:0.125\n",
      "[11]\ttrain-merror:0\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0\tval-merror:0.125\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "[15]\ttrain-merror:0\tval-merror:0.125\n",
      "[16]\ttrain-merror:0\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0\tval-merror:0.125\n",
      "[18]\ttrain-merror:0\tval-merror:0.132353\n",
      "[19]\ttrain-merror:0\tval-merror:0.117647\n",
      "[20]\ttrain-merror:0\tval-merror:0.117647\n",
      "[21]\ttrain-merror:0\tval-merror:0.125\n",
      "[22]\ttrain-merror:0\tval-merror:0.117647\n",
      "[23]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.101852\tval-merror:0.191176\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.059259\tval-merror:0.161765\n",
      "[2]\ttrain-merror:0.044444\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.031481\tval-merror:0.125\n",
      "[4]\ttrain-merror:0.024074\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.102941\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.102941\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.110294\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.080882\n",
      "[14]\ttrain-merror:0\tval-merror:0.080882\n",
      "[15]\ttrain-merror:0\tval-merror:0.080882\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16]\ttrain-merror:0\tval-merror:0.088235\n",
      "[17]\ttrain-merror:0\tval-merror:0.102941\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.095588\n",
      "[20]\ttrain-merror:0\tval-merror:0.095588\n",
      "[21]\ttrain-merror:0\tval-merror:0.088235\n",
      "[22]\ttrain-merror:0\tval-merror:0.073529\n",
      "[23]\ttrain-merror:0\tval-merror:0.073529\n",
      "[24]\ttrain-merror:0\tval-merror:0.073529\n",
      "[25]\ttrain-merror:0\tval-merror:0.073529\n",
      "[26]\ttrain-merror:0\tval-merror:0.066176\n",
      "[27]\ttrain-merror:0\tval-merror:0.073529\n",
      "[28]\ttrain-merror:0\tval-merror:0.088235\n",
      "[29]\ttrain-merror:0\tval-merror:0.088235\n",
      "[30]\ttrain-merror:0\tval-merror:0.095588\n",
      "[31]\ttrain-merror:0\tval-merror:0.095588\n",
      "[32]\ttrain-merror:0\tval-merror:0.095588\n",
      "[33]\ttrain-merror:0\tval-merror:0.102941\n",
      "[34]\ttrain-merror:0\tval-merror:0.102941\n",
      "[35]\ttrain-merror:0\tval-merror:0.088235\n",
      "[36]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[26]\ttrain-merror:0\tval-merror:0.066176\n",
      "\n",
      "[0]\ttrain-merror:0.098148\tval-merror:0.198529\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.059259\tval-merror:0.176471\n",
      "[2]\ttrain-merror:0.033333\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.018519\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.016667\tval-merror:0.147059\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.012963\tval-merror:0.139706\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[11]\ttrain-merror:0\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0\tval-merror:0.125\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.07963\tval-merror:0.257353\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.035185\tval-merror:0.169118\n",
      "[2]\ttrain-merror:0.027778\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.022222\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.154412\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.012963\tval-merror:0.139706\n",
      "[7]\ttrain-merror:0.009259\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.107407\tval-merror:0.272059\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.016667\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.169118\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.169118\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.169118\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.161765\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.161765\n",
      "[11]\ttrain-merror:0\tval-merror:0.161765\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.169118\n",
      "[13]\ttrain-merror:0\tval-merror:0.169118\n",
      "[14]\ttrain-merror:0\tval-merror:0.161765\n",
      "Stopping. Best iteration:\n",
      "[4]\ttrain-merror:0.016667\tval-merror:0.132353\n",
      "\n",
      "[0]\ttrain-merror:0.1\tval-merror:0.272059\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.027778\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.139706\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.139706\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.110294\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0\tval-merror:0.080882\n",
      "[17]\ttrain-merror:0\tval-merror:0.080882\n",
      "[18]\ttrain-merror:0\tval-merror:0.080882\n",
      "[19]\ttrain-merror:0\tval-merror:0.088235\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "[21]\ttrain-merror:0\tval-merror:0.088235\n",
      "[22]\ttrain-merror:0\tval-merror:0.088235\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "[24]\ttrain-merror:0\tval-merror:0.088235\n",
      "[25]\ttrain-merror:0\tval-merror:0.088235\n",
      "[26]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[16]\ttrain-merror:0\tval-merror:0.080882\n",
      "\n",
      "[0]\ttrain-merror:0.07963\tval-merror:0.257353\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.042593\tval-merror:0.183824\n",
      "[2]\ttrain-merror:0.02963\tval-merror:0.176471\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0\tval-merror:0.125\n",
      "[8]\ttrain-merror:0\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0\tval-merror:0.154412\n",
      "[10]\ttrain-merror:0\tval-merror:0.154412\n",
      "[11]\ttrain-merror:0\tval-merror:0.147059\n",
      "[12]\ttrain-merror:0\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "\n",
      "[0]\ttrain-merror:0.094444\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.139706\n",
      "[2]\ttrain-merror:0.011111\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.125\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.095588\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0\tval-merror:0.117647\n",
      "[15]\ttrain-merror:0\tval-merror:0.110294\n",
      "[16]\ttrain-merror:0\tval-merror:0.117647\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.077778\tval-merror:0.205882\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038889\tval-merror:0.132353\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.117647\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.169118\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.154412\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.169118\n",
      "[8]\ttrain-merror:0\tval-merror:0.154412\n",
      "[9]\ttrain-merror:0\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0\tval-merror:0.117647\n",
      "[11]\ttrain-merror:0\tval-merror:0.132353\n",
      "[12]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.1\tval-merror:0.294118\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.048148\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.018519\tval-merror:0.147059\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.161765\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.139706\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.011111\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.011111\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0\tval-merror:0.110294\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0\tval-merror:0.110294\n",
      "Stopping. Best iteration:\n",
      "[9]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.088889\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.161765\n",
      "[2]\ttrain-merror:0.018519\tval-merror:0.161765\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[8]\ttrain-merror:0\tval-merror:0.110294\n",
      "[9]\ttrain-merror:0\tval-merror:0.095588\n",
      "[10]\ttrain-merror:0\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0\tval-merror:0.088235\n",
      "[12]\ttrain-merror:0\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0\tval-merror:0.102941\n",
      "[15]\ttrain-merror:0\tval-merror:0.110294\n",
      "[16]\ttrain-merror:0\tval-merror:0.102941\n",
      "[17]\ttrain-merror:0\tval-merror:0.102941\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.110294\n",
      "[20]\ttrain-merror:0\tval-merror:0.095588\n",
      "[21]\ttrain-merror:0\tval-merror:0.095588\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.07963\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.035185\tval-merror:0.169118\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.073529\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.095588\n",
      "[4]\ttrain-merror:0.016667\tval-merror:0.088235\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.095588\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.073529\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.073529\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.080882\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[10]\ttrain-merror:0\tval-merror:0.073529\n",
      "[11]\ttrain-merror:0\tval-merror:0.066176\n",
      "[12]\ttrain-merror:0\tval-merror:0.058824\n",
      "[13]\ttrain-merror:0\tval-merror:0.066176\n",
      "[14]\ttrain-merror:0\tval-merror:0.058824\n",
      "[15]\ttrain-merror:0\tval-merror:0.066176\n",
      "[16]\ttrain-merror:0\tval-merror:0.058824\n",
      "[17]\ttrain-merror:0\tval-merror:0.051471\n",
      "[18]\ttrain-merror:0\tval-merror:0.058824\n",
      "[19]\ttrain-merror:0\tval-merror:0.051471\n",
      "[20]\ttrain-merror:0\tval-merror:0.058824\n",
      "[21]\ttrain-merror:0\tval-merror:0.058824\n",
      "[22]\ttrain-merror:0\tval-merror:0.058824\n",
      "[23]\ttrain-merror:0\tval-merror:0.051471\n",
      "[24]\ttrain-merror:0\tval-merror:0.044118\n",
      "[25]\ttrain-merror:0\tval-merror:0.044118\n",
      "[26]\ttrain-merror:0\tval-merror:0.044118\n",
      "[27]\ttrain-merror:0\tval-merror:0.044118\n",
      "[28]\ttrain-merror:0\tval-merror:0.036765\n",
      "[29]\ttrain-merror:0\tval-merror:0.044118\n",
      "[30]\ttrain-merror:0\tval-merror:0.036765\n",
      "[31]\ttrain-merror:0\tval-merror:0.036765\n",
      "[32]\ttrain-merror:0\tval-merror:0.036765\n",
      "[33]\ttrain-merror:0\tval-merror:0.036765\n",
      "[34]\ttrain-merror:0\tval-merror:0.036765\n",
      "[35]\ttrain-merror:0\tval-merror:0.036765\n",
      "[36]\ttrain-merror:0\tval-merror:0.044118\n",
      "[37]\ttrain-merror:0\tval-merror:0.044118\n",
      "[38]\ttrain-merror:0\tval-merror:0.044118\n",
      "Stopping. Best iteration:\n",
      "[28]\ttrain-merror:0\tval-merror:0.036765\n",
      "\n",
      "[0]\ttrain-merror:0.109259\tval-merror:0.220588\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.183824\n",
      "[2]\ttrain-merror:0.02963\tval-merror:0.183824\n",
      "[3]\ttrain-merror:0.022222\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.139706\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[9]\ttrain-merror:0\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.117647\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.125\n",
      "[17]\ttrain-merror:0\tval-merror:0.125\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[9]\ttrain-merror:0\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.07037\tval-merror:0.301471\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.02037\tval-merror:0.191176\n",
      "[2]\ttrain-merror:0.014815\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.009259\tval-merror:0.161765\n",
      "[4]\ttrain-merror:0.005556\tval-merror:0.176471\n",
      "[5]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.154412\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.161765\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[12]\ttrain-merror:0\tval-merror:0.161765\n",
      "[13]\ttrain-merror:0\tval-merror:0.161765\n",
      "[14]\ttrain-merror:0\tval-merror:0.161765\n",
      "[15]\ttrain-merror:0\tval-merror:0.161765\n",
      "[16]\ttrain-merror:0\tval-merror:0.154412\n",
      "[17]\ttrain-merror:0\tval-merror:0.154412\n",
      "[18]\ttrain-merror:0\tval-merror:0.154412\n",
      "Stopping. Best iteration:\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.154412\n",
      "\n",
      "[0]\ttrain-merror:0.07963\tval-merror:0.205882\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.191176\n",
      "[2]\ttrain-merror:0.024074\tval-merror:0.139706\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.016667\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.009259\tval-merror:0.117647\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.110294\n",
      "[9]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0\tval-merror:0.095588\n",
      "[14]\ttrain-merror:0\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0\tval-merror:0.088235\n",
      "[17]\ttrain-merror:0\tval-merror:0.088235\n",
      "[18]\ttrain-merror:0\tval-merror:0.088235\n",
      "[19]\ttrain-merror:0\tval-merror:0.095588\n",
      "[20]\ttrain-merror:0\tval-merror:0.095588\n",
      "[21]\ttrain-merror:0\tval-merror:0.088235\n",
      "[22]\ttrain-merror:0\tval-merror:0.088235\n",
      "[23]\ttrain-merror:0\tval-merror:0.088235\n",
      "[24]\ttrain-merror:0\tval-merror:0.088235\n",
      "[25]\ttrain-merror:0\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[15]\ttrain-merror:0\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.094444\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.044444\tval-merror:0.205882\n",
      "[2]\ttrain-merror:0.037037\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.169118\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.139706\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.154412\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.007407\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.110294\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "[21]\ttrain-merror:0\tval-merror:0.095588\n",
      "[22]\ttrain-merror:0\tval-merror:0.102941\n",
      "[23]\ttrain-merror:0\tval-merror:0.102941\n",
      "[24]\ttrain-merror:0\tval-merror:0.110294\n",
      "[25]\ttrain-merror:0\tval-merror:0.110294\n",
      "[26]\ttrain-merror:0\tval-merror:0.117647\n",
      "[27]\ttrain-merror:0\tval-merror:0.110294\n",
      "[28]\ttrain-merror:0\tval-merror:0.117647\n",
      "[29]\ttrain-merror:0\tval-merror:0.117647\n",
      "[30]\ttrain-merror:0\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[20]\ttrain-merror:0\tval-merror:0.088235\n",
      "\n",
      "[0]\ttrain-merror:0.096296\tval-merror:0.213235\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.051852\tval-merror:0.191176\n",
      "[2]\ttrain-merror:0.025926\tval-merror:0.213235\n",
      "[3]\ttrain-merror:0.022222\tval-merror:0.257353\n",
      "[4]\ttrain-merror:0.02037\tval-merror:0.227941\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.205882\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.191176\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.183824\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.191176\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.183824\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.183824\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.191176\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.169118\n",
      "[13]\ttrain-merror:0\tval-merror:0.169118\n",
      "[14]\ttrain-merror:0\tval-merror:0.154412\n",
      "[15]\ttrain-merror:0\tval-merror:0.154412\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.161765\n",
      "[18]\ttrain-merror:0\tval-merror:0.161765\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[21]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[22]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[23]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[24]\ttrain-merror:0\tval-merror:0.147059\n",
      "[25]\ttrain-merror:0\tval-merror:0.147059\n",
      "[26]\ttrain-merror:0\tval-merror:0.147059\n",
      "[27]\ttrain-merror:0\tval-merror:0.147059\n",
      "[28]\ttrain-merror:0\tval-merror:0.147059\n",
      "[29]\ttrain-merror:0\tval-merror:0.147059\n",
      "[30]\ttrain-merror:0\tval-merror:0.147059\n",
      "Stopping. Best iteration:\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "\n",
      "[0]\ttrain-merror:0.087037\tval-merror:0.205882\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.027778\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.014815\tval-merror:0.213235\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.205882\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.198529\n",
      "[5]\ttrain-merror:0.007407\tval-merror:0.198529\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.176471\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.198529\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.205882\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.191176\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.183824\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.176471\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.176471\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.176471\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.183824\n",
      "[15]\ttrain-merror:0\tval-merror:0.176471\n",
      "[16]\ttrain-merror:0\tval-merror:0.183824\n",
      "Stopping. Best iteration:\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.176471\n",
      "\n",
      "[0]\ttrain-merror:0.096296\tval-merror:0.227941\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.161765\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.016667\tval-merror:0.154412\n",
      "[4]\ttrain-merror:0.014815\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[9]\ttrain-merror:0\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0\tval-merror:0.117647\n",
      "[11]\ttrain-merror:0\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.117647\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "[16]\ttrain-merror:0\tval-merror:0.102941\n",
      "[17]\ttrain-merror:0\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "[20]\ttrain-merror:0\tval-merror:0.102941\n",
      "[21]\ttrain-merror:0\tval-merror:0.110294\n",
      "[22]\ttrain-merror:0\tval-merror:0.110294\n",
      "[23]\ttrain-merror:0\tval-merror:0.110294\n",
      "[24]\ttrain-merror:0\tval-merror:0.110294\n",
      "[25]\ttrain-merror:0\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[15]\ttrain-merror:0\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.107407\tval-merror:0.220588\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.169118\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.117647\n",
      "[4]\ttrain-merror:0.016667\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.220588\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.154412\n",
      "[2]\ttrain-merror:0.018519\tval-merror:0.139706\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.132353\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0\tval-merror:0.110294\n",
      "[9]\ttrain-merror:0\tval-merror:0.110294\n",
      "[10]\ttrain-merror:0\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0\tval-merror:0.110294\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.102941\n",
      "[17]\ttrain-merror:0\tval-merror:0.102941\n",
      "[18]\ttrain-merror:0\tval-merror:0.102941\n",
      "[19]\ttrain-merror:0\tval-merror:0.102941\n",
      "[20]\ttrain-merror:0\tval-merror:0.102941\n",
      "[21]\ttrain-merror:0\tval-merror:0.102941\n",
      "[22]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.07963\tval-merror:0.286765\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.037037\tval-merror:0.213235\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.198529\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.011111\tval-merror:0.139706\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.003704\tval-merror:0.139706\n",
      "[7]\ttrain-merror:0\tval-merror:0.147059\n",
      "[8]\ttrain-merror:0\tval-merror:0.139706\n",
      "[9]\ttrain-merror:0\tval-merror:0.132353\n",
      "[10]\ttrain-merror:0\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0\tval-merror:0.117647\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "\n",
      "[0]\ttrain-merror:0.087037\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.031481\tval-merror:0.235294\n",
      "[2]\ttrain-merror:0.02037\tval-merror:0.220588\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.198529\n",
      "[4]\ttrain-merror:0.012963\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0.011111\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.169118\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.161765\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.161765\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.001852\tval-merror:0.139706\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[13]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[21]\ttrain-merror:0.001852\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "\n",
      "[0]\ttrain-merror:0.085185\tval-merror:0.220588\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033333\tval-merror:0.139706\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.02037\tval-merror:0.139706\n",
      "[4]\ttrain-merror:0.02037\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.02037\tval-merror:0.117647\n",
      "[6]\ttrain-merror:0.014815\tval-merror:0.095588\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.088235\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.088235\n",
      "[9]\ttrain-merror:0.007407\tval-merror:0.088235\n",
      "[10]\ttrain-merror:0.007407\tval-merror:0.102941\n",
      "[11]\ttrain-merror:0.009259\tval-merror:0.095588\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.095588\n",
      "[13]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[14]\ttrain-merror:0.003704\tval-merror:0.088235\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[21]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[22]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "[23]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "[24]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[25]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[26]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "Stopping. Best iteration:\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.073529\n",
      "\n",
      "[0]\ttrain-merror:0.081481\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.046296\tval-merror:0.220588\n",
      "[2]\ttrain-merror:0.031481\tval-merror:0.191176\n",
      "[3]\ttrain-merror:0.027778\tval-merror:0.213235\n",
      "[4]\ttrain-merror:0.018519\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0.009259\tval-merror:0.139706\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[7]\ttrain-merror:0.003704\tval-merror:0.132353\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.102941\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[11]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0.003704\tval-merror:0.117647\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[15]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[16]\ttrain-merror:0.001852\tval-merror:0.095588\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[20]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[21]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[22]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[23]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[24]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[25]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[26]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "[27]\ttrain-merror:0.001852\tval-merror:0.088235\n",
      "Stopping. Best iteration:\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.080882\n",
      "\n",
      "[0]\ttrain-merror:0.107407\tval-merror:0.191176\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.051852\tval-merror:0.183824\n",
      "[2]\ttrain-merror:0.042593\tval-merror:0.139706\n",
      "[3]\ttrain-merror:0.027778\tval-merror:0.139706\n",
      "[4]\ttrain-merror:0.02037\tval-merror:0.132353\n",
      "[5]\ttrain-merror:0.016667\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.012963\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.117647\n",
      "[8]\ttrain-merror:0.007407\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.003704\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.003704\tval-merror:0.110294\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[12]\ttrain-merror:0\tval-merror:0.102941\n",
      "[13]\ttrain-merror:0\tval-merror:0.102941\n",
      "[14]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[15]\ttrain-merror:0\tval-merror:0.110294\n",
      "[16]\ttrain-merror:0\tval-merror:0.110294\n",
      "[17]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "[20]\ttrain-merror:0\tval-merror:0.102941\n",
      "[21]\ttrain-merror:0\tval-merror:0.102941\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.102941\n",
      "\n",
      "[0]\ttrain-merror:0.075926\tval-merror:0.316176\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.025926\tval-merror:0.279412\n",
      "[2]\ttrain-merror:0.016667\tval-merror:0.264706\n",
      "[3]\ttrain-merror:0.014815\tval-merror:0.213235\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.220588\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.183824\n",
      "[6]\ttrain-merror:0.007407\tval-merror:0.154412\n",
      "[7]\ttrain-merror:0.001852\tval-merror:0.169118\n",
      "[8]\ttrain-merror:0\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0\tval-merror:0.176471\n",
      "[10]\ttrain-merror:0\tval-merror:0.132353\n",
      "[11]\ttrain-merror:0\tval-merror:0.139706\n",
      "[12]\ttrain-merror:0\tval-merror:0.132353\n",
      "[13]\ttrain-merror:0\tval-merror:0.132353\n",
      "[14]\ttrain-merror:0\tval-merror:0.132353\n",
      "[15]\ttrain-merror:0\tval-merror:0.132353\n",
      "[16]\ttrain-merror:0\tval-merror:0.139706\n",
      "[17]\ttrain-merror:0\tval-merror:0.132353\n",
      "[18]\ttrain-merror:0\tval-merror:0.132353\n",
      "[19]\ttrain-merror:0\tval-merror:0.132353\n",
      "[20]\ttrain-merror:0\tval-merror:0.132353\n",
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0\tval-merror:0.132353\n",
      "\n",
      "[0]\ttrain-merror:0.094444\tval-merror:0.264706\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.040741\tval-merror:0.169118\n",
      "[2]\ttrain-merror:0.037037\tval-merror:0.169118\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[4]\ttrain-merror:0.009259\tval-merror:0.161765\n",
      "[5]\ttrain-merror:0.005556\tval-merror:0.154412\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.154412\n",
      "[8]\ttrain-merror:0.003704\tval-merror:0.154412\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.154412\n",
      "[11]\ttrain-merror:0\tval-merror:0.154412\n",
      "[12]\ttrain-merror:0\tval-merror:0.154412\n",
      "[13]\ttrain-merror:0\tval-merror:0.154412\n",
      "Stopping. Best iteration:\n",
      "[3]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "\n",
      "[0]\ttrain-merror:0.081481\tval-merror:0.235294\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.031481\tval-merror:0.147059\n",
      "[2]\ttrain-merror:0.022222\tval-merror:0.154412\n",
      "[3]\ttrain-merror:0.022222\tval-merror:0.176471\n",
      "[4]\ttrain-merror:0.018519\tval-merror:0.176471\n",
      "[5]\ttrain-merror:0.012963\tval-merror:0.147059\n",
      "[6]\ttrain-merror:0.012963\tval-merror:0.139706\n",
      "[7]\ttrain-merror:0.007407\tval-merror:0.154412\n",
      "[8]\ttrain-merror:0.001852\tval-merror:0.147059\n",
      "[9]\ttrain-merror:0.001852\tval-merror:0.139706\n",
      "[10]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.117647\n",
      "[12]\ttrain-merror:0\tval-merror:0.110294\n",
      "[13]\ttrain-merror:0\tval-merror:0.110294\n",
      "[14]\ttrain-merror:0\tval-merror:0.117647\n",
      "[15]\ttrain-merror:0\tval-merror:0.125\n",
      "[16]\ttrain-merror:0\tval-merror:0.117647\n",
      "[17]\ttrain-merror:0\tval-merror:0.110294\n",
      "[18]\ttrain-merror:0\tval-merror:0.110294\n",
      "[19]\ttrain-merror:0\tval-merror:0.110294\n",
      "[20]\ttrain-merror:0\tval-merror:0.110294\n",
      "[21]\ttrain-merror:0\tval-merror:0.117647\n",
      "[22]\ttrain-merror:0\tval-merror:0.110294\n",
      "Stopping. Best iteration:\n",
      "[12]\ttrain-merror:0\tval-merror:0.110294\n",
      "\n",
      "[0]\ttrain-merror:0.094444\tval-merror:0.242647\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.046296\tval-merror:0.227941\n",
      "[2]\ttrain-merror:0.025926\tval-merror:0.183824\n",
      "[3]\ttrain-merror:0.011111\tval-merror:0.183824\n",
      "[4]\ttrain-merror:0.007407\tval-merror:0.176471\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5]\ttrain-merror:0.007407\tval-merror:0.161765\n",
      "[6]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[7]\ttrain-merror:0.005556\tval-merror:0.147059\n",
      "[8]\ttrain-merror:0.005556\tval-merror:0.132353\n",
      "[9]\ttrain-merror:0.005556\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.005556\tval-merror:0.117647\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "[12]\ttrain-merror:0\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.001852\tval-merror:0.125\n",
      "[14]\ttrain-merror:0\tval-merror:0.117647\n",
      "[15]\ttrain-merror:0\tval-merror:0.117647\n",
      "[16]\ttrain-merror:0\tval-merror:0.117647\n",
      "[17]\ttrain-merror:0\tval-merror:0.117647\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.132353\n",
      "[20]\ttrain-merror:0\tval-merror:0.117647\n",
      "[21]\ttrain-merror:0\tval-merror:0.117647\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.001852\tval-merror:0.110294\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import xgboost as xgb\n",
    "import pickle\n",
    "import numpy as np\n",
    "from sklearn import model_selection\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import f1_score\n",
    "\n",
    "def get_data(data):\n",
    "    DATA=data\n",
    "    X=[]\n",
    "    Y=[]\n",
    "    teeths=['11','12','13','14','15','16','17','18','21','22','23','24','25','26','27','28','31','32','33','34','35','36','37','38','41','42','43','44','45','46','47','48']\n",
    "    #teeths=['11','12','13','14','15','21','22','23','24','25','31','32','33','34','35','41','42','43','44','45']\n",
    "    periodontitis=['l','m','h','note1']\n",
    "\n",
    "    for key in DATA.keys():\n",
    "        try:\n",
    "            cl=DATA[key]['class']\n",
    "            \n",
    "            \n",
    "            ratio = np.zeros((32))\n",
    "            new_teeths=DATA[key].keys()\n",
    "            new_teeths=list(new_teeths)\n",
    "            new_teeths.remove('class')\n",
    "            for tooth in new_teeths:\n",
    "                #有些样本中牙的数量太少\n",
    "                if(len(new_teeths) == 1): \n",
    "                    continue\n",
    "                else:\n",
    "                    #有些样本中的牙的ratio为NaN，无法计算，continue\n",
    "                    if(math.isnan(DATA[key][tooth][2])):\n",
    "                        continue\n",
    "                    ratio[list(new_teeths).index(tooth)] = DATA[key][tooth][2]\n",
    "                    #ratio.append(distance_data[i][tooth][2])\n",
    "\n",
    "\n",
    "            #如果样本中的牙的数量小于32，则用插值的办法（第一个和第二个的mean，依此类推）来补充，直到向量长度为32\n",
    "            #将每个牙都根据周围的牙齿来进行插值，输出的顺序按照牙齿的标号顺序\n",
    "            for j in range(0,len(ratio)):\n",
    "                if(ratio.all() > 0):\n",
    "                    break\n",
    "                if(ratio[j] > 0):\n",
    "                    continue\n",
    "                elif(j == 0 and ratio[j+1] > 0 and ratio[j+2] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j+2])/2\n",
    "                elif(j == len(ratio) - 1 and  ratio[j-1] > 0 and ratio[j-2] > 0):\n",
    "                    ratio[j] = (ratio[j-1] + ratio[j-2])/2\n",
    "                elif(j > 0 and j < len(ratio) - 1 and ratio[j+1] > 0 and ratio[j-1] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j - 1])/2\n",
    "                else:\n",
    "                    ratio[j] = (np.random.choice(ratio[np.where(ratio > 0)],1)+np.random.choice(ratio[np.where(ratio > 0)],1))/2\n",
    "            X.append(ratio.tolist()) \n",
    "            \"\"\"\n",
    "            \n",
    "            tmp=[]\n",
    "            for teeth_id in teeths:\n",
    "                try:\n",
    "                    if math.isnan(DATA[key][teeth_id][2]):\n",
    "                        tmp.append(0)\n",
    "                    else:\n",
    "                        tmp.append(DATA[key][teeth_id][2])\n",
    "                except:\n",
    "                    tmp.append(0)\n",
    "            X.append(tmp)\n",
    "            \"\"\"\n",
    "                \n",
    "            if cl=='note1':\n",
    "                Y.append(0)\n",
    "            elif cl=='l':\n",
    "                Y.append(1)\n",
    "            elif cl=='m':\n",
    "                Y.append(2)\n",
    "            elif cl=='h':\n",
    "                Y.append(3)\n",
    "\n",
    "        except:\n",
    "            pass\n",
    "    \n",
    "    \n",
    "    from imblearn.over_sampling import SMOTE\n",
    "    smo = SMOTE(random_state=5)\n",
    "    X_smo, Y_smo = smo.fit_sample(X, Y)\n",
    "    \n",
    "    \n",
    "    tmp_data=[[X_smo[i],Y_smo[i]] for i in range(len(Y_smo))]\n",
    "    import random\n",
    "    random.shuffle(tmp_data)\n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "\n",
    "    \n",
    "    \"\"\"\n",
    "    tmp_data=[[X[i],Y[i]] for i in range(len(Y))]\n",
    "    import random\n",
    "    random.shuffle(tmp_data)\n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    \"\"\"\n",
    "    \n",
    "    return X_train,Y_train,X_val,Y_val\n",
    "\n",
    "def get_small_class_acc_f1(Y,pred):\n",
    "    small_class=[0,1,2,3]\n",
    "    output=[]\n",
    "\n",
    "    for key in small_class:\n",
    "\n",
    "        TP=0\n",
    "        TN=0\n",
    "        FP=0\n",
    "        FN=0\n",
    "\n",
    "        for i in range(len(Y)):\n",
    "            if Y[i]==pred[i]==int(key):\n",
    "                TP+=1\n",
    "            elif (Y[i]!=int(key))&(pred[i]==int(key)):\n",
    "                FP+=1\n",
    "            elif (Y[i]==int(key))&(pred[i]!=int(key)):\n",
    "                FN+=1\n",
    "            elif (Y[i]!=int(key))&(pred[i]!=int(key)):\n",
    "                TN+=1\n",
    "\n",
    "        try:\n",
    "            f1=2*TP/(2*TP+FP+FN)\n",
    "            acc=(TP+TN)/(TP+TN+FP+FN)\n",
    "            output.append(acc)\n",
    "            output.append(f1)\n",
    "        except:\n",
    "            output.append(0)\n",
    "            output.append(0)\n",
    "    return output\n",
    "\n",
    "import json\n",
    "\n",
    "with open(\"maskrcnn_train_distance_vertical.json\",'r') as load_f:\n",
    "    all_data = json.load(load_f)\n",
    "\n",
    "accs=[]\n",
    "f1s=[]\n",
    "small_acc_f1=[]\n",
    "acc=0\n",
    "for epoch in range(100):\n",
    "    X_train,Y_train,X_val,Y_val=get_data(all_data)\n",
    "\n",
    "    params={\n",
    "    'booster':'gbtree',\n",
    "    'objective': 'multi:softmax', \n",
    "    'num_class':4,\n",
    "    'gamma':0.5,  # 在树的叶子节点下一个分区的最小损失，越大算法模型越保守 。[0:]\n",
    "    'max_depth':24, # 构建树的深度 [1:]\n",
    "    #'lambda':450,  # L2 正则项权重\n",
    "    'subsample':0.7, # 采样训练数据，设置为0.5，随机选择一般的数据实例 (0:1]\n",
    "    'colsample_bytree':0.7, # 构建树树时的采样比率 (0:1]\n",
    "    #'min_child_weight':12, # 节点的最少特征数\n",
    "    'silent':1 ,\n",
    "    'eta': 0.2, # 如同学习率\n",
    "    'seed':710,\n",
    "    'nthread':4,# cpu 线程数,根据自己U的个数适当调整\n",
    "    }\n",
    "\n",
    "    plst = list(params.items())\n",
    "\n",
    "    num_rounds = 50\n",
    "\n",
    "    xgtrain = xgb.DMatrix(X_train, label=Y_train)\n",
    "    xgval =  xgb.DMatrix(X_val, label=Y_val)\n",
    "    \n",
    "    watchlist = [(xgtrain, 'train'),(xgval, 'val')]\n",
    "\n",
    "    # training model \n",
    "    model = xgb.train(plst, xgtrain, num_rounds, watchlist,early_stopping_rounds=10)\n",
    "    #model.save_model('./model/xgb.model') # 用于存储训练出的模型\n",
    "    preds = model.predict(xgval,ntree_limit=model.best_iteration)\n",
    "    \n",
    "    # Evaluation\n",
    "    cur_acc=accuracy_score(Y_val,preds)\n",
    "    f1=f1_score(Y_val,preds, average='macro')\n",
    "    accs.append(cur_acc)\n",
    "    f1s.append(f1)\n",
    "    small_acc_f1.append(get_small_class_acc_f1(Y_val,preds))\n",
    "    ## Save Model\n",
    "    \n",
    "    if cur_acc>acc:\n",
    "        pickle.dump(model, open(\"XGboost_4class.pkl\", \"wb\"))\n",
    "    acc=cur_acc\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 552,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-18T08:28:11.919838Z",
     "start_time": "2019-12-18T08:28:11.484996Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set()\n",
    "plt.figure(figsize=[8,8])\n",
    "sns.distplot(accs,label='Acc (Mean: %s)'%str(np.mean(accs)),bins=10)\n",
    "sns.distplot(f1s,label='F1 Score (Mean: %s)'%str(np.mean(f1s)),bins=10)\n",
    "plt.xlabel('Value',fontsize=15)\n",
    "plt.legend(fontsize=13,loc='upper left')\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 503,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-18T08:13:45.258020Z",
     "start_time": "2019-12-18T08:13:43.751432Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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cDhITPyLAQMGlfuevn0vdn3hAZg+fSoXXtit3P1tNhtpaakUFOQTEBBIu3btKesZDc4HN7Rr155du3aUu706Zaguq9XK6tUrGDduQonXg4KCXL+T0gwcPZrG3r17mDVruuvV4gFuT/LDD98xc+bjrtePHcvmiy8+49FHZ5c4SosWLTGZfPnrr510794TgMTEXfj6+tK8eYsyy2swFH+nd35Gdu3awSWXDHR9nlu3bkP//gP59ttvGDHicnbu3EGbNm256KLiaxkREcnIkVfw+OMzq3CVim+/OK+JSENRqRayM4yh+BuzwWAgPT2d7du3M2JE8X3KESNGsH37djIyMmqnpG7oxx+/Iy0tlRdeeJVly952/Zs/fyHbtv3O33/v5txzz6NDh448+eTjZGZmYLfb+fvv3Rw9epTw8AgGDoznv/99kuTkwzgcDg4ePMDBgwfKPF+vXheRmppCSsqRMrcHBATy7LNLmDfvmTL/cF955dV89tlGvvnma6xWK1arlb179/Drr/8HFHdL+viYCA0NpaioiGXLXi7RWqoJI0dewddff8Evv/xEUVER7777FoWFhVxyycBy37Njx59YrVYKCgr45JMP+fHH77nxxn8CxdOV1q1b7eq2TUraz+LFz3LBBV1drcorrhjD119/yR9/bMVut7Np03oOHkyid+/i+5oJCSPJzs7io4/+h81mIzHxLzZtWuca7FRRGaA4SC0WC1arFYfDgcViKTEQ6tTXrNYiLBZLqQFx3367mZycYwwdOpxTXXHF1axdu4q9e/dgtVp555038PU10blzFxo1asxHH61m2bJ3XP+ioqK57bY7+M9/Jpc4zrp1qwkLC6Nv3/4lXvf19WPIkGEsXbqEzMwMMjMzWLp0CUOHDndNSfrqq89d94zT0lJZsGAOHTp0pGnTZgB07tyFzZu/dN1z3rdvL5s3f+kafNapU2f27NnNTz/9gMPhICsri1WrPikxOK2iawnF07/69evvFrMIHA6w2R1l/rM7INdiLfWvHq+bIbWo0tOeHnroIb799lscDgdLly4lOTmZxo0bu/6H8PLyolGjRiQnJxMREVHB0arO18ebnh0b1/hxyzpPZa1Y8TH9+w8oNYc2MjKKTp0uYMWKj7j33qnMnfsUixYt5MYbx5Gfn0/z5i2Ot1iimDZtBi+/vIQ777yVY8eyadw4lilT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SU8/ire3Dy1atGTmzNmuXh8vLy8WLHiGJ5+cTUJCPEFBwYwde0OpL5arV68kOrpxmfe3f/31/5g793Fyc80EBgbSuXMXnn56kasr2m63M2/ebJKS9mMwGOjWrTuLFy8lIiLSdYyHH57FU0/N4+qrR+Hr60uvXr2ZPPnEtLSkpH0cPHiASy8bgq1mOm/EwxkcNdUPWE3p6ebjIx5POHJkPzExLQHw9jZitdrd9sEgtc1Zf3fzww/f8eaby1i06OWKd64md6372eLJ9a8PdZ85cxo9evQiYfho8gqKytwn/ehB9mWU/nvSs2NjAn3Lbw9FRweTllZ6sJ8naMh1NxoNREYGlbu93rSQC/Gt8gM7pPb06dO3RFepiKdxDqSz2dU8lpqhe8giIiJuQIEsIiLiBhTIIiIibsBtA7mOx5qJiJwRh8OB/opJVbhlIHt5eVNUVFjxjiIibspht+FwnP7BIiInc8tADgoKIysrjcJCi1rKIlLvOBwOcnOzyM5XIEvlueW0J3//4mfWZmcfJSvLjt3u3vMRa5PRaPTY+nty3cGz61+f6m53QGFRyYVYHEB+oYHsAp+6KZTUS24ZyFAcyv7+gQ16knhleHL9Pbnu4Nn1r091z7VY+XlHSsU7ilTALbusRUREPI0CWURExA0okEVERNyAAllERMQNKJBFRETcgAJZRETEDSiQRURE3IACWURExA0okEVERNyAAllERMQNKJBFRETcgAJZRETEDSiQRURE3IACWURExA0okEVERNyAAllERMQNKJBFRETcgAJZRETEDSiQRURE3IACWURExA0okEVERNyAAllERMQNKJBFRETcgAJZRETEDSiQRURE3IACWURExA0okEVERNyAAllERMQNKJBFRETcgAJZRETEDSiQRURE3IACWURExA0okEVERNyAAllERMQNKJBFRETcgAJZRETEDXhXtENmZib3338/SUlJmEwmWrZsyaxZs4iIiKBDhw60b98eo7E41+fNm0eHDh1qvdAiIiINTYWBbDAYmDhxIr179wZg7ty5LFiwgDlz5gDw3nvvERgYWLulFBERaeAq7LIOCwtzhTFA165dOXz4cK0WSkRExNNU2EI+md1u591332XQoEGu12644QZsNhuXXHIJd911FyaTqUoFiIwMqnCf6OjgKh2zofHk+nty3cGz619f6u7IyCM4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RtM0AB5//HG+//3vc/fdd3PppZfi8Xg4cOAA3/72t89Izheit7eXQ4cO8fzzz3/kNafTOaljCyFGSUIWIk6sWLGC7OxsNm/eTGdnJ8PDw6e7qwG2bNnCzTffzFe/+tXTX6upqRnzmIZhYLPZPjLwq7+//4zP09PTWbhwIXffffdHjpGWlnYhzRFCfIgkZCHihGEY3HjjjWzZsoX29nbKysqoqKg4/XowGPzIXOSz3dF+kKZp5OXlUVdXd/pr0WiUt95664ztVqxYwbZt2ygvL5f5zkJME0nIQsSR9evX8/Of/5yXX36Ze++994zXrrzySn71q1+xaNEiZs2axXPPPUdzc/N5j7l27VqeeuopKioqKCws5OmnnyYQCJyxzec//3leeOEF/vqv/5rPfOYz5Obm0tXVxe7du7nsssu4+eabp7SdQiQjSchCxJFLLrmEoqIimpubz+iuBvjKV75CX18fjz76KJqmsW7dOh544AH+/u//fsxj3nvvvfT29vLoo49it9u58847KSsr45lnnjm9TVZWFk899RSPPvoo3/3udxkYGCA3N5dly5ZRXl4+LW0VItloSilldRBCCCFEspOFQYQQQogYIAlZCCGEiAGSkIUQQogYIAlZCCGEiAGSkIUQQogYIAlZCCGEiAGSkIUQQogYIAlZCCGEiAH/P2FBOMWIvm4YAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(4):\n",
    "    accs=np.array(small_acc_f1)[:,2*i]\n",
    "    f1s=np.array(small_acc_f1)[:,2*i+1]\n",
    "    \n",
    "    sns.set()\n",
    "    plt.figure(figsize=[8,8])\n",
    "    sns.distplot(accs,label='Acc (Mean: %s)'%str(np.mean(accs)),bins=10)\n",
    "    sns.distplot(f1s,label='F1 Score (Mean: %s)'%str(np.mean(f1s)),bins=10)\n",
    "    plt.xlabel('Value',fontsize=15)\n",
    "    plt.legend(fontsize=13,loc='upper left')\n",
    "    plt.show()\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction with label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 560,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-18T08:29:15.486396Z",
     "start_time": "2019-12-18T08:29:15.219860Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8461538461538461 0.7013888888888888\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "\n",
    "def get_data(data):\n",
    "    DATA=data\n",
    "    X=[]\n",
    "    Y=[]\n",
    "    teeths=['11','12','13','14','15','16','17','18','21','22','23','24','25','26','27','28','31','32','33','34','35','36','37','38','41','42','43','44','45','46','47','48']\n",
    "    #teeths=['11','12','13','14','15','21','22','23','24','25','31','32','33','34','35','41','42','43','44','45']\n",
    "    periodontitis=['l','m','h','note1']\n",
    "\n",
    "    for key in DATA.keys():\n",
    "        try:\n",
    "            cl=DATA[key]['class']\n",
    "            \n",
    "            \n",
    "            ratio = np.zeros((32))\n",
    "            new_teeths=DATA[key].keys()\n",
    "            new_teeths=list(new_teeths)\n",
    "            new_teeths.remove('class')\n",
    "            for tooth in new_teeths:\n",
    "                #有些样本中牙的数量太少\n",
    "                if(len(new_teeths) == 1): \n",
    "                    continue\n",
    "                else:\n",
    "                    #有些样本中的牙的ratio为NaN，无法计算，continue\n",
    "                    if(math.isnan(DATA[key][tooth][2])):\n",
    "                        continue\n",
    "                    ratio[list(new_teeths).index(tooth)] = DATA[key][tooth][2]\n",
    "                    #ratio.append(distance_data[i][tooth][2])\n",
    "\n",
    "\n",
    "            #如果样本中的牙的数量小于32，则用插值的办法（第一个和第二个的mean，依此类推）来补充，直到向量长度为32\n",
    "            #将每个牙都根据周围的牙齿来进行插值，输出的顺序按照牙齿的标号顺序\n",
    "            for j in range(0,len(ratio)):\n",
    "                if(ratio.all() > 0):\n",
    "                    break\n",
    "                if(ratio[j] > 0):\n",
    "                    continue\n",
    "                elif(j == 0 and ratio[j+1] > 0 and ratio[j+2] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j+2])/2\n",
    "                elif(j == len(ratio) - 1 and  ratio[j-1] > 0 and ratio[j-2] > 0):\n",
    "                    ratio[j] = (ratio[j-1] + ratio[j-2])/2\n",
    "                elif(j > 0 and j < len(ratio) - 1 and ratio[j+1] > 0 and ratio[j-1] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j - 1])/2\n",
    "                else:\n",
    "                    ratio[j] = (np.random.choice(ratio[np.where(ratio > 0)],1)+np.random.choice(ratio[np.where(ratio > 0)],1))/2\n",
    "            X.append(ratio.tolist()) \n",
    "                \n",
    "            if cl=='note1':\n",
    "                Y.append(1)\n",
    "            elif cl=='l':\n",
    "                Y.append(1)\n",
    "            elif cl=='m':\n",
    "                Y.append(2)\n",
    "            elif cl=='h':\n",
    "                Y.append(3)\n",
    "\n",
    "        except:\n",
    "            pass\n",
    "    \n",
    "    tmp_data=[[X[i],Y[i]] for i in range(len(Y))]\n",
    "    import random\n",
    "    random.shuffle(tmp_data)\n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    \n",
    "    return X_train,Y_train,X_val,Y_val\n",
    "\n",
    "with open(\"maskrcnn_train_distance_vertical.json\",'r') as load_f:\n",
    "    all_data = json.load(load_f)\n",
    "\n",
    "X_train,Y_train,X_val,Y_val=get_data(all_data)\n",
    "X_test=X_val\n",
    "Y_test=Y_val\n",
    "\n",
    "xgb_model_loaded = pickle.load(open('XGboost_4class.pkl', \"rb\"))\n",
    "xgtest = xgb.DMatrix(X_test, label=Y_test)\n",
    "y_pred = xgb_model_loaded.predict(xgtest)\n",
    "predictions = [int(value) for value in y_pred]\n",
    "# evaluate predictions\n",
    "acc = accuracy_score(Y_test, predictions)\n",
    "f1=f1_score(Y_test, predictions, average='macro')\n",
    "print(acc,f1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction without label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 676,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-18T09:53:16.259840Z",
     "start_time": "2019-12-18T09:53:16.161454Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63 63\n",
      "['颜浇珊__PAN24476', '梁艺曦__PAN24516', '艾金棱__PAN9412', '李奕钿__PAN76537', '傅家华__PAN31607', '梁俊杰__PAN14894', '尹小武__PAN03', '李银珠__PAN64129', '潘晓坤__PAN03', '张月月__PAN64135', '黄建华__PAN39099', '陈诗慧__PAN15111', '梁雨薇__PAN42602', '刘旋__PAN39111', '黄希璇__PAN54162', '蓝燕玲__PAN15184', '张草草 __PAN30092', '李洁华__PAN39481', '韦东妮__PAN08', '范艳敏__PAN4795', '黎峰杏__PAN42596', '欧嘉怡__PAN14906', '敖祖锐__PAN6013', '陈`翠__PAN8921', '黄碧真__PAN15148', '黎子森__PAN64123', '王洪波__PAN64147', '朱明慧__PAN03', '洪丽婷__PAN22606', '梁燕萍__PAN9433', '何妙丹__PAN31619', '余威克__PAN02', '朱乘浪__PAN14882', '姜相庄__PAN54156', '燕李刚__PAN15190', '尹美凤__PAN15117', '任怡樾__PAN8915', '陈远__PAN54150', '李英杰__PAN9439', '卢祎__PAN54169', '赵子敬__PAN9445', '吴尚坤__PAN15154', '周雯君__PAN64141', '伍成贵__PAN22612', '谈锦秀__PAN10', '张森荣__PAN22586', '杨明娟__PAN22594', '张晓璇__PAN39105', '龚王芳子__PAN15123', '潘嫦__PAN16', '欧阳桦__PAN3241', '谭颖诗__PAN14900', '黄洁茹__PAN15172', '李曼潇__PAN13893', '赖泉桂__PAN11056', '柯淑玲__PAN22600', '韦建玲__PAN15178', '陈石连__PAN9418', '温子田__PAN15160', '钟晓瑜__PAN14888', '梁灼荣__PAN9424', '郑红勤__PAN15166', '赵铭心__PAN31613'] [1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "def get_data(data):\n",
    "    DATA=data\n",
    "    IDS=[]\n",
    "    X=[]\n",
    "    Y=[]\n",
    "    teeths=['11','12','13','14','15','16','17','18','21','22','23','24','25','26','27','28','31','32','33','34','35','36','37','38','41','42','43','44','45','46','47','48']\n",
    "    #teeths=['11','12','13','14','15','21','22','23','24','25','31','32','33','34','35','41','42','43','44','45']\n",
    "    periodontitis=['l','m','h','note1']\n",
    "\n",
    "    for key in DATA.keys():\n",
    "        try:\n",
    "            cl=DATA[key]['class']\n",
    "            \n",
    "            \n",
    "            ratio = np.zeros((32))\n",
    "            new_teeths=DATA[key].keys()\n",
    "            new_teeths=list(new_teeths)\n",
    "            new_teeths.remove('class')\n",
    "            for tooth in new_teeths:\n",
    "                #有些样本中牙的数量太少\n",
    "                if(len(new_teeths) == 1): \n",
    "                    continue\n",
    "                else:\n",
    "                    #有些样本中的牙的ratio为NaN，无法计算，continue\n",
    "                    if(math.isnan(DATA[key][tooth][2])):\n",
    "                        continue\n",
    "                    ratio[list(new_teeths).index(tooth)] = DATA[key][tooth][2]\n",
    "                    #ratio.append(distance_data[i][tooth][2])\n",
    "\n",
    "\n",
    "            #如果样本中的牙的数量小于32，则用插值的办法（第一个和第二个的mean，依此类推）来补充，直到向量长度为32\n",
    "            #将每个牙都根据周围的牙齿来进行插值，输出的顺序按照牙齿的标号顺序\n",
    "            for j in range(0,len(ratio)):\n",
    "                if(ratio.all() > 0):\n",
    "                    break\n",
    "                if(ratio[j] > 0):\n",
    "                    continue\n",
    "                elif(j == 0 and ratio[j+1] > 0 and ratio[j+2] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j+2])/2\n",
    "                elif(j == len(ratio) - 1 and  ratio[j-1] > 0 and ratio[j-2] > 0):\n",
    "                    ratio[j] = (ratio[j-1] + ratio[j-2])/2\n",
    "                elif(j > 0 and j < len(ratio) - 1 and ratio[j+1] > 0 and ratio[j-1] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j - 1])/2\n",
    "                else:\n",
    "                    ratio[j] = (np.random.choice(ratio[np.where(ratio > 0)],1)+np.random.choice(ratio[np.where(ratio > 0)],1))/2\n",
    "            X.append(ratio.tolist()) \n",
    "                \n",
    "            if cl=='note1':\n",
    "                Y.append(1)\n",
    "            elif cl=='l':\n",
    "                Y.append(1)\n",
    "            elif cl=='m':\n",
    "                Y.append(2)\n",
    "            elif cl=='h':\n",
    "                Y.append(3)\n",
    "            \n",
    "            IDS.append(key)\n",
    "\n",
    "        except:\n",
    "            pass\n",
    "    \n",
    "    tmp_data=[[X[i],Y[i]] for i in range(len(Y))]\n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    \n",
    "    return X_train,Y_train,X_val,Y_val,IDS\n",
    "\n",
    "import json\n",
    "\n",
    "with open(\"zhongshan_predict_distance_vertical.json\",'r') as load_f:\n",
    "    all_data = json.load(load_f)\n",
    "    \n",
    "X_train,Y_train,X_val,Y_val,IDS=get_data(all_data)\n",
    "X_test=X_train+X_val\n",
    "Y_test=Y_train+Y_val\n",
    "\n",
    "xgb_model_loaded = pickle.load(open('XGboost_3class.pkl', \"rb\"))\n",
    "xgtest = xgb.DMatrix(X_test,label=Y_test)\n",
    "y_pred = xgb_model_loaded.predict(xgtest)\n",
    "predictions = [int(value) for value in y_pred]\n",
    "\n",
    "print(len(IDS),len(predictions))\n",
    "print(IDS,predictions)\n",
    "new_predictions=[]\n",
    "for x in predictions:\n",
    "    if x==0:\n",
    "        new_predictions.append('no periodontitis')\n",
    "    elif x==1:\n",
    "        new_predictions.append('no/mild periodontitis')\n",
    "    elif x==2:\n",
    "        new_predictions.append('moderate periodontitis')\n",
    "    elif x==3:\n",
    "        new_predictions.append('severe periodontitis')\n",
    "        \n",
    "df=pd.DataFrame({'id':IDS,'pred':new_predictions})\n",
    "\n",
    "\n",
    "df.to_csv('zhongshan_predict_result_3class.csv',index=False,encoding=\"utf_8_sig\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 551,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-18T08:28:01.950395Z",
     "start_time": "2019-12-18T08:28:01.943095Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['颜浇珊__PAN24476', '梁艺曦__PAN24516', '艾金棱__PAN9412', '李奕钿__PAN76537', '傅家华__PAN31607', '梁俊杰__PAN14894', '尹小武__PAN03', '李银珠__PAN64129', '潘晓坤__PAN03', '张月月__PAN64135', '黄建华__PAN39099', '陈诗慧__PAN15111', '梁雨薇__PAN42602', '刘旋__PAN39111', '黄希璇__PAN54162', '蓝燕玲__PAN15184', '张草草 __PAN30092', '李洁华__PAN39481', '韦东妮__PAN08', '范艳敏__PAN4795', '黎峰杏__PAN42596', '欧嘉怡__PAN14906', '敖祖锐__PAN6013', '陈`翠__PAN8921', '黄碧真__PAN15148', '黎子森__PAN64123', '王洪波__PAN64147', '朱明慧__PAN03', '洪丽婷__PAN22606', '梁燕萍__PAN9433', '何妙丹__PAN31619', '余威克__PAN02', '朱乘浪__PAN14882', '姜相庄__PAN54156', '燕李刚__PAN15190', '尹美凤__PAN15117', '任怡樾__PAN8915', '陈远__PAN54150', '李英杰__PAN9439', '卢祎__PAN54169', '赵子敬__PAN9445', '吴尚坤__PAN15154', '周雯君__PAN64141', '伍成贵__PAN22612', '谈锦秀__PAN10', '张森荣__PAN22586', '杨明娟__PAN22594', '张晓璇__PAN39105', '龚王芳子__PAN15123', '潘嫦__PAN16', '欧阳桦__PAN3241', '谭颖诗__PAN14900', '黄洁茹__PAN15172', '李曼潇__PAN13893', '赖泉桂__PAN11056', '柯淑玲__PAN22600', '韦建玲__PAN15178', '陈石连__PAN9418', '温子田__PAN15160', '钟晓瑜__PAN14888', '梁灼荣__PAN9424', '郑红勤__PAN15166', '赵铭心__PAN31613'] [1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1]\n"
     ]
    }
   ],
   "source": [
    "print(IDS,predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 调参"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-16T09:53:40.168290Z",
     "start_time": "2019-12-16T09:53:34.387673Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\ttrain-merror:0.078534\tval-merror:0.173611\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.04014\tval-merror:0.159722\n",
      "[2]\ttrain-merror:0.031414\tval-merror:0.145833\n",
      "[3]\ttrain-merror:0.029668\tval-merror:0.138889\n",
      "[4]\ttrain-merror:0.027923\tval-merror:0.138889\n",
      "[5]\ttrain-merror:0.020942\tval-merror:0.131944\n",
      "[6]\ttrain-merror:0.020942\tval-merror:0.118056\n",
      "[7]\ttrain-merror:0.019197\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.020942\tval-merror:0.118056\n",
      "[9]\ttrain-merror:0.019197\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.020942\tval-merror:0.118056\n",
      "[11]\ttrain-merror:0.019197\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.017452\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.017452\tval-merror:0.125\n",
      "[14]\ttrain-merror:0.017452\tval-merror:0.118056\n",
      "[15]\ttrain-merror:0.015707\tval-merror:0.125\n",
      "[16]\ttrain-merror:0.015707\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[6]\ttrain-merror:0.020942\tval-merror:0.118056\n",
      "\n",
      "[3. 3. 1. 2. 3. 2. 3. 2. 2. 3. 1. 2. 2. 3. 2. 2. 3. 3. 2. 1. 2. 1. 3. 2.\n",
      " 1. 2. 1. 3. 3. 2. 2. 3. 3. 2. 3. 2. 2. 2. 2. 2. 3. 3. 3. 2. 3. 3. 3. 3.\n",
      " 3. 3. 3. 1. 1. 2. 2. 1. 2. 3. 3. 3. 3. 1. 3. 2. 2. 3. 3. 1. 2. 3. 1. 3.\n",
      " 1. 2. 2. 3. 2. 2. 3. 1. 3. 1. 2. 3. 1. 3. 3. 1. 2. 2. 3. 3. 3. 3. 2. 2.\n",
      " 3. 1. 1. 3. 1. 3. 2. 1. 2. 2. 3. 3. 3. 3. 2. 2. 2. 3. 2. 3. 3. 3. 3. 3.\n",
      " 1. 1. 1. 3. 3. 1. 2. 1. 3. 1. 3. 2. 1. 2. 1. 1. 1. 2. 1. 3. 2. 1. 2. 2.] [3, 3, 1, 3, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 1, 1, 1, 3, 2, 1, 2, 2, 3, 3, 1, 2, 3, 3, 2, 3, 2, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 1, 2, 3, 3, 3, 3, 1, 3, 2, 2, 3, 3, 1, 1, 3, 1, 3, 1, 2, 2, 3, 2, 2, 3, 1, 3, 1, 1, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 2, 1, 3, 1, 1, 2, 1, 3, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 1, 3, 2, 3, 3, 3, 3, 3, 1, 1, 1, 1, 3, 2, 2, 1, 3, 1, 3, 2, 1, 2, 1, 1, 1, 2, 2, 3, 2, 1, 2, 1] 0.8680555555555556\n",
      "[0]\ttrain-merror:0.075044\tval-merror:0.180556\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038394\tval-merror:0.152778\n",
      "[2]\ttrain-merror:0.031414\tval-merror:0.138889\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.111111\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.118056\n",
      "[5]\ttrain-merror:0.024433\tval-merror:0.090278\n",
      "[6]\ttrain-merror:0.020942\tval-merror:0.090278\n",
      "[7]\ttrain-merror:0.015707\tval-merror:0.083333\n",
      "[8]\ttrain-merror:0.015707\tval-merror:0.104167\n",
      "[9]\ttrain-merror:0.012216\tval-merror:0.076389\n",
      "[10]\ttrain-merror:0.012216\tval-merror:0.076389\n",
      "[11]\ttrain-merror:0.013962\tval-merror:0.069444\n",
      "[12]\ttrain-merror:0.010471\tval-merror:0.076389\n",
      "[13]\ttrain-merror:0.012216\tval-merror:0.083333\n",
      "[14]\ttrain-merror:0.008726\tval-merror:0.069444\n",
      "[15]\ttrain-merror:0.006981\tval-merror:0.069444\n",
      "[16]\ttrain-merror:0.006981\tval-merror:0.076389\n",
      "[17]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[18]\ttrain-merror:0.006981\tval-merror:0.083333\n",
      "[19]\ttrain-merror:0.005236\tval-merror:0.069444\n",
      "[20]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "[21]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.013962\tval-merror:0.069444\n",
      "\n",
      "[3. 2. 3. 2. 2. 3. 3. 3. 2. 2. 2. 3. 1. 3. 1. 3. 3. 1. 2. 3. 3. 2. 1. 3.\n",
      " 2. 1. 1. 3. 2. 1. 1. 3. 2. 1. 3. 3. 1. 2. 1. 1. 3. 1. 3. 2. 1. 1. 1. 2.\n",
      " 2. 1. 3. 2. 2. 1. 1. 3. 1. 2. 3. 1. 2. 2. 2. 3. 3. 2. 1. 1. 1. 1. 1. 1.\n",
      " 2. 1. 1. 1. 3. 2. 2. 1. 3. 3. 2. 2. 1. 2. 3. 2. 3. 1. 1. 3. 1. 1. 3. 2.\n",
      " 2. 2. 2. 3. 1. 3. 1. 3. 1. 2. 2. 3. 2. 3. 1. 3. 2. 3. 1. 1. 3. 1. 3. 1.\n",
      " 2. 1. 1. 3. 2. 3. 3. 2. 2. 3. 2. 1. 1. 3. 3. 1. 3. 1. 3. 3. 3. 2. 2. 2.] [3, 2, 3, 2, 2, 3, 3, 3, 2, 2, 2, 3, 1, 3, 1, 3, 3, 1, 2, 3, 3, 2, 1, 3, 2, 1, 1, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 1, 1, 3, 1, 3, 2, 1, 1, 1, 2, 2, 1, 3, 1, 3, 1, 1, 3, 2, 1, 3, 1, 2, 2, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 3, 2, 2, 1, 3, 3, 2, 2, 1, 2, 3, 2, 3, 1, 1, 3, 1, 1, 3, 2, 2, 2, 2, 3, 1, 3, 1, 3, 1, 2, 2, 3, 2, 3, 1, 3, 2, 3, 2, 1, 3, 1, 3, 1, 2, 1, 1, 3, 1, 3, 3, 2, 2, 3, 2, 1, 1, 3, 3, 2, 3, 2, 3, 3, 3, 1, 1, 2] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.050611\tval-merror:0.201389\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.027923\tval-merror:0.159722\n",
      "[2]\ttrain-merror:0.024433\tval-merror:0.145833\n",
      "[3]\ttrain-merror:0.020942\tval-merror:0.159722\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.020942\tval-merror:0.118056\n",
      "[6]\ttrain-merror:0.020942\tval-merror:0.118056\n",
      "[7]\ttrain-merror:0.017452\tval-merror:0.118056\n",
      "[8]\ttrain-merror:0.015707\tval-merror:0.118056\n",
      "[9]\ttrain-merror:0.015707\tval-merror:0.118056\n",
      "[10]\ttrain-merror:0.015707\tval-merror:0.125\n",
      "[11]\ttrain-merror:0.015707\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.015707\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.015707\tval-merror:0.125\n",
      "[14]\ttrain-merror:0.015707\tval-merror:0.118056\n",
      "[15]\ttrain-merror:0.015707\tval-merror:0.118056\n",
      "Stopping. Best iteration:\n",
      "[5]\ttrain-merror:0.020942\tval-merror:0.118056\n",
      "\n",
      "[3. 2. 2. 1. 2. 1. 1. 1. 1. 2. 3. 2. 3. 1. 3. 3. 3. 2. 2. 2. 1. 1. 2. 1.\n",
      " 2. 3. 2. 1. 3. 1. 1. 2. 3. 3. 2. 3. 1. 3. 1. 2. 1. 2. 3. 2. 2. 1. 3. 1.\n",
      " 2. 1. 1. 3. 2. 1. 2. 3. 3. 3. 2. 3. 2. 3. 2. 1. 1. 2. 1. 3. 3. 2. 2. 1.\n",
      " 2. 3. 2. 2. 1. 3. 3. 3. 3. 1. 3. 3. 3. 1. 2. 3. 3. 1. 2. 3. 2. 2. 3. 2.\n",
      " 1. 1. 2. 3. 3. 1. 3. 3. 2. 1. 3. 2. 3. 2. 3. 3. 1. 1. 2. 2. 2. 2. 3. 3.\n",
      " 2. 1. 3. 3. 2. 3. 3. 1. 3. 3. 3. 2. 2. 3. 3. 2. 1. 2. 1. 2. 2. 1. 1. 3.] [3, 2, 2, 1, 2, 1, 3, 2, 1, 1, 3, 1, 3, 1, 3, 3, 3, 2, 2, 2, 1, 1, 2, 1, 3, 3, 1, 2, 3, 1, 1, 2, 3, 3, 2, 3, 1, 3, 1, 2, 1, 2, 3, 1, 2, 1, 3, 1, 2, 2, 1, 3, 1, 2, 2, 3, 3, 3, 2, 3, 2, 3, 2, 1, 1, 2, 1, 3, 3, 2, 2, 1, 2, 3, 1, 2, 1, 3, 3, 1, 3, 1, 3, 3, 3, 1, 1, 3, 3, 1, 2, 3, 2, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3, 3, 2, 1, 3, 2, 3, 2, 3, 3, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 3, 3, 2, 3, 3, 1, 3, 3, 3, 2, 2, 3, 3, 2, 1, 2, 1, 2, 2, 1, 1, 3] 0.875\n",
      "[0]\ttrain-merror:0.076789\tval-merror:0.180556\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.04363\tval-merror:0.118056\n",
      "[2]\ttrain-merror:0.036649\tval-merror:0.111111\n",
      "[3]\ttrain-merror:0.026178\tval-merror:0.111111\n",
      "[4]\ttrain-merror:0.019197\tval-merror:0.097222\n",
      "[5]\ttrain-merror:0.019197\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.017452\tval-merror:0.111111\n",
      "[7]\ttrain-merror:0.017452\tval-merror:0.076389\n",
      "[8]\ttrain-merror:0.015707\tval-merror:0.090278\n",
      "[9]\ttrain-merror:0.022688\tval-merror:0.097222\n",
      "[10]\ttrain-merror:0.017452\tval-merror:0.097222\n",
      "[11]\ttrain-merror:0.015707\tval-merror:0.097222\n",
      "[12]\ttrain-merror:0.015707\tval-merror:0.097222\n",
      "[13]\ttrain-merror:0.015707\tval-merror:0.104167\n",
      "[14]\ttrain-merror:0.013962\tval-merror:0.104167\n",
      "[15]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "[16]\ttrain-merror:0.013962\tval-merror:0.090278\n",
      "[17]\ttrain-merror:0.010471\tval-merror:0.090278\n",
      "Stopping. Best iteration:\n",
      "[7]\ttrain-merror:0.017452\tval-merror:0.076389\n",
      "\n",
      "[2. 2. 2. 3. 3. 3. 2. 2. 2. 3. 1. 1. 3. 1. 3. 1. 3. 2. 3. 1. 1. 1. 1. 2.\n",
      " 1. 3. 3. 3. 1. 2. 3. 3. 2. 1. 2. 1. 1. 2. 2. 1. 1. 3. 1. 1. 3. 3. 1. 1.\n",
      " 2. 3. 3. 2. 2. 1. 1. 2. 3. 2. 1. 2. 1. 3. 1. 2. 3. 3. 1. 3. 2. 3. 3. 3.\n",
      " 1. 2. 2. 3. 2. 3. 1. 1. 2. 2. 2. 2. 2. 3. 2. 2. 3. 3. 3. 3. 1. 1. 3. 2.\n",
      " 1. 3. 1. 1. 2. 2. 3. 3. 3. 3. 3. 2. 3. 3. 1. 1. 1. 2. 2. 1. 3. 2. 2. 1.\n",
      " 1. 3. 2. 1. 3. 3. 3. 2. 1. 2. 3. 3. 2. 2. 2. 3. 2. 2. 2. 3. 2. 1. 1. 1.] [2, 2, 2, 3, 3, 2, 2, 1, 2, 3, 1, 1, 3, 1, 3, 1, 3, 1, 3, 1, 1, 1, 1, 2, 1, 3, 3, 3, 1, 2, 3, 3, 1, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1, 2, 3, 2, 1, 1, 1, 3, 3, 2, 2, 1, 1, 2, 3, 2, 1, 2, 1, 3, 1, 2, 3, 3, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 2, 3, 1, 1, 2, 2, 2, 2, 2, 3, 2, 2, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 1, 2, 2, 3, 1, 3, 3, 3, 2, 2, 3, 1, 2, 1, 2, 2, 1, 3, 2, 2, 3, 1, 3, 2, 1, 3, 3, 3, 2, 1, 1, 3, 3, 2, 2, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1] 0.8888888888888888\n",
      "[0]\ttrain-merror:0.057592\tval-merror:0.138889\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.041885\tval-merror:0.118056\n",
      "[2]\ttrain-merror:0.029668\tval-merror:0.090278\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.076389\n",
      "[4]\ttrain-merror:0.026178\tval-merror:0.083333\n",
      "[5]\ttrain-merror:0.027923\tval-merror:0.083333\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6]\ttrain-merror:0.022688\tval-merror:0.069444\n",
      "[7]\ttrain-merror:0.022688\tval-merror:0.076389\n",
      "[8]\ttrain-merror:0.019197\tval-merror:0.0625\n",
      "[9]\ttrain-merror:0.019197\tval-merror:0.0625\n",
      "[10]\ttrain-merror:0.022688\tval-merror:0.069444\n",
      "[11]\ttrain-merror:0.020942\tval-merror:0.076389\n",
      "[12]\ttrain-merror:0.013962\tval-merror:0.069444\n",
      "[13]\ttrain-merror:0.015707\tval-merror:0.069444\n",
      "[14]\ttrain-merror:0.017452\tval-merror:0.076389\n",
      "[15]\ttrain-merror:0.015707\tval-merror:0.076389\n",
      "[16]\ttrain-merror:0.015707\tval-merror:0.069444\n",
      "[17]\ttrain-merror:0.017452\tval-merror:0.0625\n",
      "[18]\ttrain-merror:0.017452\tval-merror:0.076389\n",
      "Stopping. Best iteration:\n",
      "[8]\ttrain-merror:0.019197\tval-merror:0.0625\n",
      "\n",
      "[3. 3. 1. 3. 3. 3. 2. 3. 2. 1. 2. 1. 2. 2. 3. 2. 3. 3. 2. 1. 1. 3. 3. 1.\n",
      " 3. 1. 2. 1. 3. 3. 1. 1. 1. 1. 1. 3. 3. 1. 1. 1. 2. 3. 2. 2. 1. 1. 3. 3.\n",
      " 1. 2. 2. 1. 2. 1. 2. 3. 3. 3. 2. 3. 3. 1. 2. 3. 2. 1. 1. 1. 2. 3. 2. 2.\n",
      " 1. 1. 2. 1. 2. 2. 1. 3. 1. 3. 1. 3. 3. 1. 1. 2. 1. 2. 3. 3. 3. 3. 2. 3.\n",
      " 1. 3. 1. 3. 2. 2. 3. 3. 1. 3. 1. 2. 2. 3. 2. 3. 2. 3. 1. 1. 1. 2. 1. 1.\n",
      " 3. 1. 3. 3. 2. 3. 2. 1. 3. 1. 2. 3. 3. 3. 3. 2. 1. 3. 3. 2. 3. 1. 1. 3.] [3, 3, 1, 3, 3, 3, 2, 3, 2, 1, 2, 1, 2, 2, 3, 2, 3, 3, 1, 1, 1, 3, 3, 1, 3, 1, 2, 2, 3, 3, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 2, 3, 2, 2, 1, 1, 3, 3, 1, 1, 1, 1, 2, 1, 2, 3, 3, 3, 2, 3, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 2, 2, 1, 1, 2, 1, 2, 2, 1, 3, 1, 3, 1, 3, 3, 2, 1, 2, 1, 2, 3, 3, 3, 3, 2, 3, 1, 3, 1, 3, 2, 2, 3, 1, 1, 3, 1, 2, 2, 3, 1, 3, 2, 3, 1, 2, 1, 2, 2, 1, 3, 1, 3, 3, 2, 3, 2, 1, 3, 1, 2, 3, 3, 3, 3, 2, 1, 3, 3, 2, 3, 1, 1, 3] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.069808\tval-merror:0.173611\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.045375\tval-merror:0.145833\n",
      "[2]\ttrain-merror:0.038394\tval-merror:0.125\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.125\n",
      "[4]\ttrain-merror:0.027923\tval-merror:0.104167\n",
      "[5]\ttrain-merror:0.026178\tval-merror:0.111111\n",
      "[6]\ttrain-merror:0.022688\tval-merror:0.111111\n",
      "[7]\ttrain-merror:0.019197\tval-merror:0.104167\n",
      "[8]\ttrain-merror:0.020942\tval-merror:0.090278\n",
      "[9]\ttrain-merror:0.015707\tval-merror:0.090278\n",
      "[10]\ttrain-merror:0.015707\tval-merror:0.076389\n",
      "[11]\ttrain-merror:0.013962\tval-merror:0.090278\n",
      "[12]\ttrain-merror:0.013962\tval-merror:0.090278\n",
      "[13]\ttrain-merror:0.013962\tval-merror:0.090278\n",
      "[14]\ttrain-merror:0.012216\tval-merror:0.090278\n",
      "[15]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "[16]\ttrain-merror:0.010471\tval-merror:0.090278\n",
      "[17]\ttrain-merror:0.010471\tval-merror:0.090278\n",
      "[18]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "[19]\ttrain-merror:0.008726\tval-merror:0.083333\n",
      "[20]\ttrain-merror:0.008726\tval-merror:0.097222\n",
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0.015707\tval-merror:0.076389\n",
      "\n",
      "[2. 1. 1. 3. 2. 3. 2. 3. 3. 2. 2. 1. 1. 1. 1. 1. 2. 2. 3. 1. 2. 3. 1. 2.\n",
      " 1. 1. 2. 2. 1. 2. 1. 1. 2. 1. 2. 2. 2. 2. 1. 3. 1. 3. 3. 2. 1. 1. 2. 1.\n",
      " 3. 2. 1. 1. 2. 3. 3. 2. 1. 3. 3. 3. 1. 1. 2. 1. 2. 3. 2. 3. 1. 3. 2. 3.\n",
      " 3. 3. 1. 1. 3. 3. 3. 3. 3. 1. 2. 1. 2. 3. 3. 2. 2. 3. 2. 1. 1. 2. 3. 1.\n",
      " 1. 3. 1. 2. 2. 2. 2. 3. 1. 3. 3. 1. 2. 1. 3. 3. 2. 2. 1. 2. 2. 1. 1. 3.\n",
      " 3. 1. 1. 3. 2. 3. 2. 1. 1. 3. 3. 1. 3. 1. 1. 1. 1. 3. 3. 1. 1. 2. 1. 2.] [2, 1, 1, 3, 2, 3, 2, 3, 3, 1, 2, 1, 1, 1, 1, 3, 1, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 3, 1, 3, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 2, 3, 3, 2, 3, 3, 3, 3, 1, 2, 2, 1, 2, 3, 2, 2, 1, 3, 2, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 1, 2, 1, 2, 3, 3, 2, 2, 3, 2, 1, 1, 2, 3, 1, 1, 3, 2, 2, 2, 2, 2, 3, 1, 3, 3, 1, 2, 1, 3, 3, 2, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 3, 2, 3, 2, 1, 1, 3, 3, 1, 3, 1, 1, 1, 1, 3, 3, 1, 2, 2, 3, 2] 0.9097222222222222\n",
      "[0]\ttrain-merror:0.069808\tval-merror:0.194444\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.050611\tval-merror:0.173611\n",
      "[2]\ttrain-merror:0.026178\tval-merror:0.166667\n",
      "[3]\ttrain-merror:0.022688\tval-merror:0.159722\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.152778\n",
      "[5]\ttrain-merror:0.019197\tval-merror:0.145833\n",
      "[6]\ttrain-merror:0.022688\tval-merror:0.138889\n",
      "[7]\ttrain-merror:0.017452\tval-merror:0.131944\n",
      "[8]\ttrain-merror:0.017452\tval-merror:0.125\n",
      "[9]\ttrain-merror:0.015707\tval-merror:0.111111\n",
      "[10]\ttrain-merror:0.013962\tval-merror:0.104167\n",
      "[11]\ttrain-merror:0.013962\tval-merror:0.097222\n",
      "[12]\ttrain-merror:0.013962\tval-merror:0.104167\n",
      "[13]\ttrain-merror:0.013962\tval-merror:0.118056\n",
      "[14]\ttrain-merror:0.013962\tval-merror:0.111111\n",
      "[15]\ttrain-merror:0.013962\tval-merror:0.104167\n",
      "[16]\ttrain-merror:0.012216\tval-merror:0.104167\n",
      "[17]\ttrain-merror:0.012216\tval-merror:0.111111\n",
      "[18]\ttrain-merror:0.010471\tval-merror:0.118056\n",
      "[19]\ttrain-merror:0.012216\tval-merror:0.118056\n",
      "[20]\ttrain-merror:0.012216\tval-merror:0.118056\n",
      "[21]\ttrain-merror:0.008726\tval-merror:0.111111\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.013962\tval-merror:0.097222\n",
      "\n",
      "[1. 3. 1. 2. 2. 2. 3. 1. 3. 3. 3. 2. 1. 3. 3. 3. 2. 3. 2. 2. 1. 1. 3. 2.\n",
      " 3. 2. 1. 3. 1. 2. 2. 2. 2. 2. 2. 1. 1. 2. 2. 1. 2. 2. 2. 3. 2. 1. 1. 3.\n",
      " 2. 1. 3. 3. 1. 1. 2. 3. 2. 2. 3. 3. 3. 1. 1. 1. 3. 1. 3. 2. 1. 1. 3. 1.\n",
      " 2. 3. 3. 2. 1. 3. 3. 3. 3. 3. 2. 2. 3. 3. 1. 1. 3. 3. 3. 3. 2. 1. 2. 1.\n",
      " 1. 3. 2. 3. 2. 3. 2. 1. 3. 3. 2. 2. 2. 3. 2. 2. 2. 3. 2. 3. 3. 3. 2. 3.\n",
      " 2. 2. 3. 2. 2. 2. 3. 1. 3. 3. 3. 1. 2. 1. 2. 2. 1. 1. 1. 2. 2. 3. 3. 1.] [2, 3, 1, 2, 2, 2, 3, 1, 3, 3, 3, 2, 1, 3, 3, 3, 2, 3, 2, 2, 1, 1, 3, 2, 3, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 3, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 1, 2, 3, 2, 2, 3, 3, 3, 1, 1, 1, 3, 1, 3, 2, 2, 1, 3, 1, 2, 3, 3, 2, 1, 3, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 1, 1, 3, 2, 3, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3, 2, 1, 1, 3, 2, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 2, 3, 3, 3, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 3, 3, 1] 0.8958333333333334\n",
      "[0]\ttrain-merror:0.059337\tval-merror:0.208333\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.022688\tval-merror:0.180556\n",
      "[2]\ttrain-merror:0.029668\tval-merror:0.1875\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.166667\n",
      "[4]\ttrain-merror:0.022688\tval-merror:0.145833\n",
      "[5]\ttrain-merror:0.017452\tval-merror:0.131944\n",
      "[6]\ttrain-merror:0.013962\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.015707\tval-merror:0.118056\n",
      "[8]\ttrain-merror:0.015707\tval-merror:0.118056\n",
      "[9]\ttrain-merror:0.015707\tval-merror:0.131944\n",
      "[10]\ttrain-merror:0.015707\tval-merror:0.118056\n",
      "[11]\ttrain-merror:0.015707\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.015707\tval-merror:0.111111\n",
      "[13]\ttrain-merror:0.013962\tval-merror:0.118056\n",
      "[14]\ttrain-merror:0.015707\tval-merror:0.104167\n",
      "[15]\ttrain-merror:0.013962\tval-merror:0.118056\n",
      "[16]\ttrain-merror:0.013962\tval-merror:0.118056\n",
      "[17]\ttrain-merror:0.008726\tval-merror:0.118056\n",
      "[18]\ttrain-merror:0.006981\tval-merror:0.111111\n",
      "[19]\ttrain-merror:0.006981\tval-merror:0.118056\n",
      "[20]\ttrain-merror:0.006981\tval-merror:0.118056\n",
      "[21]\ttrain-merror:0.006981\tval-merror:0.104167\n",
      "[22]\ttrain-merror:0.006981\tval-merror:0.104167\n",
      "[23]\ttrain-merror:0.006981\tval-merror:0.104167\n",
      "[24]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[25]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[26]\ttrain-merror:0.005236\tval-merror:0.104167\n",
      "[27]\ttrain-merror:0.005236\tval-merror:0.111111\n",
      "[28]\ttrain-merror:0.005236\tval-merror:0.111111\n",
      "[29]\ttrain-merror:0.005236\tval-merror:0.118056\n",
      "[30]\ttrain-merror:0.005236\tval-merror:0.118056\n",
      "[31]\ttrain-merror:0.005236\tval-merror:0.118056\n",
      "[32]\ttrain-merror:0.005236\tval-merror:0.118056\n",
      "[33]\ttrain-merror:0.005236\tval-merror:0.118056\n",
      "[34]\ttrain-merror:0.005236\tval-merror:0.118056\n",
      "Stopping. Best iteration:\n",
      "[24]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "\n",
      "[1. 1. 1. 2. 2. 1. 3. 3. 2. 3. 1. 3. 1. 1. 3. 1. 2. 2. 3. 2. 2. 3. 2. 3.\n",
      " 3. 2. 1. 3. 2. 2. 2. 3. 2. 1. 1. 2. 3. 2. 2. 1. 1. 2. 3. 2. 3. 2. 3. 3.\n",
      " 1. 3. 2. 2. 1. 2. 2. 3. 1. 3. 2. 3. 3. 1. 2. 2. 2. 3. 3. 3. 3. 1. 2. 1.\n",
      " 1. 3. 1. 1. 3. 3. 3. 3. 2. 2. 1. 3. 2. 3. 2. 1. 1. 3. 3. 2. 3. 2. 3. 3.\n",
      " 2. 2. 3. 3. 2. 1. 1. 1. 3. 2. 2. 1. 3. 1. 2. 3. 2. 3. 2. 2. 2. 1. 2. 1.\n",
      " 1. 1. 3. 2. 2. 3. 2. 3. 2. 1. 1. 1. 2. 2. 1. 3. 3. 2. 2. 2. 2. 1. 1. 1.] [1, 1, 1, 2, 2, 1, 3, 3, 2, 3, 2, 3, 1, 1, 3, 1, 2, 2, 3, 2, 2, 3, 2, 3, 3, 2, 1, 3, 1, 2, 1, 3, 2, 1, 1, 2, 3, 2, 2, 1, 1, 2, 3, 2, 3, 2, 2, 3, 1, 3, 1, 2, 1, 2, 1, 3, 1, 3, 2, 3, 3, 1, 2, 1, 2, 3, 3, 3, 3, 1, 2, 1, 1, 3, 1, 1, 3, 3, 3, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 3, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 1, 1, 1, 3, 1, 2, 1, 3, 1, 2, 3, 1, 3, 2, 1, 2, 1, 2, 1, 1, 1, 3, 1, 2, 3, 1, 3, 2, 2, 1, 1, 2, 2, 1, 3, 3, 2, 2, 2, 2, 1, 2, 1] 0.8958333333333334\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\ttrain-merror:0.068063\tval-merror:0.1875\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.052356\tval-merror:0.159722\n",
      "[2]\ttrain-merror:0.04014\tval-merror:0.173611\n",
      "[3]\ttrain-merror:0.038394\tval-merror:0.166667\n",
      "[4]\ttrain-merror:0.027923\tval-merror:0.166667\n",
      "[5]\ttrain-merror:0.024433\tval-merror:0.159722\n",
      "[6]\ttrain-merror:0.027923\tval-merror:0.173611\n",
      "[7]\ttrain-merror:0.020942\tval-merror:0.152778\n",
      "[8]\ttrain-merror:0.017452\tval-merror:0.138889\n",
      "[9]\ttrain-merror:0.019197\tval-merror:0.131944\n",
      "[10]\ttrain-merror:0.015707\tval-merror:0.138889\n",
      "[11]\ttrain-merror:0.013962\tval-merror:0.138889\n",
      "[12]\ttrain-merror:0.010471\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[14]\ttrain-merror:0.017452\tval-merror:0.145833\n",
      "[15]\ttrain-merror:0.015707\tval-merror:0.131944\n",
      "[16]\ttrain-merror:0.015707\tval-merror:0.131944\n",
      "[17]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[18]\ttrain-merror:0.010471\tval-merror:0.125\n",
      "[19]\ttrain-merror:0.010471\tval-merror:0.125\n",
      "[20]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[21]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[22]\ttrain-merror:0.008726\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[12]\ttrain-merror:0.010471\tval-merror:0.125\n",
      "\n",
      "[2. 3. 3. 2. 1. 3. 2. 1. 1. 2. 3. 1. 1. 2. 3. 1. 2. 3. 3. 3. 2. 3. 2. 2.\n",
      " 3. 2. 1. 1. 2. 1. 2. 3. 1. 2. 1. 2. 2. 3. 2. 1. 1. 3. 1. 2. 3. 3. 3. 3.\n",
      " 2. 2. 2. 1. 1. 1. 3. 2. 3. 2. 3. 3. 1. 1. 1. 2. 2. 1. 1. 3. 1. 1. 2. 1.\n",
      " 2. 1. 3. 2. 1. 2. 2. 3. 2. 2. 1. 3. 1. 1. 2. 3. 3. 2. 1. 2. 1. 2. 2. 1.\n",
      " 1. 2. 2. 3. 3. 3. 2. 1. 3. 3. 2. 3. 3. 2. 1. 1. 3. 2. 2. 1. 1. 1. 2. 1.\n",
      " 2. 3. 3. 1. 1. 3. 1. 2. 1. 3. 1. 3. 1. 2. 2. 2. 3. 2. 3. 2. 2. 1. 2. 3.] [1, 3, 3, 2, 3, 3, 2, 1, 1, 2, 3, 1, 1, 2, 3, 1, 2, 3, 3, 3, 1, 3, 2, 2, 3, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 3, 2, 1, 1, 3, 3, 2, 3, 1, 3, 3, 2, 2, 2, 1, 1, 1, 3, 2, 3, 2, 3, 3, 2, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 1, 2, 1, 3, 2, 2, 2, 1, 3, 1, 1, 2, 3, 2, 1, 1, 3, 3, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 3, 3, 3, 2, 1, 3, 3, 2, 3, 3, 2, 1, 1, 3, 2, 2, 1, 1, 1, 2, 1, 2, 3, 3, 1, 1, 3, 1, 2, 1, 3, 1, 3, 1, 2, 2, 2, 3, 2, 1, 2, 2, 1, 1, 3] 0.8611111111111112\n",
      "[0]\ttrain-merror:0.071553\tval-merror:0.180556\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.054101\tval-merror:0.145833\n",
      "[2]\ttrain-merror:0.031414\tval-merror:0.125\n",
      "[3]\ttrain-merror:0.029668\tval-merror:0.090278\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.069444\n",
      "[5]\ttrain-merror:0.020942\tval-merror:0.076389\n",
      "[6]\ttrain-merror:0.017452\tval-merror:0.083333\n",
      "[7]\ttrain-merror:0.015707\tval-merror:0.076389\n",
      "[8]\ttrain-merror:0.012216\tval-merror:0.083333\n",
      "[9]\ttrain-merror:0.010471\tval-merror:0.076389\n",
      "[10]\ttrain-merror:0.013962\tval-merror:0.076389\n",
      "[11]\ttrain-merror:0.013962\tval-merror:0.076389\n",
      "[12]\ttrain-merror:0.010471\tval-merror:0.069444\n",
      "[13]\ttrain-merror:0.012216\tval-merror:0.069444\n",
      "[14]\ttrain-merror:0.010471\tval-merror:0.076389\n",
      "Stopping. Best iteration:\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.069444\n",
      "\n",
      "[2. 1. 2. 2. 2. 3. 3. 2. 3. 2. 1. 3. 2. 3. 3. 3. 2. 2. 1. 3. 2. 2. 2. 1.\n",
      " 1. 1. 3. 3. 2. 2. 1. 1. 1. 2. 2. 1. 2. 1. 3. 2. 2. 2. 2. 2. 1. 2. 2. 1.\n",
      " 1. 1. 1. 3. 2. 2. 1. 3. 2. 3. 1. 2. 2. 2. 3. 2. 1. 2. 2. 2. 1. 3. 2. 2.\n",
      " 3. 2. 1. 2. 1. 3. 1. 2. 3. 2. 3. 2. 1. 1. 2. 1. 1. 2. 2. 2. 2. 1. 3. 2.\n",
      " 1. 3. 2. 1. 1. 2. 3. 3. 3. 2. 2. 1. 1. 3. 1. 2. 2. 1. 3. 3. 2. 3. 3. 1.\n",
      " 3. 2. 1. 3. 3. 2. 1. 2. 1. 3. 3. 2. 3. 3. 2. 1. 1. 3. 2. 2. 1. 3. 2. 3.] [2, 1, 2, 2, 2, 3, 3, 2, 3, 2, 1, 3, 2, 3, 3, 3, 2, 2, 1, 3, 1, 1, 2, 1, 2, 1, 3, 3, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 3, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 3, 2, 2, 1, 3, 2, 3, 1, 2, 2, 1, 3, 2, 1, 2, 1, 2, 1, 3, 2, 2, 3, 2, 3, 2, 1, 3, 1, 2, 3, 2, 3, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 3, 2, 1, 3, 2, 1, 1, 2, 3, 3, 3, 2, 2, 1, 1, 3, 1, 2, 2, 1, 3, 3, 2, 3, 3, 1, 3, 2, 1, 3, 3, 2, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 1, 3, 2, 2, 1, 3, 2, 3] 0.9097222222222222\n",
      "[0]\ttrain-merror:0.075044\tval-merror:0.201389\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033159\tval-merror:0.159722\n",
      "[2]\ttrain-merror:0.022688\tval-merror:0.159722\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.125\n",
      "[4]\ttrain-merror:0.024433\tval-merror:0.145833\n",
      "[5]\ttrain-merror:0.017452\tval-merror:0.138889\n",
      "[6]\ttrain-merror:0.017452\tval-merror:0.131944\n",
      "[7]\ttrain-merror:0.013962\tval-merror:0.131944\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.138889\n",
      "[9]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.006981\tval-merror:0.125\n",
      "[11]\ttrain-merror:0.006981\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.005236\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.006981\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.125\n",
      "\n",
      "[3. 3. 3. 2. 2. 1. 1. 2. 2. 3. 1. 3. 1. 2. 3. 3. 3. 2. 2. 1. 3. 1. 1. 1.\n",
      " 1. 3. 3. 3. 3. 2. 3. 2. 2. 3. 1. 3. 1. 2. 2. 3. 2. 2. 2. 3. 1. 2. 3. 3.\n",
      " 2. 2. 1. 3. 1. 3. 3. 2. 2. 1. 3. 3. 3. 2. 3. 1. 1. 2. 2. 3. 2. 2. 3. 1.\n",
      " 1. 1. 3. 1. 2. 2. 1. 3. 3. 1. 1. 1. 2. 1. 1. 2. 1. 2. 2. 3. 3. 3. 2. 2.\n",
      " 3. 2. 3. 2. 2. 3. 2. 2. 3. 3. 1. 3. 2. 2. 1. 2. 3. 2. 3. 3. 3. 2. 2. 1.\n",
      " 3. 2. 3. 2. 3. 3. 2. 3. 3. 2. 2. 1. 2. 3. 2. 2. 1. 3. 3. 1. 1. 1. 3. 2.] [3, 3, 3, 2, 2, 1, 1, 2, 1, 3, 1, 3, 2, 2, 3, 3, 3, 2, 2, 1, 3, 1, 2, 1, 1, 3, 3, 3, 3, 2, 3, 2, 2, 3, 1, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 3, 3, 2, 2, 1, 3, 2, 3, 3, 2, 2, 1, 3, 3, 3, 2, 3, 1, 1, 1, 3, 3, 2, 2, 3, 2, 2, 2, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 3, 3, 2, 1, 1, 3, 2, 3, 2, 2, 2, 1, 1, 3, 3, 1, 3, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 2, 1, 3, 2, 3, 1, 3, 3, 2, 3, 3, 2, 2, 1, 1, 3, 2, 2, 1, 3, 3, 1, 1, 1, 3, 2] 0.8402777777777778\n",
      "[0]\ttrain-merror:0.068063\tval-merror:0.208333\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.04014\tval-merror:0.152778\n",
      "[2]\ttrain-merror:0.022688\tval-merror:0.131944\n",
      "[3]\ttrain-merror:0.026178\tval-merror:0.166667\n",
      "[4]\ttrain-merror:0.017452\tval-merror:0.145833\n",
      "[5]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.008726\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.005236\tval-merror:0.138889\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.131944\n",
      "[10]\ttrain-merror:0.005236\tval-merror:0.131944\n",
      "[11]\ttrain-merror:0.005236\tval-merror:0.131944\n",
      "[12]\ttrain-merror:0.00349\tval-merror:0.138889\n",
      "[13]\ttrain-merror:0.001745\tval-merror:0.138889\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.131944\n",
      "[15]\ttrain-merror:0.00349\tval-merror:0.131944\n",
      "Stopping. Best iteration:\n",
      "[5]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "\n",
      "[3. 3. 1. 2. 2. 2. 1. 1. 3. 3. 3. 2. 3. 2. 2. 1. 3. 1. 2. 3. 2. 3. 2. 3.\n",
      " 2. 3. 2. 1. 2. 3. 2. 2. 3. 2. 1. 1. 3. 3. 2. 2. 3. 2. 3. 2. 3. 3. 1. 3.\n",
      " 2. 2. 3. 2. 1. 3. 2. 2. 3. 2. 3. 1. 1. 2. 2. 1. 1. 2. 1. 2. 2. 2. 3. 2.\n",
      " 1. 1. 2. 3. 2. 3. 3. 3. 3. 1. 1. 2. 2. 3. 3. 1. 1. 1. 2. 2. 2. 1. 2. 2.\n",
      " 2. 2. 3. 2. 3. 2. 1. 2. 3. 1. 1. 2. 2. 1. 1. 1. 2. 3. 2. 3. 2. 3. 3. 2.\n",
      " 2. 2. 3. 1. 2. 2. 3. 2. 3. 1. 3. 1. 1. 3. 3. 3. 1. 2. 2. 2. 1. 3. 1. 2.] [3, 3, 1, 2, 1, 2, 1, 1, 3, 3, 3, 2, 3, 3, 2, 1, 3, 1, 2, 3, 1, 3, 2, 3, 2, 3, 2, 1, 2, 3, 1, 2, 3, 2, 1, 1, 3, 1, 2, 2, 3, 2, 3, 1, 3, 3, 1, 3, 1, 2, 3, 2, 1, 3, 2, 2, 3, 2, 3, 1, 3, 2, 2, 1, 1, 2, 1, 1, 2, 2, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 3, 3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 3, 2, 3, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 2, 3, 1, 3, 2, 3, 3, 2, 2, 2, 3, 1, 2, 2, 2, 2, 3, 1, 3, 1, 1, 3, 3, 3, 2, 2, 2, 2, 1, 3, 1, 2] 0.8541666666666666\n",
      "[0]\ttrain-merror:0.057592\tval-merror:0.159722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038394\tval-merror:0.152778\n",
      "[2]\ttrain-merror:0.026178\tval-merror:0.145833\n",
      "[3]\ttrain-merror:0.029668\tval-merror:0.138889\n",
      "[4]\ttrain-merror:0.033159\tval-merror:0.118056\n",
      "[5]\ttrain-merror:0.029668\tval-merror:0.118056\n",
      "[6]\ttrain-merror:0.020942\tval-merror:0.111111\n",
      "[7]\ttrain-merror:0.019197\tval-merror:0.111111\n",
      "[8]\ttrain-merror:0.019197\tval-merror:0.111111\n",
      "[9]\ttrain-merror:0.022688\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.015707\tval-merror:0.111111\n",
      "[11]\ttrain-merror:0.015707\tval-merror:0.104167\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12]\ttrain-merror:0.012216\tval-merror:0.090278\n",
      "[13]\ttrain-merror:0.012216\tval-merror:0.090278\n",
      "[14]\ttrain-merror:0.013962\tval-merror:0.083333\n",
      "[15]\ttrain-merror:0.010471\tval-merror:0.083333\n",
      "[16]\ttrain-merror:0.010471\tval-merror:0.090278\n",
      "[17]\ttrain-merror:0.010471\tval-merror:0.083333\n",
      "[18]\ttrain-merror:0.010471\tval-merror:0.083333\n",
      "[19]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[20]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[21]\ttrain-merror:0.005236\tval-merror:0.069444\n",
      "[22]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[23]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[24]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[25]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "[26]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[27]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[28]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[29]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "[30]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[31]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "Stopping. Best iteration:\n",
      "[21]\ttrain-merror:0.005236\tval-merror:0.069444\n",
      "\n",
      "[2. 3. 3. 3. 3. 1. 1. 1. 1. 2. 3. 3. 1. 2. 2. 2. 3. 3. 2. 2. 3. 1. 3. 2.\n",
      " 3. 1. 3. 3. 3. 3. 1. 2. 1. 1. 3. 2. 2. 2. 1. 1. 2. 1. 1. 2. 3. 1. 1. 2.\n",
      " 2. 3. 2. 1. 2. 2. 3. 1. 2. 3. 1. 3. 3. 2. 1. 2. 3. 3. 1. 1. 2. 2. 2. 3.\n",
      " 1. 2. 3. 3. 2. 1. 3. 2. 3. 2. 2. 3. 2. 1. 1. 1. 1. 2. 2. 3. 3. 2. 1. 2.\n",
      " 2. 3. 3. 3. 3. 3. 3. 2. 3. 1. 3. 3. 3. 2. 1. 2. 3. 1. 1. 2. 3. 1. 3. 1.\n",
      " 2. 2. 2. 2. 3. 3. 3. 2. 1. 3. 3. 3. 2. 1. 3. 2. 1. 3. 1. 3. 2. 3. 1. 1.] [2, 3, 3, 3, 3, 1, 2, 1, 1, 2, 3, 3, 1, 2, 2, 2, 3, 3, 2, 1, 3, 1, 3, 2, 3, 1, 3, 3, 3, 3, 1, 2, 1, 2, 3, 2, 2, 2, 1, 1, 2, 1, 1, 2, 3, 1, 1, 2, 2, 3, 1, 1, 2, 2, 3, 1, 2, 3, 1, 3, 3, 2, 1, 2, 3, 3, 1, 1, 2, 2, 2, 3, 1, 2, 3, 3, 2, 2, 3, 2, 3, 2, 2, 3, 2, 1, 1, 1, 1, 2, 2, 3, 3, 2, 1, 2, 2, 3, 3, 3, 3, 3, 3, 2, 3, 1, 3, 3, 3, 2, 2, 2, 2, 1, 1, 2, 3, 1, 2, 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 3, 3, 3, 2, 1, 3, 1, 2, 3, 1, 3, 1, 3, 1, 1] 0.9166666666666666\n",
      "[0]\ttrain-merror:0.059337\tval-merror:0.173611\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033159\tval-merror:0.111111\n",
      "[2]\ttrain-merror:0.024433\tval-merror:0.118056\n",
      "[3]\ttrain-merror:0.019197\tval-merror:0.111111\n",
      "[4]\ttrain-merror:0.013962\tval-merror:0.097222\n",
      "[5]\ttrain-merror:0.012216\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "[7]\ttrain-merror:0.010471\tval-merror:0.090278\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.083333\n",
      "[9]\ttrain-merror:0.010471\tval-merror:0.076389\n",
      "[10]\ttrain-merror:0.008726\tval-merror:0.076389\n",
      "[11]\ttrain-merror:0.008726\tval-merror:0.076389\n",
      "[12]\ttrain-merror:0.006981\tval-merror:0.083333\n",
      "[13]\ttrain-merror:0.006981\tval-merror:0.076389\n",
      "[14]\ttrain-merror:0.006981\tval-merror:0.083333\n",
      "[15]\ttrain-merror:0.006981\tval-merror:0.076389\n",
      "[16]\ttrain-merror:0.006981\tval-merror:0.069444\n",
      "[17]\ttrain-merror:0.006981\tval-merror:0.069444\n",
      "[18]\ttrain-merror:0.006981\tval-merror:0.069444\n",
      "[19]\ttrain-merror:0.006981\tval-merror:0.069444\n",
      "[20]\ttrain-merror:0.006981\tval-merror:0.069444\n",
      "[21]\ttrain-merror:0.005236\tval-merror:0.069444\n",
      "[22]\ttrain-merror:0.005236\tval-merror:0.069444\n",
      "[23]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "[24]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "[25]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[26]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "Stopping. Best iteration:\n",
      "[16]\ttrain-merror:0.006981\tval-merror:0.069444\n",
      "\n",
      "[2. 3. 1. 3. 2. 2. 2. 3. 1. 2. 2. 2. 3. 3. 1. 2. 3. 3. 3. 3. 3. 3. 1. 2.\n",
      " 2. 2. 2. 2. 1. 2. 3. 2. 1. 1. 2. 3. 3. 2. 2. 1. 2. 2. 2. 2. 2. 3. 2. 1.\n",
      " 1. 1. 3. 1. 2. 2. 1. 2. 2. 2. 2. 1. 3. 2. 3. 3. 3. 2. 2. 2. 3. 3. 3. 3.\n",
      " 1. 3. 2. 1. 2. 2. 1. 2. 1. 2. 2. 3. 1. 1. 1. 1. 3. 1. 2. 1. 1. 1. 2. 3.\n",
      " 3. 2. 2. 1. 2. 2. 3. 1. 2. 2. 3. 2. 3. 1. 1. 2. 2. 3. 2. 1. 1. 3. 2. 3.\n",
      " 2. 1. 1. 3. 2. 1. 2. 3. 1. 1. 1. 2. 3. 1. 3. 2. 1. 1. 2. 1. 2. 1. 2. 1.] [2, 3, 1, 3, 2, 2, 2, 3, 1, 1, 2, 2, 3, 2, 1, 2, 3, 2, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 2, 2, 3, 3, 2, 2, 1, 2, 1, 1, 2, 2, 3, 2, 2, 1, 1, 3, 1, 2, 2, 1, 2, 2, 1, 2, 1, 3, 1, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 1, 3, 2, 1, 2, 2, 1, 2, 1, 2, 2, 3, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 2, 3, 3, 2, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 1, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 1, 2, 3, 1, 1, 2, 2, 3, 1, 3, 2, 1, 1, 2, 1, 2, 1, 2, 1] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.08377\tval-merror:0.159722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.050611\tval-merror:0.159722\n",
      "[2]\ttrain-merror:0.031414\tval-merror:0.111111\n",
      "[3]\ttrain-merror:0.033159\tval-merror:0.104167\n",
      "[4]\ttrain-merror:0.027923\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.029668\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.026178\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.020942\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.013962\tval-merror:0.125\n",
      "[9]\ttrain-merror:0.013962\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.015707\tval-merror:0.125\n",
      "[11]\ttrain-merror:0.010471\tval-merror:0.131944\n",
      "[12]\ttrain-merror:0.008726\tval-merror:0.138889\n",
      "[13]\ttrain-merror:0.005236\tval-merror:0.138889\n",
      "Stopping. Best iteration:\n",
      "[3]\ttrain-merror:0.033159\tval-merror:0.104167\n",
      "\n",
      "[3. 2. 2. 3. 3. 2. 3. 3. 3. 1. 2. 3. 3. 3. 2. 3. 3. 3. 3. 3. 3. 2. 1. 1.\n",
      " 2. 2. 1. 1. 2. 2. 1. 3. 2. 2. 2. 1. 3. 3. 3. 1. 1. 1. 2. 2. 1. 1. 1. 1.\n",
      " 2. 1. 1. 2. 3. 1. 2. 2. 2. 3. 1. 2. 1. 2. 2. 1. 3. 2. 1. 3. 1. 2. 2. 3.\n",
      " 2. 1. 1. 3. 2. 1. 3. 1. 1. 2. 2. 1. 2. 3. 1. 1. 1. 2. 2. 3. 2. 2. 2. 2.\n",
      " 1. 2. 3. 3. 3. 3. 1. 3. 2. 2. 2. 2. 3. 3. 3. 1. 3. 1. 3. 2. 1. 1. 3. 2.\n",
      " 2. 2. 2. 2. 1. 3. 1. 2. 2. 3. 3. 3. 3. 1. 3. 2. 1. 1. 2. 1. 3. 3. 1. 3.] [3, 2, 2, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 3, 2, 2, 2, 2, 3, 3, 3, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 2, 3, 2, 2, 1, 1, 2, 1, 3, 2, 1, 3, 1, 2, 2, 3, 1, 1, 1, 3, 2, 1, 3, 1, 1, 2, 2, 1, 2, 3, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 1, 2, 3, 2, 3, 3, 1, 3, 2, 1, 2, 2, 3, 3, 3, 1, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3, 2, 1, 1, 3, 1, 2, 2, 3, 3, 3, 3, 1, 2, 2, 1, 1, 2, 1, 3, 2, 1, 3] 0.8888888888888888\n",
      "[0]\ttrain-merror:0.080279\tval-merror:0.194444\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.057592\tval-merror:0.208333\n",
      "[2]\ttrain-merror:0.04014\tval-merror:0.173611\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.152778\n",
      "[4]\ttrain-merror:0.022688\tval-merror:0.166667\n",
      "[5]\ttrain-merror:0.013962\tval-merror:0.159722\n",
      "[6]\ttrain-merror:0.012216\tval-merror:0.159722\n",
      "[7]\ttrain-merror:0.012216\tval-merror:0.145833\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.152778\n",
      "[9]\ttrain-merror:0.008726\tval-merror:0.166667\n",
      "[10]\ttrain-merror:0.010471\tval-merror:0.152778\n",
      "[11]\ttrain-merror:0.006981\tval-merror:0.145833\n",
      "[12]\ttrain-merror:0.006981\tval-merror:0.138889\n",
      "[13]\ttrain-merror:0.005236\tval-merror:0.138889\n",
      "[14]\ttrain-merror:0.005236\tval-merror:0.138889\n",
      "[15]\ttrain-merror:0.005236\tval-merror:0.138889\n",
      "[16]\ttrain-merror:0.005236\tval-merror:0.111111\n",
      "[17]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[18]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[19]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[20]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[21]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[22]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[23]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[24]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[25]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[26]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[27]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[28]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[29]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[30]\ttrain-merror:0.00349\tval-merror:0.097222\n",
      "[31]\ttrain-merror:0.00349\tval-merror:0.097222\n",
      "[32]\ttrain-merror:0.00349\tval-merror:0.097222\n",
      "[33]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[34]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[35]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[36]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[37]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[38]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[39]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[40]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "Stopping. Best iteration:\n",
      "[30]\ttrain-merror:0.00349\tval-merror:0.097222\n",
      "\n",
      "[2. 1. 3. 1. 2. 2. 3. 3. 1. 2. 3. 1. 1. 1. 2. 1. 2. 1. 1. 2. 3. 1. 2. 3.\n",
      " 1. 1. 3. 1. 1. 2. 3. 1. 3. 2. 1. 1. 3. 3. 2. 1. 1. 3. 3. 1. 2. 2. 3. 1.\n",
      " 2. 3. 3. 2. 3. 2. 1. 2. 3. 2. 2. 3. 3. 1. 1. 2. 1. 2. 1. 3. 3. 1. 2. 3.\n",
      " 3. 1. 3. 2. 1. 2. 3. 3. 3. 2. 3. 1. 1. 2. 3. 1. 3. 2. 1. 1. 2. 2. 3. 2.\n",
      " 2. 3. 2. 3. 2. 3. 1. 2. 2. 3. 3. 1. 2. 1. 3. 3. 3. 2. 2. 2. 1. 1. 3. 2.\n",
      " 2. 3. 3. 2. 2. 3. 1. 1. 2. 3. 2. 1. 1. 2. 3. 1. 1. 1. 3. 3. 3. 1. 2. 2.] [2, 1, 2, 1, 2, 2, 3, 3, 2, 2, 3, 1, 1, 2, 2, 1, 2, 1, 2, 2, 3, 1, 2, 3, 1, 1, 3, 1, 1, 2, 3, 1, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 2, 3, 2, 2, 2, 3, 2, 2, 3, 3, 1, 1, 2, 1, 2, 1, 3, 3, 2, 2, 3, 3, 1, 3, 3, 1, 2, 3, 3, 3, 2, 3, 1, 1, 2, 3, 2, 3, 2, 1, 2, 2, 2, 3, 2, 2, 1, 2, 3, 2, 3, 1, 2, 2, 3, 3, 1, 2, 1, 3, 3, 2, 2, 2, 2, 1, 1, 3, 2, 2, 3, 3, 2, 2, 3, 1, 1, 1, 2, 2, 1, 2, 2, 3, 1, 2, 1, 3, 3, 3, 1, 2, 2] 0.8958333333333334\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\ttrain-merror:0.069808\tval-merror:0.152778\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.036649\tval-merror:0.145833\n",
      "[2]\ttrain-merror:0.027923\tval-merror:0.131944\n",
      "[3]\ttrain-merror:0.019197\tval-merror:0.131944\n",
      "[4]\ttrain-merror:0.022688\tval-merror:0.118056\n",
      "[5]\ttrain-merror:0.017452\tval-merror:0.118056\n",
      "[6]\ttrain-merror:0.015707\tval-merror:0.097222\n",
      "[7]\ttrain-merror:0.013962\tval-merror:0.090278\n",
      "[8]\ttrain-merror:0.015707\tval-merror:0.097222\n",
      "[9]\ttrain-merror:0.015707\tval-merror:0.097222\n",
      "[10]\ttrain-merror:0.012216\tval-merror:0.111111\n",
      "[11]\ttrain-merror:0.013962\tval-merror:0.118056\n",
      "[12]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[13]\ttrain-merror:0.008726\tval-merror:0.118056\n",
      "[14]\ttrain-merror:0.008726\tval-merror:0.118056\n",
      "[15]\ttrain-merror:0.012216\tval-merror:0.111111\n",
      "[16]\ttrain-merror:0.008726\tval-merror:0.097222\n",
      "[17]\ttrain-merror:0.006981\tval-merror:0.104167\n",
      "Stopping. Best iteration:\n",
      "[7]\ttrain-merror:0.013962\tval-merror:0.090278\n",
      "\n",
      "[1. 3. 1. 2. 1. 1. 2. 3. 2. 2. 1. 3. 3. 2. 2. 3. 2. 3. 1. 3. 3. 3. 2. 3.\n",
      " 3. 3. 3. 2. 1. 2. 1. 3. 1. 2. 2. 3. 1. 1. 2. 2. 3. 3. 3. 1. 3. 2. 1. 2.\n",
      " 2. 1. 2. 2. 3. 2. 3. 1. 3. 1. 2. 1. 3. 2. 1. 2. 3. 1. 1. 3. 3. 2. 1. 2.\n",
      " 2. 2. 2. 2. 3. 1. 3. 2. 2. 2. 2. 3. 3. 1. 3. 1. 2. 1. 1. 3. 1. 3. 2. 1.\n",
      " 1. 2. 1. 2. 3. 2. 3. 3. 1. 1. 1. 3. 2. 2. 1. 2. 3. 3. 1. 3. 3. 1. 3. 3.\n",
      " 3. 1. 3. 3. 2. 2. 2. 3. 2. 3. 3. 1. 2. 3. 3. 1. 3. 2. 1. 1. 3. 3. 2. 2.] [1, 3, 1, 2, 1, 1, 2, 3, 2, 1, 1, 3, 3, 2, 2, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 3, 3, 1, 1, 2, 1, 3, 1, 2, 1, 3, 2, 1, 2, 2, 3, 3, 3, 1, 3, 2, 1, 2, 2, 1, 2, 1, 3, 1, 3, 1, 3, 2, 2, 1, 3, 1, 1, 2, 3, 1, 1, 3, 3, 2, 1, 2, 2, 2, 2, 2, 3, 1, 3, 2, 2, 2, 2, 3, 3, 2, 3, 1, 2, 2, 1, 3, 1, 3, 2, 1, 1, 2, 1, 2, 3, 2, 3, 3, 1, 1, 1, 3, 2, 2, 1, 2, 3, 3, 1, 2, 3, 1, 3, 3, 3, 2, 3, 3, 2, 1, 1, 3, 2, 3, 3, 1, 2, 3, 3, 1, 3, 2, 1, 1, 3, 3, 2, 2] 0.9027777777777778\n",
      "[0]\ttrain-merror:0.073298\tval-merror:0.194444\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.041885\tval-merror:0.166667\n",
      "[2]\ttrain-merror:0.034904\tval-merror:0.152778\n",
      "[3]\ttrain-merror:0.026178\tval-merror:0.145833\n",
      "[4]\ttrain-merror:0.026178\tval-merror:0.152778\n",
      "[5]\ttrain-merror:0.020942\tval-merror:0.152778\n",
      "[6]\ttrain-merror:0.019197\tval-merror:0.138889\n",
      "[7]\ttrain-merror:0.017452\tval-merror:0.152778\n",
      "[8]\ttrain-merror:0.013962\tval-merror:0.145833\n",
      "[9]\ttrain-merror:0.012216\tval-merror:0.131944\n",
      "[10]\ttrain-merror:0.010471\tval-merror:0.111111\n",
      "[11]\ttrain-merror:0.008726\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.008726\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.010471\tval-merror:0.131944\n",
      "[14]\ttrain-merror:0.012216\tval-merror:0.118056\n",
      "[15]\ttrain-merror:0.010471\tval-merror:0.125\n",
      "[16]\ttrain-merror:0.010471\tval-merror:0.118056\n",
      "[17]\ttrain-merror:0.008726\tval-merror:0.118056\n",
      "[18]\ttrain-merror:0.006981\tval-merror:0.118056\n",
      "[19]\ttrain-merror:0.005236\tval-merror:0.111111\n",
      "[20]\ttrain-merror:0.005236\tval-merror:0.104167\n",
      "[21]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "[22]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[23]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "[24]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[25]\ttrain-merror:0.001745\tval-merror:0.090278\n",
      "[26]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[27]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[28]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[29]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[30]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[31]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[32]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[33]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[34]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "Stopping. Best iteration:\n",
      "[24]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "\n",
      "[1. 2. 3. 2. 1. 2. 1. 3. 1. 1. 3. 3. 2. 1. 1. 2. 2. 2. 2. 2. 3. 2. 1. 1.\n",
      " 3. 1. 2. 1. 2. 3. 3. 2. 3. 1. 2. 2. 2. 1. 1. 1. 2. 3. 2. 3. 1. 1. 1. 1.\n",
      " 2. 2. 3. 3. 2. 3. 2. 2. 3. 3. 3. 3. 3. 3. 3. 3. 3. 2. 2. 3. 3. 2. 3. 2.\n",
      " 2. 3. 3. 3. 2. 1. 2. 1. 1. 2. 2. 1. 1. 3. 1. 2. 2. 3. 3. 2. 3. 1. 1. 2.\n",
      " 2. 3. 3. 2. 2. 2. 2. 1. 2. 2. 3. 3. 3. 2. 2. 3. 1. 3. 3. 1. 2. 3. 3. 1.\n",
      " 3. 1. 1. 1. 1. 2. 2. 1. 2. 1. 2. 2. 3. 2. 3. 2. 2. 3. 1. 3. 3. 2. 2. 1.] [2, 2, 3, 2, 1, 2, 1, 3, 1, 2, 3, 3, 2, 1, 1, 2, 2, 2, 2, 2, 3, 2, 1, 1, 3, 1, 1, 1, 2, 3, 3, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 3, 2, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 3, 1, 1, 2, 1, 1, 2, 1, 1, 1, 3, 2, 1, 2, 3, 3, 2, 3, 1, 1, 2, 2, 3, 3, 2, 2, 2, 1, 1, 2, 2, 3, 3, 3, 2, 2, 3, 1, 3, 3, 1, 2, 3, 3, 1, 3, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 3, 1, 3, 2, 2, 3, 1, 3, 3, 2, 2, 1] 0.8888888888888888\n",
      "[0]\ttrain-merror:0.059337\tval-merror:0.145833\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038394\tval-merror:0.166667\n",
      "[2]\ttrain-merror:0.024433\tval-merror:0.152778\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.145833\n",
      "[4]\ttrain-merror:0.017452\tval-merror:0.118056\n",
      "[5]\ttrain-merror:0.019197\tval-merror:0.118056\n",
      "[6]\ttrain-merror:0.017452\tval-merror:0.111111\n",
      "[7]\ttrain-merror:0.013962\tval-merror:0.104167\n",
      "[8]\ttrain-merror:0.012216\tval-merror:0.111111\n",
      "[9]\ttrain-merror:0.010471\tval-merror:0.104167\n",
      "[10]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "[11]\ttrain-merror:0.010471\tval-merror:0.104167\n",
      "[12]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[13]\ttrain-merror:0.008726\tval-merror:0.111111\n",
      "[14]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[15]\ttrain-merror:0.008726\tval-merror:0.111111\n",
      "[16]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[17]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[18]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[19]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[20]\ttrain-merror:0.001745\tval-merror:0.118056\n",
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "\n",
      "[2. 2. 1. 2. 3. 1. 2. 2. 2. 3. 2. 3. 1. 3. 1. 3. 2. 2. 3. 3. 2. 1. 2. 3.\n",
      " 2. 1. 3. 3. 3. 2. 3. 2. 3. 3. 1. 3. 2. 3. 3. 3. 1. 3. 3. 1. 3. 2. 2. 2.\n",
      " 3. 2. 1. 3. 3. 1. 3. 1. 2. 2. 1. 2. 3. 2. 1. 1. 2. 1. 2. 1. 3. 2. 2. 2.\n",
      " 2. 2. 3. 3. 1. 3. 2. 3. 3. 3. 3. 2. 2. 3. 2. 2. 2. 2. 1. 3. 2. 3. 3. 1.\n",
      " 2. 1. 1. 2. 3. 1. 2. 1. 1. 3. 2. 1. 1. 1. 2. 2. 1. 3. 1. 1. 1. 3. 3. 1.\n",
      " 1. 2. 3. 1. 3. 2. 2. 2. 3. 3. 3. 1. 2. 2. 2. 1. 2. 1. 1. 3. 3. 3. 2. 3.] [2, 1, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 1, 3, 1, 3, 1, 2, 3, 3, 2, 1, 2, 3, 2, 1, 3, 3, 3, 1, 3, 2, 3, 3, 1, 3, 2, 3, 3, 3, 1, 3, 3, 2, 3, 2, 1, 2, 3, 2, 1, 3, 3, 1, 3, 1, 2, 2, 1, 2, 3, 2, 2, 1, 2, 1, 2, 1, 3, 2, 2, 1, 2, 2, 3, 3, 1, 3, 2, 3, 3, 3, 3, 2, 2, 3, 1, 2, 2, 2, 2, 3, 2, 3, 3, 1, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 3, 1, 1, 1, 3, 3, 1, 1, 2, 3, 1, 3, 2, 1, 2, 3, 3, 3, 1, 2, 2, 2, 1, 2, 1, 1, 3, 3, 1, 2, 3] 0.8958333333333334\n",
      "[0]\ttrain-merror:0.078534\tval-merror:0.173611\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.048866\tval-merror:0.152778\n",
      "[2]\ttrain-merror:0.026178\tval-merror:0.145833\n",
      "[3]\ttrain-merror:0.019197\tval-merror:0.138889\n",
      "[4]\ttrain-merror:0.015707\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.013962\tval-merror:0.118056\n",
      "[6]\ttrain-merror:0.010471\tval-merror:0.118056\n",
      "[7]\ttrain-merror:0.010471\tval-merror:0.104167\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.097222\n",
      "[9]\ttrain-merror:0.006981\tval-merror:0.097222\n",
      "[10]\ttrain-merror:0.006981\tval-merror:0.097222\n",
      "[11]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[12]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[13]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[14]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[15]\ttrain-merror:0.00349\tval-merror:0.083333\n",
      "[16]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[17]\ttrain-merror:0.00349\tval-merror:0.083333\n",
      "[18]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[19]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[20]\ttrain-merror:0\tval-merror:0.076389\n",
      "[21]\ttrain-merror:0\tval-merror:0.069444\n",
      "[22]\ttrain-merror:0\tval-merror:0.076389\n",
      "[23]\ttrain-merror:0\tval-merror:0.076389\n",
      "[24]\ttrain-merror:0\tval-merror:0.076389\n",
      "[25]\ttrain-merror:0\tval-merror:0.069444\n",
      "[26]\ttrain-merror:0\tval-merror:0.076389\n",
      "[27]\ttrain-merror:0\tval-merror:0.083333\n",
      "[28]\ttrain-merror:0\tval-merror:0.083333\n",
      "[29]\ttrain-merror:0\tval-merror:0.083333\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[30]\ttrain-merror:0\tval-merror:0.083333\n",
      "[31]\ttrain-merror:0\tval-merror:0.083333\n",
      "Stopping. Best iteration:\n",
      "[21]\ttrain-merror:0\tval-merror:0.069444\n",
      "\n",
      "[3. 1. 1. 2. 2. 2. 2. 1. 2. 1. 3. 3. 2. 2. 1. 3. 1. 1. 3. 1. 3. 2. 2. 1.\n",
      " 3. 1. 3. 1. 2. 2. 2. 1. 3. 3. 3. 3. 3. 3. 3. 2. 3. 3. 1. 3. 1. 2. 1. 1.\n",
      " 3. 1. 2. 3. 3. 2. 3. 2. 3. 2. 1. 3. 3. 3. 3. 1. 3. 2. 3. 2. 1. 1. 3. 1.\n",
      " 2. 3. 1. 3. 1. 1. 2. 3. 2. 2. 3. 1. 2. 3. 3. 2. 1. 2. 1. 2. 3. 1. 2. 2.\n",
      " 1. 2. 2. 3. 2. 2. 3. 3. 1. 3. 1. 3. 3. 1. 2. 1. 2. 1. 2. 2. 2. 2. 3. 3.\n",
      " 2. 1. 3. 3. 3. 3. 3. 2. 2. 3. 1. 1. 3. 2. 2. 1. 1. 3. 1. 1. 1. 1. 1. 1.] [3, 1, 1, 2, 2, 1, 2, 1, 2, 1, 3, 3, 2, 1, 1, 3, 1, 1, 3, 1, 3, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 1, 3, 1, 2, 1, 1, 3, 1, 2, 3, 3, 2, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 1, 3, 2, 1, 1, 3, 1, 2, 3, 1, 2, 2, 1, 2, 3, 2, 2, 3, 1, 2, 2, 3, 2, 1, 2, 1, 2, 3, 1, 2, 2, 1, 2, 2, 3, 2, 1, 3, 3, 1, 3, 1, 3, 3, 1, 2, 1, 2, 1, 2, 2, 2, 2, 3, 3, 1, 1, 3, 3, 3, 3, 3, 2, 2, 3, 2, 2, 3, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.064572\tval-merror:0.166667\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.036649\tval-merror:0.145833\n",
      "[2]\ttrain-merror:0.024433\tval-merror:0.131944\n",
      "[3]\ttrain-merror:0.015707\tval-merror:0.131944\n",
      "[4]\ttrain-merror:0.015707\tval-merror:0.131944\n",
      "[5]\ttrain-merror:0.017452\tval-merror:0.118056\n",
      "[6]\ttrain-merror:0.013962\tval-merror:0.118056\n",
      "[7]\ttrain-merror:0.012216\tval-merror:0.104167\n",
      "[8]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "[9]\ttrain-merror:0.006981\tval-merror:0.111111\n",
      "[10]\ttrain-merror:0.006981\tval-merror:0.097222\n",
      "[11]\ttrain-merror:0.006981\tval-merror:0.090278\n",
      "[12]\ttrain-merror:0.006981\tval-merror:0.083333\n",
      "[13]\ttrain-merror:0.005236\tval-merror:0.090278\n",
      "[14]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[15]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[17]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[18]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "[19]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[20]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[21]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[22]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[23]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[24]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[25]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[26]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[27]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[28]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "Stopping. Best iteration:\n",
      "[18]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "\n",
      "[2. 2. 2. 3. 2. 2. 3. 2. 1. 1. 1. 2. 2. 1. 1. 1. 1. 3. 3. 2. 2. 2. 1. 2.\n",
      " 1. 2. 2. 1. 1. 2. 3. 3. 2. 2. 2. 2. 2. 1. 2. 2. 2. 1. 2. 1. 1. 3. 3. 3.\n",
      " 1. 1. 2. 1. 2. 2. 2. 2. 1. 3. 3. 2. 3. 2. 2. 1. 3. 3. 3. 3. 1. 2. 2. 2.\n",
      " 1. 1. 1. 1. 2. 3. 1. 3. 2. 3. 3. 3. 2. 3. 1. 2. 3. 2. 2. 3. 2. 2. 1. 1.\n",
      " 2. 1. 1. 2. 3. 2. 2. 2. 1. 2. 2. 3. 2. 3. 2. 3. 3. 3. 2. 3. 1. 2. 3. 3.\n",
      " 2. 1. 1. 3. 3. 1. 2. 2. 1. 3. 1. 2. 1. 3. 2. 3. 1. 1. 2. 1. 2. 2. 3. 3.] [2, 2, 2, 3, 2, 2, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 3, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 3, 3, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 3, 3, 2, 3, 2, 2, 1, 3, 3, 3, 3, 1, 2, 1, 2, 1, 1, 1, 1, 2, 3, 2, 3, 2, 3, 3, 3, 2, 3, 1, 2, 3, 2, 2, 3, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 2, 2, 1, 2, 2, 3, 2, 3, 2, 3, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1, 1, 3, 3, 1, 2, 2, 1, 3, 1, 2, 1, 3, 2, 3, 1, 1, 2, 1, 2, 2, 3, 3] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.059337\tval-merror:0.166667\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.04712\tval-merror:0.152778\n",
      "[2]\ttrain-merror:0.033159\tval-merror:0.152778\n",
      "[3]\ttrain-merror:0.024433\tval-merror:0.152778\n",
      "[4]\ttrain-merror:0.019197\tval-merror:0.138889\n",
      "[5]\ttrain-merror:0.019197\tval-merror:0.138889\n",
      "[6]\ttrain-merror:0.019197\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.020942\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.017452\tval-merror:0.131944\n",
      "[9]\ttrain-merror:0.013962\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[11]\ttrain-merror:0.012216\tval-merror:0.131944\n",
      "[12]\ttrain-merror:0.006981\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.005236\tval-merror:0.125\n",
      "[14]\ttrain-merror:0.005236\tval-merror:0.118056\n",
      "[15]\ttrain-merror:0.00349\tval-merror:0.118056\n",
      "[16]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[17]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[18]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[19]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[20]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[21]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[22]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[23]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[24]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[25]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[26]\ttrain-merror:0\tval-merror:0.104167\n",
      "[27]\ttrain-merror:0\tval-merror:0.104167\n",
      "[28]\ttrain-merror:0\tval-merror:0.104167\n",
      "[29]\ttrain-merror:0\tval-merror:0.104167\n",
      "[30]\ttrain-merror:0\tval-merror:0.104167\n",
      "[31]\ttrain-merror:0\tval-merror:0.104167\n",
      "Stopping. Best iteration:\n",
      "[21]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "\n",
      "[3. 1. 2. 2. 3. 1. 3. 1. 3. 2. 1. 2. 1. 1. 3. 2. 2. 1. 3. 2. 2. 2. 3. 3.\n",
      " 2. 3. 3. 3. 2. 1. 3. 3. 1. 3. 2. 2. 2. 2. 3. 2. 3. 1. 2. 3. 3. 2. 2. 2.\n",
      " 2. 2. 3. 1. 3. 2. 1. 3. 3. 1. 1. 1. 1. 1. 1. 2. 1. 3. 2. 2. 1. 3. 1. 3.\n",
      " 3. 2. 2. 2. 3. 3. 3. 1. 3. 2. 1. 1. 3. 1. 2. 2. 2. 2. 3. 3. 3. 1. 2. 2.\n",
      " 3. 1. 3. 2. 1. 3. 1. 2. 3. 2. 3. 2. 1. 1. 2. 1. 2. 2. 2. 2. 2. 3. 1. 2.\n",
      " 1. 2. 2. 1. 3. 2. 1. 3. 2. 3. 3. 2. 2. 3. 1. 1. 1. 2. 1. 3. 3. 1. 2. 2.] [3, 1, 3, 2, 3, 1, 3, 1, 3, 2, 1, 2, 1, 1, 2, 2, 2, 1, 3, 2, 2, 2, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 1, 3, 2, 1, 1, 2, 3, 2, 3, 1, 2, 3, 3, 2, 2, 2, 2, 1, 3, 1, 3, 2, 1, 3, 3, 1, 1, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 3, 1, 3, 3, 2, 2, 2, 3, 3, 3, 1, 3, 2, 1, 1, 3, 1, 2, 1, 2, 2, 3, 3, 3, 1, 1, 2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 2, 3, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 1, 2, 2, 2, 2, 1, 3, 2, 1, 3, 1, 3, 3, 1, 2, 3, 1, 1, 1, 2, 1, 3, 3, 2, 2, 2] 0.8888888888888888\n",
      "[0]\ttrain-merror:0.085515\tval-merror:0.180556\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.057592\tval-merror:0.111111\n",
      "[2]\ttrain-merror:0.04363\tval-merror:0.118056\n",
      "[3]\ttrain-merror:0.024433\tval-merror:0.111111\n",
      "[4]\ttrain-merror:0.019197\tval-merror:0.090278\n",
      "[5]\ttrain-merror:0.013962\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.010471\tval-merror:0.104167\n",
      "[7]\ttrain-merror:0.008726\tval-merror:0.069444\n",
      "[8]\ttrain-merror:0.005236\tval-merror:0.069444\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.0625\n",
      "[10]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[11]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "[12]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[13]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "[14]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "[17]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[18]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[19]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "Stopping. Best iteration:\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.0625\n",
      "\n",
      "[2. 2. 2. 2. 2. 1. 3. 3. 2. 2. 2. 2. 3. 2. 1. 3. 1. 3. 2. 2. 1. 2. 3. 1.\n",
      " 2. 3. 1. 1. 3. 2. 2. 1. 2. 3. 2. 2. 2. 1. 1. 1. 2. 1. 2. 2. 1. 3. 1. 2.\n",
      " 3. 2. 2. 1. 2. 1. 1. 3. 3. 3. 1. 3. 3. 3. 1. 2. 3. 3. 3. 2. 2. 3. 2. 3.\n",
      " 1. 1. 1. 3. 2. 3. 3. 2. 2. 3. 3. 3. 3. 3. 3. 3. 1. 2. 3. 3. 1. 1. 1. 2.\n",
      " 3. 1. 1. 3. 1. 2. 1. 3. 1. 3. 3. 2. 3. 3. 2. 3. 2. 3. 3. 2. 1. 2. 2. 3.\n",
      " 2. 2. 1. 3. 1. 1. 2. 1. 3. 3. 2. 1. 3. 2. 3. 3. 1. 2. 1. 2. 1. 1. 3. 1.] [2, 2, 2, 2, 2, 1, 3, 3, 2, 2, 2, 2, 3, 2, 1, 3, 1, 3, 2, 2, 1, 2, 3, 1, 2, 3, 1, 1, 3, 2, 2, 1, 2, 3, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 3, 2, 2, 3, 2, 1, 1, 2, 1, 1, 3, 3, 3, 1, 3, 3, 3, 1, 2, 3, 3, 3, 2, 2, 2, 2, 3, 1, 2, 1, 2, 2, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 3, 1, 2, 3, 3, 1, 1, 1, 2, 3, 1, 1, 3, 1, 1, 1, 3, 1, 3, 3, 2, 3, 3, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 1, 3, 1, 1, 2, 1, 3, 3, 2, 1, 3, 1, 3, 3, 1, 2, 1, 2, 2, 1, 3, 1] 0.9305555555555556\n",
      "[0]\ttrain-merror:0.073298\tval-merror:0.215278\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.04014\tval-merror:0.145833\n",
      "[2]\ttrain-merror:0.026178\tval-merror:0.131944\n",
      "[3]\ttrain-merror:0.024433\tval-merror:0.131944\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.104167\n",
      "[5]\ttrain-merror:0.013962\tval-merror:0.104167\n",
      "[6]\ttrain-merror:0.013962\tval-merror:0.104167\n",
      "[7]\ttrain-merror:0.006981\tval-merror:0.118056\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.118056\n",
      "[9]\ttrain-merror:0.008726\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.006981\tval-merror:0.118056\n",
      "[11]\ttrain-merror:0.006981\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.005236\tval-merror:0.118056\n",
      "[13]\ttrain-merror:0.00349\tval-merror:0.118056\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.104167\n",
      "\n",
      "[3. 2. 1. 2. 3. 2. 3. 3. 1. 1. 3. 2. 1. 3. 2. 1. 2. 1. 2. 2. 1. 2. 3. 1.\n",
      " 2. 2. 3. 3. 2. 3. 1. 2. 1. 3. 3. 3. 2. 3. 2. 1. 3. 1. 3. 1. 1. 3. 3. 1.\n",
      " 2. 2. 2. 3. 1. 1. 3. 2. 2. 2. 1. 3. 2. 3. 1. 1. 2. 2. 2. 2. 2. 3. 2. 1.\n",
      " 2. 3. 2. 3. 2. 3. 3. 2. 3. 3. 3. 2. 2. 3. 2. 1. 3. 2. 2. 3. 3. 2. 1. 2.\n",
      " 1. 1. 2. 2. 3. 3. 3. 2. 3. 1. 2. 3. 3. 3. 1. 2. 1. 1. 3. 1. 3. 2. 1. 3.\n",
      " 1. 2. 1. 3. 3. 2. 1. 2. 3. 1. 1. 1. 1. 1. 3. 2. 3. 2. 2. 3. 1. 2. 3. 2.] [3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 1, 3, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 2, 3, 1, 2, 1, 3, 3, 3, 2, 3, 2, 1, 3, 1, 3, 1, 2, 3, 3, 1, 1, 2, 2, 3, 1, 1, 3, 1, 1, 1, 1, 3, 3, 3, 1, 1, 2, 3, 2, 2, 2, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 3, 3, 2, 2, 3, 2, 1, 3, 2, 2, 3, 3, 1, 1, 2, 1, 1, 2, 1, 2, 3, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 1, 1, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 1, 3, 2, 3, 2, 2, 3, 1, 1, 3, 2] 0.8680555555555556\n",
      "[0]\ttrain-merror:0.078534\tval-merror:0.173611\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.048866\tval-merror:0.159722\n",
      "[2]\ttrain-merror:0.027923\tval-merror:0.138889\n",
      "[3]\ttrain-merror:0.026178\tval-merror:0.152778\n",
      "[4]\ttrain-merror:0.022688\tval-merror:0.138889\n",
      "[5]\ttrain-merror:0.020942\tval-merror:0.131944\n",
      "[6]\ttrain-merror:0.015707\tval-merror:0.166667\n",
      "[7]\ttrain-merror:0.012216\tval-merror:0.152778\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.145833\n",
      "[9]\ttrain-merror:0.012216\tval-merror:0.152778\n",
      "[10]\ttrain-merror:0.006981\tval-merror:0.131944\n",
      "[11]\ttrain-merror:0.005236\tval-merror:0.138889\n",
      "[12]\ttrain-merror:0.001745\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.00349\tval-merror:0.131944\n",
      "[14]\ttrain-merror:0.00349\tval-merror:0.131944\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.131944\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.131944\n",
      "[17]\ttrain-merror:0\tval-merror:0.125\n",
      "[18]\ttrain-merror:0\tval-merror:0.118056\n",
      "[19]\ttrain-merror:0\tval-merror:0.111111\n",
      "[20]\ttrain-merror:0\tval-merror:0.118056\n",
      "[21]\ttrain-merror:0\tval-merror:0.118056\n",
      "[22]\ttrain-merror:0\tval-merror:0.118056\n",
      "[23]\ttrain-merror:0\tval-merror:0.111111\n",
      "[24]\ttrain-merror:0\tval-merror:0.118056\n",
      "[25]\ttrain-merror:0\tval-merror:0.118056\n",
      "[26]\ttrain-merror:0\tval-merror:0.104167\n",
      "[27]\ttrain-merror:0\tval-merror:0.118056\n",
      "[28]\ttrain-merror:0\tval-merror:0.111111\n",
      "[29]\ttrain-merror:0\tval-merror:0.111111\n",
      "[30]\ttrain-merror:0\tval-merror:0.104167\n",
      "[31]\ttrain-merror:0\tval-merror:0.104167\n",
      "[32]\ttrain-merror:0\tval-merror:0.104167\n",
      "[33]\ttrain-merror:0\tval-merror:0.104167\n",
      "[34]\ttrain-merror:0\tval-merror:0.118056\n",
      "[35]\ttrain-merror:0\tval-merror:0.111111\n",
      "[36]\ttrain-merror:0\tval-merror:0.111111\n",
      "Stopping. Best iteration:\n",
      "[26]\ttrain-merror:0\tval-merror:0.104167\n",
      "\n",
      "[2. 3. 1. 1. 1. 3. 2. 2. 1. 2. 3. 1. 2. 2. 3. 1. 2. 2. 3. 1. 1. 3. 3. 3.\n",
      " 3. 2. 2. 2. 3. 2. 3. 3. 2. 2. 1. 2. 2. 3. 1. 3. 2. 1. 3. 3. 1. 1. 3. 2.\n",
      " 2. 2. 1. 1. 1. 2. 2. 1. 3. 3. 1. 3. 3. 1. 3. 1. 1. 1. 3. 2. 3. 2. 2. 1.\n",
      " 3. 1. 3. 2. 1. 2. 2. 2. 1. 1. 2. 1. 3. 1. 2. 2. 1. 1. 1. 3. 2. 3. 2. 3.\n",
      " 2. 2. 1. 2. 1. 1. 2. 1. 3. 2. 2. 3. 3. 3. 2. 1. 2. 3. 3. 3. 2. 2. 1. 3.\n",
      " 3. 1. 1. 1. 3. 1. 2. 1. 3. 1. 1. 1. 3. 2. 1. 2. 3. 2. 2. 3. 2. 2. 1. 2.] [2, 3, 1, 1, 1, 3, 2, 2, 2, 2, 3, 1, 1, 2, 3, 1, 1, 2, 3, 1, 2, 3, 3, 3, 3, 2, 2, 1, 3, 2, 3, 3, 2, 1, 1, 2, 2, 3, 2, 3, 1, 1, 3, 3, 1, 1, 3, 2, 1, 2, 1, 1, 1, 2, 2, 2, 3, 3, 1, 3, 3, 1, 3, 1, 1, 1, 3, 2, 3, 2, 2, 1, 3, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 1, 3, 1, 2, 2, 1, 1, 1, 3, 1, 3, 1, 3, 2, 2, 1, 2, 1, 1, 2, 1, 3, 2, 1, 3, 3, 3, 2, 1, 2, 3, 3, 3, 2, 2, 1, 1, 3, 2, 1, 1, 3, 1, 2, 1, 3, 1, 1, 1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 2, 1, 2] 0.8819444444444444\n",
      "[0]\ttrain-merror:0.062827\tval-merror:0.138889\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.045375\tval-merror:0.125\n",
      "[2]\ttrain-merror:0.031414\tval-merror:0.131944\n",
      "[3]\ttrain-merror:0.031414\tval-merror:0.125\n",
      "[4]\ttrain-merror:0.027923\tval-merror:0.111111\n",
      "[5]\ttrain-merror:0.022688\tval-merror:0.111111\n",
      "[6]\ttrain-merror:0.019197\tval-merror:0.097222\n",
      "[7]\ttrain-merror:0.017452\tval-merror:0.104167\n",
      "[8]\ttrain-merror:0.017452\tval-merror:0.090278\n",
      "[9]\ttrain-merror:0.017452\tval-merror:0.090278\n",
      "[10]\ttrain-merror:0.013962\tval-merror:0.097222\n",
      "[11]\ttrain-merror:0.012216\tval-merror:0.090278\n",
      "[12]\ttrain-merror:0.010471\tval-merror:0.083333\n",
      "[13]\ttrain-merror:0.008726\tval-merror:0.083333\n",
      "[14]\ttrain-merror:0.006981\tval-merror:0.083333\n",
      "[15]\ttrain-merror:0.00349\tval-merror:0.083333\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[17]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[18]\ttrain-merror:0.00349\tval-merror:0.083333\n",
      "[19]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[20]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[21]\ttrain-merror:0\tval-merror:0.083333\n",
      "[22]\ttrain-merror:0\tval-merror:0.083333\n",
      "Stopping. Best iteration:\n",
      "[12]\ttrain-merror:0.010471\tval-merror:0.083333\n",
      "\n",
      "[3. 3. 2. 2. 2. 1. 3. 2. 1. 1. 2. 3. 1. 2. 3. 2. 2. 3. 1. 2. 3. 3. 2. 1.\n",
      " 1. 3. 2. 1. 2. 1. 3. 3. 1. 1. 1. 3. 3. 3. 3. 1. 3. 2. 1. 2. 1. 3. 1. 3.\n",
      " 2. 1. 2. 2. 1. 2. 2. 1. 1. 1. 1. 2. 1. 2. 1. 2. 3. 1. 1. 1. 3. 2. 1. 3.\n",
      " 1. 2. 1. 1. 2. 1. 2. 3. 1. 3. 1. 3. 1. 1. 3. 2. 3. 3. 2. 2. 3. 1. 1. 3.\n",
      " 1. 2. 2. 3. 3. 2. 2. 1. 1. 1. 3. 2. 2. 2. 2. 3. 2. 1. 2. 1. 3. 1. 2. 1.\n",
      " 3. 3. 1. 2. 1. 2. 3. 1. 3. 2. 2. 1. 1. 3. 3. 1. 3. 1. 3. 3. 2. 1. 3. 2.] [3, 3, 2, 2, 2, 1, 3, 2, 1, 1, 1, 3, 1, 2, 3, 2, 2, 3, 1, 2, 3, 3, 2, 1, 2, 3, 2, 1, 2, 1, 3, 3, 1, 1, 1, 3, 3, 3, 3, 1, 3, 1, 1, 2, 1, 3, 1, 3, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 1, 3, 2, 1, 3, 1, 2, 2, 1, 2, 1, 2, 3, 2, 3, 1, 3, 1, 1, 3, 2, 3, 3, 2, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 2, 2, 1, 1, 1, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 1, 2, 1, 3, 3, 1, 2, 1, 2, 3, 1, 3, 2, 2, 2, 1, 3, 3, 1, 3, 1, 3, 3, 2, 1, 3, 1] 0.9097222222222222\n",
      "[0]\ttrain-merror:0.066318\tval-merror:0.173611\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.052356\tval-merror:0.1875\n",
      "[2]\ttrain-merror:0.041885\tval-merror:0.166667\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.166667\n",
      "[4]\ttrain-merror:0.019197\tval-merror:0.138889\n",
      "[5]\ttrain-merror:0.013962\tval-merror:0.131944\n",
      "[6]\ttrain-merror:0.010471\tval-merror:0.138889\n",
      "[7]\ttrain-merror:0.010471\tval-merror:0.131944\n",
      "[8]\ttrain-merror:0.001745\tval-merror:0.145833\n",
      "[9]\ttrain-merror:0.001745\tval-merror:0.145833\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.138889\n",
      "[11]\ttrain-merror:0\tval-merror:0.138889\n",
      "[12]\ttrain-merror:0\tval-merror:0.125\n",
      "[13]\ttrain-merror:0\tval-merror:0.118056\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "[15]\ttrain-merror:0\tval-merror:0.125\n",
      "[16]\ttrain-merror:0\tval-merror:0.125\n",
      "[17]\ttrain-merror:0\tval-merror:0.125\n",
      "[18]\ttrain-merror:0\tval-merror:0.125\n",
      "[19]\ttrain-merror:0\tval-merror:0.125\n",
      "[20]\ttrain-merror:0\tval-merror:0.131944\n",
      "[21]\ttrain-merror:0\tval-merror:0.125\n",
      "[22]\ttrain-merror:0\tval-merror:0.118056\n",
      "[23]\ttrain-merror:0\tval-merror:0.125\n",
      "Stopping. Best iteration:\n",
      "[13]\ttrain-merror:0\tval-merror:0.118056\n",
      "\n",
      "[2. 2. 2. 3. 3. 3. 1. 1. 2. 2. 3. 2. 3. 3. 1. 3. 2. 2. 3. 1. 3. 1. 1. 1.\n",
      " 3. 2. 3. 3. 3. 3. 1. 2. 3. 1. 2. 3. 3. 2. 2. 3. 1. 2. 2. 1. 2. 1. 2. 1.\n",
      " 3. 1. 3. 2. 1. 1. 2. 1. 1. 2. 1. 1. 1. 1. 3. 1. 2. 1. 3. 1. 2. 3. 3. 1.\n",
      " 2. 3. 2. 1. 3. 3. 1. 2. 2. 3. 1. 3. 2. 2. 1. 2. 2. 1. 3. 3. 2. 1. 2. 1.\n",
      " 1. 1. 2. 2. 2. 3. 3. 2. 1. 3. 1. 2. 1. 2. 1. 3. 2. 3. 1. 1. 3. 3. 1. 2.\n",
      " 2. 3. 2. 1. 2. 2. 2. 3. 2. 3. 1. 2. 3. 3. 2. 2. 2. 1. 3. 3. 1. 3. 2. 3.] [2, 2, 1, 3, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 1, 3, 2, 2, 3, 2, 3, 1, 1, 1, 3, 2, 3, 3, 3, 3, 1, 2, 3, 2, 2, 3, 3, 2, 2, 3, 1, 2, 2, 1, 2, 1, 2, 2, 3, 1, 3, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 1, 2, 1, 3, 1, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 1, 1, 2, 3, 1, 3, 2, 2, 1, 1, 1, 1, 3, 3, 2, 1, 2, 1, 1, 1, 2, 2, 2, 3, 3, 2, 1, 1, 1, 2, 2, 2, 1, 3, 2, 3, 1, 1, 3, 3, 1, 1, 2, 3, 2, 1, 1, 2, 2, 3, 2, 3, 1, 2, 3, 3, 2, 2, 2, 1, 2, 3, 1, 3, 1, 3] 0.875\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\ttrain-merror:0.066318\tval-merror:0.1875\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.027923\tval-merror:0.118056\n",
      "[2]\ttrain-merror:0.022688\tval-merror:0.097222\n",
      "[3]\ttrain-merror:0.020942\tval-merror:0.097222\n",
      "[4]\ttrain-merror:0.015707\tval-merror:0.104167\n",
      "[5]\ttrain-merror:0.012216\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.012216\tval-merror:0.097222\n",
      "[7]\ttrain-merror:0.013962\tval-merror:0.118056\n",
      "[8]\ttrain-merror:0.010471\tval-merror:0.118056\n",
      "[9]\ttrain-merror:0.010471\tval-merror:0.104167\n",
      "[10]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[11]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[12]\ttrain-merror:0.005236\tval-merror:0.104167\n",
      "Stopping. Best iteration:\n",
      "[2]\ttrain-merror:0.022688\tval-merror:0.097222\n",
      "\n",
      "[2. 3. 3. 3. 3. 3. 2. 2. 1. 3. 1. 3. 3. 3. 1. 1. 2. 2. 3. 3. 3. 2. 3. 3.\n",
      " 1. 1. 3. 3. 2. 2. 2. 3. 1. 2. 3. 3. 2. 3. 2. 1. 3. 2. 3. 1. 2. 2. 2. 3.\n",
      " 2. 2. 1. 2. 3. 2. 1. 1. 1. 3. 2. 2. 3. 1. 3. 1. 1. 3. 1. 1. 2. 3. 3. 1.\n",
      " 2. 3. 2. 1. 2. 2. 2. 2. 3. 3. 3. 1. 2. 3. 2. 1. 2. 3. 1. 3. 2. 2. 2. 2.\n",
      " 1. 2. 3. 2. 3. 1. 3. 3. 2. 3. 3. 3. 3. 1. 2. 2. 3. 3. 3. 3. 3. 1. 2. 1.\n",
      " 1. 2. 3. 3. 2. 2. 1. 3. 2. 3. 1. 2. 2. 1. 1. 3. 3. 1. 3. 3. 2. 1. 2. 1.] [2, 3, 3, 3, 3, 3, 2, 2, 2, 3, 1, 3, 3, 3, 1, 1, 1, 2, 3, 3, 3, 2, 3, 3, 1, 1, 3, 3, 1, 2, 2, 2, 1, 2, 1, 3, 2, 3, 2, 1, 1, 2, 3, 1, 2, 2, 2, 3, 2, 2, 1, 2, 2, 2, 1, 1, 1, 3, 2, 2, 3, 1, 3, 1, 1, 3, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 2, 1, 3, 3, 3, 1, 1, 1, 2, 1, 2, 3, 1, 3, 2, 2, 2, 2, 1, 1, 3, 2, 3, 1, 3, 3, 1, 3, 3, 3, 3, 1, 1, 2, 3, 2, 3, 3, 3, 1, 2, 1, 1, 2, 3, 3, 2, 2, 1, 3, 2, 3, 1, 2, 1, 1, 1, 3, 3, 1, 3, 3, 2, 2, 2, 1] 0.8819444444444444\n",
      "[0]\ttrain-merror:0.052356\tval-merror:0.138889\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.031414\tval-merror:0.125\n",
      "[2]\ttrain-merror:0.015707\tval-merror:0.104167\n",
      "[3]\ttrain-merror:0.015707\tval-merror:0.111111\n",
      "[4]\ttrain-merror:0.012216\tval-merror:0.118056\n",
      "[5]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[7]\ttrain-merror:0.010471\tval-merror:0.104167\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[9]\ttrain-merror:0.006981\tval-merror:0.097222\n",
      "[10]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[11]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[12]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[13]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[14]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[15]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "Stopping. Best iteration:\n",
      "[5]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "\n",
      "[3. 3. 3. 2. 3. 3. 2. 2. 3. 1. 3. 3. 1. 2. 1. 1. 1. 3. 2. 2. 1. 1. 3. 3.\n",
      " 2. 2. 1. 2. 2. 3. 2. 2. 3. 2. 1. 2. 1. 2. 2. 1. 3. 3. 3. 2. 2. 2. 1. 2.\n",
      " 3. 2. 3. 3. 1. 2. 2. 1. 3. 3. 1. 1. 1. 1. 1. 3. 3. 2. 1. 2. 3. 2. 1. 2.\n",
      " 2. 2. 3. 2. 1. 3. 2. 2. 1. 3. 3. 2. 2. 2. 1. 2. 3. 3. 1. 2. 2. 1. 1. 3.\n",
      " 2. 3. 1. 3. 2. 2. 3. 1. 2. 2. 3. 3. 3. 3. 3. 3. 2. 2. 3. 2. 1. 1. 1. 3.\n",
      " 1. 3. 1. 3. 3. 3. 2. 2. 3. 2. 1. 3. 2. 3. 3. 1. 2. 3. 1. 2. 3. 1. 3. 1.] [3, 3, 2, 2, 3, 3, 2, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 3, 3, 2, 1, 1, 2, 2, 3, 2, 2, 3, 1, 1, 2, 1, 1, 2, 1, 3, 3, 3, 2, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 2, 1, 3, 3, 1, 1, 1, 1, 1, 3, 3, 2, 1, 1, 3, 1, 1, 2, 2, 2, 3, 1, 1, 3, 2, 2, 1, 3, 3, 2, 1, 1, 2, 2, 3, 3, 1, 2, 2, 1, 1, 3, 2, 3, 1, 3, 2, 2, 3, 1, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 3, 1, 2, 2, 3, 2, 1, 3, 2, 3, 3, 1, 2, 3, 1, 1, 3, 2, 3, 1] 0.8819444444444444\n",
      "[0]\ttrain-merror:0.092496\tval-merror:0.284722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.04363\tval-merror:0.25\n",
      "[2]\ttrain-merror:0.038394\tval-merror:0.194444\n",
      "[3]\ttrain-merror:0.031414\tval-merror:0.208333\n",
      "[4]\ttrain-merror:0.019197\tval-merror:0.201389\n",
      "[5]\ttrain-merror:0.020942\tval-merror:0.180556\n",
      "[6]\ttrain-merror:0.015707\tval-merror:0.159722\n",
      "[7]\ttrain-merror:0.012216\tval-merror:0.166667\n",
      "[8]\ttrain-merror:0.010471\tval-merror:0.166667\n",
      "[9]\ttrain-merror:0.006981\tval-merror:0.159722\n",
      "[10]\ttrain-merror:0.006981\tval-merror:0.166667\n",
      "[11]\ttrain-merror:0.008726\tval-merror:0.152778\n",
      "[12]\ttrain-merror:0.005236\tval-merror:0.138889\n",
      "[13]\ttrain-merror:0.006981\tval-merror:0.145833\n",
      "[14]\ttrain-merror:0.005236\tval-merror:0.145833\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.125\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.131944\n",
      "[17]\ttrain-merror:0\tval-merror:0.125\n",
      "[18]\ttrain-merror:0\tval-merror:0.138889\n",
      "[19]\ttrain-merror:0\tval-merror:0.131944\n",
      "[20]\ttrain-merror:0\tval-merror:0.138889\n",
      "[21]\ttrain-merror:0\tval-merror:0.138889\n",
      "[22]\ttrain-merror:0\tval-merror:0.145833\n",
      "[23]\ttrain-merror:0\tval-merror:0.145833\n",
      "[24]\ttrain-merror:0\tval-merror:0.145833\n",
      "[25]\ttrain-merror:0\tval-merror:0.138889\n",
      "Stopping. Best iteration:\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.125\n",
      "\n",
      "[2. 1. 2. 2. 2. 2. 2. 2. 2. 3. 3. 2. 2. 1. 2. 3. 3. 1. 2. 3. 2. 1. 1. 2.\n",
      " 3. 1. 1. 1. 2. 2. 2. 1. 2. 2. 2. 1. 1. 3. 1. 1. 2. 2. 1. 2. 3. 2. 3. 1.\n",
      " 2. 1. 2. 2. 1. 1. 3. 2. 1. 2. 3. 1. 1. 2. 2. 1. 2. 2. 1. 2. 2. 2. 2. 2.\n",
      " 2. 3. 1. 3. 1. 3. 3. 2. 1. 2. 1. 1. 2. 2. 1. 3. 3. 3. 3. 3. 1. 2. 3. 2.\n",
      " 3. 1. 2. 3. 2. 2. 3. 3. 2. 3. 2. 2. 1. 3. 2. 3. 2. 2. 2. 2. 3. 2. 2. 1.\n",
      " 1. 2. 1. 2. 2. 1. 1. 2. 1. 3. 2. 3. 2. 1. 1. 1. 1. 2. 3. 3. 3. 3. 2. 2.] [2, 1, 2, 2, 2, 1, 2, 1, 1, 3, 3, 2, 2, 1, 2, 1, 3, 1, 2, 3, 2, 2, 1, 2, 3, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 3, 1, 1, 2, 2, 1, 2, 3, 1, 3, 1, 2, 2, 2, 2, 1, 1, 3, 2, 1, 2, 3, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 3, 1, 3, 1, 3, 3, 2, 1, 2, 2, 1, 2, 2, 1, 3, 3, 3, 3, 3, 1, 2, 3, 2, 3, 1, 2, 2, 1, 2, 3, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 2, 1, 2, 3, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 3, 2, 3, 2, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 2] 0.8541666666666666\n",
      "[0]\ttrain-merror:0.073298\tval-merror:0.159722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038394\tval-merror:0.118056\n",
      "[2]\ttrain-merror:0.038394\tval-merror:0.111111\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.097222\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.083333\n",
      "[5]\ttrain-merror:0.017452\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.013962\tval-merror:0.097222\n",
      "[7]\ttrain-merror:0.010471\tval-merror:0.090278\n",
      "[8]\ttrain-merror:0.010471\tval-merror:0.069444\n",
      "[9]\ttrain-merror:0.008726\tval-merror:0.0625\n",
      "[10]\ttrain-merror:0.008726\tval-merror:0.055556\n",
      "[11]\ttrain-merror:0.008726\tval-merror:0.055556\n",
      "[12]\ttrain-merror:0.00349\tval-merror:0.055556\n",
      "[13]\ttrain-merror:0.001745\tval-merror:0.048611\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.048611\n",
      "[15]\ttrain-merror:0.00349\tval-merror:0.048611\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.048611\n",
      "[17]\ttrain-merror:0\tval-merror:0.048611\n",
      "[18]\ttrain-merror:0\tval-merror:0.048611\n",
      "[19]\ttrain-merror:0\tval-merror:0.055556\n",
      "[20]\ttrain-merror:0\tval-merror:0.048611\n",
      "[21]\ttrain-merror:0\tval-merror:0.055556\n",
      "[22]\ttrain-merror:0\tval-merror:0.055556\n",
      "[23]\ttrain-merror:0\tval-merror:0.055556\n",
      "Stopping. Best iteration:\n",
      "[13]\ttrain-merror:0.001745\tval-merror:0.048611\n",
      "\n",
      "[3. 1. 3. 1. 2. 2. 3. 2. 2. 3. 1. 3. 3. 2. 3. 3. 2. 1. 3. 1. 3. 3. 2. 3.\n",
      " 3. 2. 1. 2. 3. 1. 3. 2. 1. 2. 2. 3. 3. 1. 2. 2. 1. 2. 2. 3. 1. 3. 1. 2.\n",
      " 2. 2. 3. 3. 1. 3. 3. 3. 3. 2. 1. 3. 3. 3. 2. 2. 3. 2. 3. 1. 3. 2. 2. 1.\n",
      " 3. 3. 1. 3. 2. 1. 3. 3. 1. 2. 1. 1. 3. 3. 3. 1. 1. 1. 2. 2. 2. 3. 3. 2.\n",
      " 3. 1. 3. 3. 2. 2. 2. 3. 1. 3. 3. 1. 2. 3. 3. 2. 1. 1. 2. 2. 1. 2. 1. 3.\n",
      " 2. 1. 1. 1. 2. 2. 2. 2. 1. 3. 2. 3. 3. 2. 1. 1. 3. 2. 1. 2. 3. 3. 3. 2.] [3, 1, 3, 1, 1, 2, 3, 2, 2, 3, 1, 3, 3, 2, 3, 3, 1, 1, 3, 1, 3, 3, 2, 3, 3, 2, 1, 2, 1, 1, 3, 2, 1, 2, 2, 3, 3, 1, 2, 2, 1, 2, 2, 3, 1, 3, 1, 2, 2, 2, 3, 3, 1, 3, 3, 3, 3, 2, 1, 3, 3, 3, 2, 2, 3, 1, 3, 1, 3, 2, 2, 1, 3, 3, 1, 3, 2, 1, 3, 3, 1, 2, 1, 1, 3, 3, 3, 1, 1, 1, 2, 2, 2, 3, 3, 2, 3, 2, 3, 3, 2, 2, 2, 3, 1, 3, 3, 1, 2, 3, 3, 2, 1, 1, 2, 2, 1, 2, 1, 3, 2, 1, 1, 1, 2, 2, 2, 2, 1, 3, 2, 3, 3, 2, 1, 2, 3, 2, 1, 2, 3, 1, 3, 1] 0.9444444444444444\n",
      "[0]\ttrain-merror:0.073298\tval-merror:0.159722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.020942\tval-merror:0.111111\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2]\ttrain-merror:0.024433\tval-merror:0.090278\n",
      "[3]\ttrain-merror:0.019197\tval-merror:0.083333\n",
      "[4]\ttrain-merror:0.013962\tval-merror:0.111111\n",
      "[5]\ttrain-merror:0.012216\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.006981\tval-merror:0.097222\n",
      "[7]\ttrain-merror:0.006981\tval-merror:0.090278\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[9]\ttrain-merror:0.006981\tval-merror:0.104167\n",
      "[10]\ttrain-merror:0.00349\tval-merror:0.097222\n",
      "[11]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[12]\ttrain-merror:0\tval-merror:0.083333\n",
      "[13]\ttrain-merror:0\tval-merror:0.083333\n",
      "Stopping. Best iteration:\n",
      "[3]\ttrain-merror:0.019197\tval-merror:0.083333\n",
      "\n",
      "[2. 2. 2. 1. 1. 1. 2. 3. 2. 3. 3. 1. 3. 2. 2. 3. 1. 1. 2. 2. 3. 3. 1. 2.\n",
      " 3. 2. 1. 2. 3. 3. 2. 3. 3. 1. 3. 1. 1. 3. 3. 1. 1. 1. 3. 1. 3. 1. 1. 2.\n",
      " 1. 3. 1. 3. 1. 1. 2. 2. 2. 2. 3. 1. 3. 2. 3. 3. 3. 3. 3. 1. 3. 2. 3. 2.\n",
      " 1. 1. 1. 3. 3. 3. 2. 3. 2. 3. 3. 1. 2. 3. 3. 3. 1. 3. 2. 3. 2. 2. 2. 2.\n",
      " 3. 3. 2. 3. 2. 2. 1. 1. 1. 2. 1. 1. 1. 2. 2. 1. 2. 1. 1. 1. 1. 3. 1. 1.\n",
      " 1. 2. 3. 3. 2. 1. 3. 2. 2. 3. 2. 2. 3. 2. 3. 3. 2. 2. 3. 3. 2. 2. 3. 1.] [2, 2, 2, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 2, 2, 3, 1, 1, 2, 1, 3, 3, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 1, 3, 1, 1, 3, 3, 1, 1, 1, 3, 1, 3, 1, 1, 2, 1, 3, 1, 3, 2, 1, 2, 2, 1, 2, 3, 1, 3, 1, 3, 3, 3, 3, 3, 1, 3, 2, 3, 2, 1, 1, 1, 3, 3, 3, 2, 3, 1, 3, 3, 1, 2, 3, 3, 2, 1, 3, 2, 3, 2, 2, 2, 1, 3, 3, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 2, 3, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 1] 0.9097222222222222\n",
      "[0]\ttrain-merror:0.062827\tval-merror:0.111111\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.04014\tval-merror:0.118056\n",
      "[2]\ttrain-merror:0.024433\tval-merror:0.090278\n",
      "[3]\ttrain-merror:0.022688\tval-merror:0.097222\n",
      "[4]\ttrain-merror:0.017452\tval-merror:0.090278\n",
      "[5]\ttrain-merror:0.013962\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "[7]\ttrain-merror:0.006981\tval-merror:0.097222\n",
      "[8]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[10]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[11]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[12]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[13]\ttrain-merror:0.005236\tval-merror:0.090278\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[17]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[18]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[19]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[20]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[21]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "\n",
      "[3. 2. 3. 3. 2. 3. 2. 2. 2. 3. 1. 2. 3. 1. 1. 1. 2. 3. 3. 3. 3. 2. 3. 1.\n",
      " 3. 1. 2. 1. 2. 3. 2. 2. 3. 1. 2. 2. 1. 2. 2. 2. 3. 2. 3. 2. 1. 2. 1. 2.\n",
      " 1. 1. 2. 3. 3. 3. 1. 3. 1. 1. 1. 2. 1. 3. 1. 2. 1. 3. 1. 1. 3. 1. 1. 1.\n",
      " 3. 3. 3. 3. 3. 3. 1. 2. 2. 3. 3. 2. 1. 2. 1. 1. 1. 2. 1. 2. 3. 3. 2. 3.\n",
      " 1. 2. 3. 2. 2. 3. 3. 2. 3. 2. 2. 2. 1. 1. 2. 1. 2. 1. 1. 2. 2. 1. 1. 1.\n",
      " 3. 1. 1. 1. 2. 2. 3. 1. 3. 3. 2. 2. 2. 3. 2. 3. 3. 2. 1. 1. 1. 2. 3. 1.] [3, 2, 2, 3, 2, 3, 2, 2, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3, 3, 2, 2, 1, 3, 1, 2, 1, 2, 3, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 2, 3, 3, 3, 1, 3, 2, 1, 1, 2, 2, 3, 1, 2, 1, 3, 1, 1, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 2, 1, 2, 1, 1, 1, 2, 1, 2, 3, 3, 2, 3, 1, 2, 3, 2, 1, 3, 3, 2, 3, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 2, 2, 3, 1, 3, 3, 2, 2, 1, 3, 2, 3, 3, 2, 1, 1, 1, 2, 3, 1] 0.9166666666666666\n",
      "[0]\ttrain-merror:0.075044\tval-merror:0.180556\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.036649\tval-merror:0.166667\n",
      "[2]\ttrain-merror:0.022688\tval-merror:0.159722\n",
      "[3]\ttrain-merror:0.013962\tval-merror:0.145833\n",
      "[4]\ttrain-merror:0.015707\tval-merror:0.145833\n",
      "[5]\ttrain-merror:0.010471\tval-merror:0.111111\n",
      "[6]\ttrain-merror:0.010471\tval-merror:0.111111\n",
      "[7]\ttrain-merror:0.006981\tval-merror:0.111111\n",
      "[8]\ttrain-merror:0.005236\tval-merror:0.104167\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.104167\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[11]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[12]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[13]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "[17]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "[18]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "Stopping. Best iteration:\n",
      "[8]\ttrain-merror:0.005236\tval-merror:0.104167\n",
      "\n",
      "[3. 1. 1. 1. 3. 2. 2. 2. 1. 3. 2. 3. 1. 3. 1. 1. 2. 2. 1. 2. 2. 1. 3. 3.\n",
      " 3. 2. 2. 2. 3. 2. 3. 1. 3. 2. 2. 3. 2. 2. 3. 3. 3. 3. 3. 2. 1. 1. 3. 1.\n",
      " 2. 3. 3. 3. 3. 3. 2. 3. 3. 2. 1. 3. 3. 1. 3. 3. 2. 1. 2. 2. 2. 3. 3. 2.\n",
      " 2. 2. 1. 1. 3. 2. 3. 1. 3. 1. 3. 2. 2. 1. 1. 3. 2. 3. 3. 3. 1. 3. 2. 2.\n",
      " 2. 2. 1. 3. 3. 3. 2. 1. 2. 1. 1. 2. 2. 2. 2. 1. 1. 2. 1. 3. 3. 1. 3. 1.\n",
      " 3. 1. 2. 1. 2. 2. 3. 2. 2. 1. 1. 2. 2. 3. 1. 2. 2. 1. 3. 2. 2. 1. 1. 3.] [3, 1, 1, 1, 3, 2, 2, 2, 1, 1, 2, 3, 1, 3, 1, 1, 2, 2, 1, 2, 2, 1, 3, 3, 3, 1, 1, 3, 3, 2, 3, 1, 3, 2, 2, 1, 2, 2, 3, 3, 3, 3, 3, 2, 1, 1, 3, 1, 2, 3, 3, 3, 3, 3, 2, 3, 3, 1, 1, 3, 3, 1, 3, 3, 2, 2, 1, 2, 2, 3, 3, 2, 2, 2, 1, 2, 3, 2, 3, 1, 3, 1, 3, 2, 2, 1, 1, 3, 2, 3, 3, 3, 1, 3, 2, 2, 2, 2, 1, 3, 3, 3, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 3, 3, 1, 3, 1, 3, 1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 2, 2, 3, 1, 1, 1, 1, 3, 2, 2, 1, 1, 3] 0.8888888888888888\n",
      "[0]\ttrain-merror:0.068063\tval-merror:0.180556\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.041885\tval-merror:0.138889\n",
      "[2]\ttrain-merror:0.026178\tval-merror:0.125\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.111111\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.111111\n",
      "[5]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[6]\ttrain-merror:0.010471\tval-merror:0.111111\n",
      "[7]\ttrain-merror:0.008726\tval-merror:0.111111\n",
      "[8]\ttrain-merror:0.005236\tval-merror:0.104167\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[10]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[11]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[12]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[13]\ttrain-merror:0.005236\tval-merror:0.090278\n",
      "[14]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[17]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[18]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "[19]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[20]\ttrain-merror:0\tval-merror:0.076389\n",
      "[21]\ttrain-merror:0\tval-merror:0.069444\n",
      "[22]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "[23]\ttrain-merror:0\tval-merror:0.069444\n",
      "[24]\ttrain-merror:0\tval-merror:0.076389\n",
      "[25]\ttrain-merror:0\tval-merror:0.076389\n",
      "[26]\ttrain-merror:0\tval-merror:0.069444\n",
      "[27]\ttrain-merror:0\tval-merror:0.069444\n",
      "[28]\ttrain-merror:0\tval-merror:0.076389\n",
      "Stopping. Best iteration:\n",
      "[18]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "\n",
      "[1. 2. 2. 2. 2. 2. 1. 3. 2. 3. 1. 1. 2. 3. 1. 2. 2. 2. 1. 3. 1. 1. 3. 2.\n",
      " 1. 1. 2. 1. 1. 3. 2. 1. 3. 1. 3. 3. 3. 2. 1. 1. 1. 1. 3. 3. 2. 1. 1. 2.\n",
      " 2. 2. 3. 2. 2. 3. 3. 2. 2. 2. 2. 3. 2. 2. 2. 1. 3. 2. 3. 2. 1. 1. 2. 2.\n",
      " 1. 1. 3. 1. 3. 1. 3. 2. 1. 2. 1. 3. 1. 3. 1. 2. 1. 1. 2. 3. 2. 2. 3. 3.\n",
      " 3. 2. 2. 3. 3. 3. 1. 3. 3. 2. 2. 1. 3. 2. 2. 3. 2. 1. 3. 3. 3. 2. 3. 3.\n",
      " 3. 3. 2. 1. 1. 2. 2. 2. 1. 1. 3. 3. 3. 1. 1. 3. 3. 2. 1. 3. 3. 1. 2. 2.] [1, 2, 2, 2, 2, 2, 1, 3, 2, 3, 1, 1, 2, 3, 1, 2, 1, 2, 1, 3, 1, 1, 3, 2, 2, 2, 2, 2, 1, 3, 2, 1, 3, 1, 3, 3, 3, 2, 1, 1, 1, 2, 3, 3, 2, 1, 1, 2, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 2, 1, 3, 2, 3, 2, 1, 1, 2, 2, 1, 1, 3, 1, 3, 1, 3, 2, 1, 3, 1, 3, 1, 3, 1, 2, 1, 1, 2, 3, 2, 2, 3, 3, 3, 2, 1, 3, 3, 3, 1, 3, 3, 2, 2, 1, 3, 2, 2, 3, 2, 1, 3, 3, 3, 2, 3, 3, 3, 3, 2, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 1, 1, 3, 3, 2, 1, 3, 3, 2, 1, 2] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.08726\tval-merror:0.159722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1]\ttrain-merror:0.04014\tval-merror:0.125\n",
      "[2]\ttrain-merror:0.029668\tval-merror:0.118056\n",
      "[3]\ttrain-merror:0.024433\tval-merror:0.125\n",
      "[4]\ttrain-merror:0.017452\tval-merror:0.138889\n",
      "[5]\ttrain-merror:0.012216\tval-merror:0.145833\n",
      "[6]\ttrain-merror:0.008726\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.00349\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "[9]\ttrain-merror:0.00349\tval-merror:0.118056\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[11]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[12]\ttrain-merror:0.00349\tval-merror:0.097222\n",
      "[13]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[17]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[18]\ttrain-merror:0\tval-merror:0.097222\n",
      "[19]\ttrain-merror:0\tval-merror:0.097222\n",
      "[20]\ttrain-merror:0\tval-merror:0.097222\n",
      "[21]\ttrain-merror:0\tval-merror:0.097222\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "\n",
      "[1. 1. 3. 1. 3. 1. 2. 2. 1. 1. 1. 3. 3. 1. 1. 1. 3. 1. 2. 1. 3. 1. 2. 3.\n",
      " 1. 1. 1. 3. 2. 3. 2. 2. 1. 2. 2. 1. 3. 2. 3. 3. 2. 3. 3. 1. 1. 3. 1. 1.\n",
      " 2. 2. 3. 1. 2. 1. 1. 2. 3. 1. 2. 2. 3. 1. 2. 1. 1. 1. 3. 1. 2. 3. 2. 2.\n",
      " 1. 2. 2. 2. 1. 1. 1. 2. 1. 3. 3. 2. 2. 3. 3. 1. 1. 1. 3. 3. 1. 2. 3. 1.\n",
      " 3. 2. 3. 2. 3. 2. 2. 3. 3. 2. 2. 2. 1. 1. 1. 2. 3. 3. 3. 2. 2. 1. 1. 3.\n",
      " 2. 1. 1. 1. 1. 1. 2. 2. 3. 2. 1. 3. 2. 2. 2. 2. 1. 1. 2. 3. 1. 1. 2. 1.] [1, 1, 3, 1, 3, 2, 2, 2, 1, 1, 1, 3, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 3, 1, 1, 1, 3, 2, 3, 2, 1, 1, 2, 2, 1, 3, 2, 3, 3, 2, 3, 3, 1, 1, 3, 1, 1, 2, 1, 3, 1, 2, 1, 1, 2, 3, 2, 2, 2, 3, 1, 2, 1, 1, 1, 3, 1, 2, 3, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 3, 2, 1, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 2, 3, 3, 3, 2, 2, 1, 1, 3, 2, 1, 1, 1, 1, 1, 2, 2, 3, 2, 1, 3, 1, 2, 1, 2, 1, 1, 2, 3, 1, 2, 2, 1] 0.9027777777777778\n",
      "[0]\ttrain-merror:0.085515\tval-merror:0.090278\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.034904\tval-merror:0.118056\n",
      "[2]\ttrain-merror:0.026178\tval-merror:0.104167\n",
      "[3]\ttrain-merror:0.017452\tval-merror:0.083333\n",
      "[4]\ttrain-merror:0.013962\tval-merror:0.076389\n",
      "[5]\ttrain-merror:0.010471\tval-merror:0.069444\n",
      "[6]\ttrain-merror:0.012216\tval-merror:0.069444\n",
      "[7]\ttrain-merror:0.008726\tval-merror:0.069444\n",
      "[8]\ttrain-merror:0.006981\tval-merror:0.076389\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[10]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[11]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[12]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[13]\ttrain-merror:0.00349\tval-merror:0.083333\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "Stopping. Best iteration:\n",
      "[5]\ttrain-merror:0.010471\tval-merror:0.069444\n",
      "\n",
      "[2. 1. 1. 2. 3. 2. 3. 3. 3. 2. 2. 2. 1. 2. 1. 1. 2. 2. 2. 3. 2. 3. 3. 2.\n",
      " 1. 2. 1. 3. 1. 1. 2. 3. 3. 1. 3. 2. 3. 3. 2. 2. 3. 2. 1. 3. 3. 1. 3. 2.\n",
      " 1. 2. 2. 3. 3. 3. 1. 3. 2. 2. 1. 3. 1. 1. 1. 2. 3. 1. 3. 3. 3. 2. 1. 3.\n",
      " 3. 2. 1. 1. 3. 3. 3. 3. 3. 1. 2. 2. 3. 3. 3. 1. 3. 2. 3. 2. 1. 1. 2. 3.\n",
      " 2. 3. 2. 2. 1. 3. 1. 3. 3. 2. 2. 3. 3. 2. 1. 1. 2. 1. 3. 3. 3. 1. 1. 2.\n",
      " 2. 1. 1. 2. 3. 1. 2. 1. 3. 1. 3. 2. 3. 3. 2. 2. 3. 3. 3. 1. 3. 2. 3. 3.] [2, 1, 1, 2, 3, 2, 3, 3, 3, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 2, 1, 2, 2, 3, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 1, 3, 3, 2, 3, 2, 1, 3, 2, 3, 3, 3, 1, 3, 2, 2, 1, 3, 1, 1, 1, 1, 3, 1, 3, 3, 3, 2, 1, 3, 3, 2, 1, 1, 2, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 1, 3, 2, 3, 2, 1, 1, 1, 3, 2, 3, 2, 2, 1, 3, 1, 3, 3, 2, 2, 3, 3, 2, 1, 1, 2, 1, 3, 3, 3, 1, 2, 2, 2, 1, 1, 2, 3, 1, 2, 1, 3, 1, 3, 1, 3, 3, 2, 2, 3, 3, 3, 1, 3, 1, 3, 3] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.059337\tval-merror:0.138889\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.036649\tval-merror:0.118056\n",
      "[2]\ttrain-merror:0.026178\tval-merror:0.097222\n",
      "[3]\ttrain-merror:0.026178\tval-merror:0.090278\n",
      "[4]\ttrain-merror:0.017452\tval-merror:0.104167\n",
      "[5]\ttrain-merror:0.015707\tval-merror:0.104167\n",
      "[6]\ttrain-merror:0.012216\tval-merror:0.104167\n",
      "[7]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[8]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[9]\ttrain-merror:0.00349\tval-merror:0.083333\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[11]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[12]\ttrain-merror:0\tval-merror:0.076389\n",
      "[13]\ttrain-merror:0\tval-merror:0.0625\n",
      "[14]\ttrain-merror:0\tval-merror:0.076389\n",
      "[15]\ttrain-merror:0\tval-merror:0.083333\n",
      "[16]\ttrain-merror:0\tval-merror:0.076389\n",
      "[17]\ttrain-merror:0\tval-merror:0.0625\n",
      "[18]\ttrain-merror:0\tval-merror:0.069444\n",
      "[19]\ttrain-merror:0\tval-merror:0.076389\n",
      "[20]\ttrain-merror:0\tval-merror:0.076389\n",
      "[21]\ttrain-merror:0\tval-merror:0.083333\n",
      "[22]\ttrain-merror:0\tval-merror:0.083333\n",
      "[23]\ttrain-merror:0\tval-merror:0.083333\n",
      "Stopping. Best iteration:\n",
      "[13]\ttrain-merror:0\tval-merror:0.0625\n",
      "\n",
      "[2. 3. 2. 2. 3. 1. 3. 2. 2. 2. 3. 2. 1. 3. 1. 3. 1. 2. 2. 3. 2. 1. 1. 1.\n",
      " 3. 1. 2. 2. 2. 3. 3. 2. 2. 3. 2. 3. 3. 3. 1. 3. 2. 2. 2. 3. 3. 1. 3. 2.\n",
      " 1. 2. 1. 2. 3. 2. 2. 3. 3. 1. 3. 3. 3. 1. 2. 1. 2. 3. 2. 1. 2. 3. 1. 3.\n",
      " 1. 3. 3. 3. 3. 1. 2. 1. 1. 1. 3. 1. 1. 1. 2. 2. 3. 1. 2. 2. 3. 1. 3. 1.\n",
      " 1. 2. 2. 3. 2. 1. 1. 1. 2. 3. 3. 2. 2. 3. 2. 2. 3. 1. 1. 1. 2. 2. 1. 2.\n",
      " 1. 3. 2. 3. 2. 3. 2. 1. 2. 1. 2. 3. 1. 3. 1. 2. 3. 3. 3. 3. 2. 2. 2. 2.] [2, 3, 2, 2, 3, 1, 3, 2, 2, 2, 3, 2, 1, 3, 1, 3, 1, 2, 2, 3, 2, 1, 1, 1, 3, 1, 2, 1, 1, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 3, 1, 2, 2, 3, 3, 1, 3, 2, 1, 2, 1, 2, 3, 2, 2, 3, 3, 1, 3, 3, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 1, 3, 1, 3, 3, 3, 3, 1, 1, 1, 2, 1, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 1, 3, 1, 1, 2, 2, 3, 1, 1, 1, 1, 2, 3, 3, 2, 2, 3, 2, 2, 3, 1, 1, 1, 2, 2, 1, 2, 1, 3, 2, 3, 2, 3, 2, 1, 2, 1, 2, 3, 1, 3, 1, 2, 3, 3, 3, 3, 2, 2, 2, 2] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.068063\tval-merror:0.152778\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.038394\tval-merror:0.125\n",
      "[2]\ttrain-merror:0.031414\tval-merror:0.097222\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.090278\n",
      "[4]\ttrain-merror:0.027923\tval-merror:0.097222\n",
      "[5]\ttrain-merror:0.022688\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.017452\tval-merror:0.083333\n",
      "[7]\ttrain-merror:0.013962\tval-merror:0.083333\n",
      "[8]\ttrain-merror:0.012216\tval-merror:0.069444\n",
      "[9]\ttrain-merror:0.010471\tval-merror:0.0625\n",
      "[10]\ttrain-merror:0.006981\tval-merror:0.0625\n",
      "[11]\ttrain-merror:0.001745\tval-merror:0.0625\n",
      "[12]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "[13]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "[14]\ttrain-merror:0\tval-merror:0.0625\n",
      "[15]\ttrain-merror:0\tval-merror:0.069444\n",
      "[16]\ttrain-merror:0\tval-merror:0.069444\n",
      "[17]\ttrain-merror:0\tval-merror:0.069444\n",
      "[18]\ttrain-merror:0\tval-merror:0.069444\n",
      "[19]\ttrain-merror:0\tval-merror:0.069444\n",
      "Stopping. Best iteration:\n",
      "[9]\ttrain-merror:0.010471\tval-merror:0.0625\n",
      "\n",
      "[1. 1. 1. 3. 3. 3. 1. 3. 2. 2. 1. 2. 3. 3. 1. 1. 3. 3. 1. 3. 2. 2. 1. 2.\n",
      " 1. 2. 1. 2. 1. 3. 1. 3. 1. 3. 1. 2. 1. 3. 1. 3. 1. 2. 3. 2. 3. 1. 1. 1.\n",
      " 1. 1. 3. 3. 3. 1. 3. 1. 2. 1. 2. 2. 3. 2. 3. 1. 1. 1. 3. 3. 1. 1. 3. 3.\n",
      " 2. 2. 2. 2. 2. 2. 2. 3. 3. 3. 2. 3. 1. 3. 3. 3. 1. 2. 1. 3. 2. 1. 1. 2.\n",
      " 3. 2. 3. 3. 3. 2. 3. 1. 1. 1. 2. 3. 2. 1. 2. 1. 1. 3. 3. 3. 1. 1. 3. 2.\n",
      " 2. 1. 3. 1. 3. 2. 3. 2. 2. 3. 3. 2. 2. 1. 1. 3. 2. 2. 2. 3. 1. 3. 2. 3.] [1, 1, 1, 3, 3, 3, 1, 3, 2, 2, 1, 1, 3, 3, 1, 1, 3, 3, 2, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 2, 1, 3, 2, 3, 1, 1, 3, 2, 3, 1, 1, 2, 1, 1, 3, 3, 3, 1, 3, 1, 2, 1, 2, 2, 3, 2, 3, 1, 1, 1, 3, 3, 1, 1, 3, 3, 2, 1, 2, 2, 2, 2, 2, 3, 3, 3, 2, 3, 1, 3, 3, 3, 1, 2, 1, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3, 1, 1, 1, 2, 3, 2, 1, 2, 1, 1, 3, 3, 3, 1, 1, 3, 2, 1, 1, 3, 1, 3, 2, 3, 2, 2, 3, 3, 2, 2, 2, 1, 3, 2, 1, 2, 3, 1, 3, 2, 3] 0.9305555555555556\n",
      "[0]\ttrain-merror:0.066318\tval-merror:0.173611\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.041885\tval-merror:0.166667\n",
      "[2]\ttrain-merror:0.036649\tval-merror:0.152778\n",
      "[3]\ttrain-merror:0.022688\tval-merror:0.152778\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.145833\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5]\ttrain-merror:0.017452\tval-merror:0.152778\n",
      "[6]\ttrain-merror:0.013962\tval-merror:0.125\n",
      "[7]\ttrain-merror:0.001745\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.001745\tval-merror:0.131944\n",
      "[9]\ttrain-merror:0.001745\tval-merror:0.131944\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.125\n",
      "[11]\ttrain-merror:0.001745\tval-merror:0.131944\n",
      "[12]\ttrain-merror:0\tval-merror:0.131944\n",
      "[13]\ttrain-merror:0\tval-merror:0.125\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "[15]\ttrain-merror:0\tval-merror:0.131944\n",
      "[16]\ttrain-merror:0\tval-merror:0.131944\n",
      "Stopping. Best iteration:\n",
      "[6]\ttrain-merror:0.013962\tval-merror:0.125\n",
      "\n",
      "[1. 3. 3. 2. 2. 2. 1. 3. 1. 2. 2. 2. 3. 3. 2. 2. 2. 3. 3. 3. 3. 1. 3. 1.\n",
      " 2. 1. 1. 1. 2. 3. 1. 2. 2. 1. 3. 3. 1. 3. 1. 3. 1. 2. 3. 3. 2. 2. 1. 2.\n",
      " 1. 2. 1. 2. 3. 3. 1. 1. 1. 3. 1. 3. 2. 2. 2. 3. 2. 2. 1. 2. 2. 2. 2. 2.\n",
      " 1. 1. 3. 3. 2. 1. 1. 1. 1. 2. 1. 3. 2. 1. 2. 3. 2. 3. 3. 3. 3. 3. 1. 2.\n",
      " 3. 1. 2. 3. 1. 3. 2. 3. 1. 3. 3. 3. 1. 3. 3. 1. 1. 2. 3. 2. 1. 3. 1. 1.\n",
      " 2. 3. 2. 1. 3. 2. 3. 1. 3. 3. 1. 1. 3. 3. 2. 2. 2. 1. 1. 1. 3. 1. 1. 3.] [1, 3, 3, 2, 2, 1, 1, 3, 1, 2, 2, 1, 3, 3, 2, 1, 2, 3, 3, 3, 2, 1, 3, 2, 3, 1, 1, 1, 2, 3, 1, 2, 2, 1, 3, 3, 1, 3, 2, 3, 2, 2, 3, 3, 2, 2, 1, 2, 1, 2, 1, 2, 3, 3, 1, 1, 1, 1, 1, 3, 1, 1, 2, 3, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 3, 3, 2, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 3, 2, 3, 3, 3, 3, 3, 1, 2, 3, 1, 2, 2, 2, 3, 2, 3, 1, 3, 3, 3, 1, 3, 3, 2, 1, 2, 3, 1, 1, 3, 1, 1, 2, 3, 2, 1, 3, 3, 3, 1, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 1, 1, 3, 1, 2, 3] 0.8472222222222222\n",
      "[0]\ttrain-merror:0.071553\tval-merror:0.152778\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.036649\tval-merror:0.118056\n",
      "[2]\ttrain-merror:0.031414\tval-merror:0.131944\n",
      "[3]\ttrain-merror:0.024433\tval-merror:0.111111\n",
      "[4]\ttrain-merror:0.013962\tval-merror:0.104167\n",
      "[5]\ttrain-merror:0.010471\tval-merror:0.111111\n",
      "[6]\ttrain-merror:0.010471\tval-merror:0.104167\n",
      "[7]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[8]\ttrain-merror:0.006981\tval-merror:0.097222\n",
      "[9]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[10]\ttrain-merror:0.00349\tval-merror:0.083333\n",
      "[11]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[12]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[13]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[16]\ttrain-merror:0\tval-merror:0.083333\n",
      "[17]\ttrain-merror:0\tval-merror:0.076389\n",
      "[18]\ttrain-merror:0\tval-merror:0.083333\n",
      "[19]\ttrain-merror:0\tval-merror:0.083333\n",
      "[20]\ttrain-merror:0\tval-merror:0.076389\n",
      "[21]\ttrain-merror:0\tval-merror:0.083333\n",
      "Stopping. Best iteration:\n",
      "[11]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "\n",
      "[1. 2. 3. 2. 1. 1. 2. 3. 3. 1. 2. 3. 2. 1. 1. 2. 3. 1. 3. 3. 3. 3. 1. 3.\n",
      " 2. 2. 3. 2. 3. 2. 1. 1. 1. 1. 2. 3. 1. 3. 1. 2. 1. 1. 3. 1. 2. 2. 1. 3.\n",
      " 1. 3. 2. 3. 1. 1. 3. 2. 3. 3. 3. 1. 2. 3. 1. 1. 1. 3. 3. 3. 1. 2. 2. 1.\n",
      " 2. 2. 1. 3. 2. 2. 1. 2. 1. 2. 2. 3. 2. 1. 1. 3. 1. 1. 1. 1. 3. 1. 1. 2.\n",
      " 2. 3. 3. 1. 1. 1. 1. 2. 1. 1. 2. 3. 2. 3. 1. 3. 3. 1. 1. 2. 2. 3. 3. 3.\n",
      " 2. 3. 2. 2. 2. 3. 2. 2. 3. 2. 2. 2. 2. 1. 2. 3. 3. 3. 3. 3. 3. 3. 2. 3.] [1, 2, 3, 1, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 1, 3, 3, 3, 3, 1, 3, 2, 1, 3, 2, 3, 2, 1, 1, 1, 1, 2, 3, 1, 3, 1, 2, 1, 1, 3, 2, 2, 2, 2, 3, 1, 3, 2, 3, 1, 1, 3, 2, 3, 3, 3, 1, 2, 3, 1, 1, 1, 3, 3, 3, 1, 2, 1, 1, 2, 2, 2, 3, 2, 2, 1, 2, 1, 2, 2, 3, 2, 1, 2, 3, 1, 1, 1, 1, 3, 1, 1, 2, 2, 3, 3, 2, 1, 1, 1, 2, 1, 1, 2, 3, 1, 3, 1, 3, 3, 1, 1, 2, 2, 3, 3, 3, 1, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 1, 2, 3, 3, 3, 3, 1, 3, 3, 2, 3] 0.9166666666666666\n",
      "[0]\ttrain-merror:0.073298\tval-merror:0.208333\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.041885\tval-merror:0.159722\n",
      "[2]\ttrain-merror:0.029668\tval-merror:0.138889\n",
      "[3]\ttrain-merror:0.017452\tval-merror:0.159722\n",
      "[4]\ttrain-merror:0.017452\tval-merror:0.131944\n",
      "[5]\ttrain-merror:0.008726\tval-merror:0.138889\n",
      "[6]\ttrain-merror:0.006981\tval-merror:0.131944\n",
      "[7]\ttrain-merror:0.005236\tval-merror:0.138889\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.131944\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.131944\n",
      "[10]\ttrain-merror:0.005236\tval-merror:0.131944\n",
      "[11]\ttrain-merror:0.005236\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.001745\tval-merror:0.131944\n",
      "[13]\ttrain-merror:0\tval-merror:0.131944\n",
      "[14]\ttrain-merror:0\tval-merror:0.131944\n",
      "[15]\ttrain-merror:0\tval-merror:0.111111\n",
      "[16]\ttrain-merror:0\tval-merror:0.111111\n",
      "[17]\ttrain-merror:0\tval-merror:0.097222\n",
      "[18]\ttrain-merror:0\tval-merror:0.104167\n",
      "[19]\ttrain-merror:0\tval-merror:0.111111\n",
      "[20]\ttrain-merror:0\tval-merror:0.097222\n",
      "[21]\ttrain-merror:0\tval-merror:0.090278\n",
      "[22]\ttrain-merror:0\tval-merror:0.097222\n",
      "[23]\ttrain-merror:0\tval-merror:0.097222\n",
      "[24]\ttrain-merror:0\tval-merror:0.097222\n",
      "[25]\ttrain-merror:0\tval-merror:0.097222\n",
      "[26]\ttrain-merror:0\tval-merror:0.097222\n",
      "[27]\ttrain-merror:0\tval-merror:0.097222\n",
      "[28]\ttrain-merror:0\tval-merror:0.097222\n",
      "[29]\ttrain-merror:0\tval-merror:0.097222\n",
      "[30]\ttrain-merror:0\tval-merror:0.090278\n",
      "[31]\ttrain-merror:0\tval-merror:0.090278\n",
      "Stopping. Best iteration:\n",
      "[21]\ttrain-merror:0\tval-merror:0.090278\n",
      "\n",
      "[1. 1. 3. 3. 1. 3. 3. 2. 3. 2. 1. 3. 2. 3. 2. 2. 3. 2. 1. 3. 3. 2. 1. 3.\n",
      " 2. 2. 1. 2. 3. 2. 1. 2. 2. 1. 1. 2. 3. 3. 2. 2. 3. 3. 2. 3. 2. 3. 3. 2.\n",
      " 3. 3. 3. 1. 3. 1. 3. 1. 3. 2. 3. 3. 3. 2. 3. 2. 2. 3. 1. 2. 1. 2. 1. 2.\n",
      " 2. 2. 2. 1. 1. 3. 2. 2. 3. 3. 1. 1. 1. 2. 3. 2. 3. 3. 2. 2. 3. 3. 3. 3.\n",
      " 2. 1. 1. 1. 1. 2. 2. 2. 3. 3. 1. 3. 2. 1. 3. 2. 3. 3. 1. 3. 1. 2. 2. 3.\n",
      " 1. 1. 2. 2. 3. 3. 2. 3. 3. 3. 3. 2. 3. 3. 2. 1. 3. 1. 2. 2. 2. 3. 3. 3.] [1, 1, 3, 3, 1, 3, 3, 2, 3, 2, 1, 3, 2, 3, 2, 2, 3, 2, 1, 3, 3, 2, 2, 3, 2, 2, 1, 1, 3, 2, 1, 2, 2, 2, 1, 2, 3, 3, 2, 2, 3, 3, 2, 3, 1, 3, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 2, 3, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 3, 2, 2, 3, 3, 2, 2, 1, 2, 3, 2, 3, 3, 2, 2, 3, 3, 3, 3, 1, 1, 1, 2, 1, 2, 2, 2, 3, 3, 1, 3, 2, 1, 3, 2, 3, 3, 1, 3, 1, 2, 2, 3, 1, 1, 1, 1, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 2, 3, 1, 2, 2, 2, 3, 3, 3] 0.9027777777777778\n",
      "[0]\ttrain-merror:0.080279\tval-merror:0.173611\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.036649\tval-merror:0.125\n",
      "[2]\ttrain-merror:0.027923\tval-merror:0.097222\n",
      "[3]\ttrain-merror:0.017452\tval-merror:0.097222\n",
      "[4]\ttrain-merror:0.012216\tval-merror:0.111111\n",
      "[5]\ttrain-merror:0.012216\tval-merror:0.090278\n",
      "[6]\ttrain-merror:0.006981\tval-merror:0.083333\n",
      "[7]\ttrain-merror:0.008726\tval-merror:0.090278\n",
      "[8]\ttrain-merror:0.008726\tval-merror:0.090278\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.097222\n",
      "[10]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[11]\ttrain-merror:0.00349\tval-merror:0.083333\n",
      "[12]\ttrain-merror:0.00349\tval-merror:0.090278\n",
      "[13]\ttrain-merror:0.00349\tval-merror:0.083333\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.083333\n",
      "[16]\ttrain-merror:0\tval-merror:0.076389\n",
      "[17]\ttrain-merror:0\tval-merror:0.076389\n",
      "[18]\ttrain-merror:0\tval-merror:0.069444\n",
      "[19]\ttrain-merror:0\tval-merror:0.069444\n",
      "[20]\ttrain-merror:0\tval-merror:0.069444\n",
      "[21]\ttrain-merror:0\tval-merror:0.069444\n",
      "[22]\ttrain-merror:0\tval-merror:0.069444\n",
      "[23]\ttrain-merror:0\tval-merror:0.069444\n",
      "[24]\ttrain-merror:0\tval-merror:0.069444\n",
      "[25]\ttrain-merror:0\tval-merror:0.069444\n",
      "[26]\ttrain-merror:0\tval-merror:0.069444\n",
      "[27]\ttrain-merror:0\tval-merror:0.069444\n",
      "[28]\ttrain-merror:0\tval-merror:0.069444\n",
      "Stopping. Best iteration:\n",
      "[18]\ttrain-merror:0\tval-merror:0.069444\n",
      "\n",
      "[3. 3. 1. 3. 3. 2. 3. 3. 2. 3. 2. 1. 3. 1. 1. 3. 3. 2. 3. 2. 2. 2. 2. 3.\n",
      " 3. 3. 3. 2. 3. 1. 2. 2. 1. 2. 2. 2. 1. 2. 3. 2. 2. 3. 3. 2. 1. 2. 3. 1.\n",
      " 3. 3. 2. 2. 2. 3. 1. 3. 3. 3. 2. 2. 2. 3. 3. 1. 3. 2. 2. 2. 1. 2. 1. 2.\n",
      " 2. 3. 3. 2. 2. 3. 1. 2. 1. 1. 2. 2. 2. 3. 1. 3. 1. 2. 3. 1. 3. 3. 2. 1.\n",
      " 3. 3. 3. 3. 2. 3. 1. 2. 1. 3. 2. 3. 3. 2. 1. 2. 2. 1. 3. 3. 2. 2. 1. 3.\n",
      " 3. 1. 3. 1. 2. 3. 1. 3. 1. 2. 3. 3. 3. 1. 3. 2. 2. 1. 1. 2. 3. 1. 2. 2.] [3, 3, 1, 3, 3, 2, 3, 3, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2, 3, 1, 2, 2, 1, 2, 2, 1, 1, 2, 3, 2, 2, 3, 3, 2, 1, 1, 2, 1, 3, 3, 2, 1, 2, 3, 1, 3, 3, 3, 2, 2, 2, 3, 3, 1, 3, 2, 2, 2, 1, 2, 1, 2, 2, 3, 3, 2, 2, 3, 1, 2, 1, 1, 2, 2, 2, 3, 1, 3, 1, 2, 3, 1, 3, 3, 2, 1, 3, 3, 3, 3, 2, 3, 1, 1, 1, 3, 2, 3, 3, 2, 1, 2, 1, 1, 3, 3, 1, 2, 1, 3, 3, 1, 3, 1, 1, 3, 1, 3, 1, 2, 3, 3, 3, 1, 3, 2, 2, 1, 1, 2, 3, 1, 2, 2] 0.9236111111111112\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\ttrain-merror:0.062827\tval-merror:0.159722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.041885\tval-merror:0.111111\n",
      "[2]\ttrain-merror:0.020942\tval-merror:0.104167\n",
      "[3]\ttrain-merror:0.012216\tval-merror:0.090278\n",
      "[4]\ttrain-merror:0.012216\tval-merror:0.090278\n",
      "[5]\ttrain-merror:0.008726\tval-merror:0.083333\n",
      "[6]\ttrain-merror:0.006981\tval-merror:0.083333\n",
      "[7]\ttrain-merror:0.006981\tval-merror:0.076389\n",
      "[8]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.076389\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "[11]\ttrain-merror:0\tval-merror:0.083333\n",
      "[12]\ttrain-merror:0\tval-merror:0.083333\n",
      "[13]\ttrain-merror:0\tval-merror:0.076389\n",
      "[14]\ttrain-merror:0\tval-merror:0.076389\n",
      "[15]\ttrain-merror:0\tval-merror:0.076389\n",
      "[16]\ttrain-merror:0\tval-merror:0.076389\n",
      "[17]\ttrain-merror:0\tval-merror:0.076389\n",
      "[18]\ttrain-merror:0\tval-merror:0.069444\n",
      "[19]\ttrain-merror:0\tval-merror:0.083333\n",
      "[20]\ttrain-merror:0\tval-merror:0.076389\n",
      "Stopping. Best iteration:\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.069444\n",
      "\n",
      "[3. 1. 3. 2. 3. 3. 2. 1. 1. 2. 3. 2. 1. 2. 1. 3. 1. 2. 1. 2. 1. 2. 2. 2.\n",
      " 3. 3. 3. 3. 2. 1. 3. 2. 3. 3. 1. 3. 1. 1. 2. 3. 2. 2. 3. 1. 1. 3. 3. 1.\n",
      " 1. 3. 1. 3. 3. 3. 2. 3. 1. 1. 1. 3. 3. 3. 3. 1. 1. 1. 1. 2. 3. 3. 2. 1.\n",
      " 3. 2. 2. 2. 1. 3. 2. 2. 2. 2. 2. 3. 3. 3. 1. 1. 1. 1. 2. 3. 1. 2. 1. 3.\n",
      " 1. 3. 3. 1. 1. 1. 3. 3. 2. 2. 3. 3. 2. 1. 3. 1. 2. 1. 3. 1. 3. 2. 2. 2.\n",
      " 2. 2. 1. 3. 2. 2. 1. 3. 2. 1. 2. 3. 1. 2. 3. 3. 1. 3. 1. 2. 3. 1. 3. 3.] [3, 1, 3, 1, 3, 3, 2, 1, 1, 2, 3, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 2, 2, 2, 3, 3, 3, 3, 2, 1, 3, 1, 3, 3, 2, 3, 1, 1, 2, 3, 2, 1, 3, 1, 1, 3, 3, 1, 1, 3, 1, 3, 3, 3, 2, 3, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 2, 3, 3, 2, 1, 3, 2, 2, 1, 1, 3, 2, 2, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 3, 1, 1, 1, 3, 1, 3, 3, 1, 1, 1, 3, 3, 2, 2, 3, 3, 2, 2, 3, 1, 2, 2, 3, 1, 3, 2, 2, 2, 2, 2, 1, 3, 2, 2, 1, 2, 2, 1, 1, 3, 1, 2, 3, 3, 1, 3, 1, 2, 2, 1, 3, 3] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.069808\tval-merror:0.159722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.04712\tval-merror:0.138889\n",
      "[2]\ttrain-merror:0.029668\tval-merror:0.111111\n",
      "[3]\ttrain-merror:0.012216\tval-merror:0.118056\n",
      "[4]\ttrain-merror:0.012216\tval-merror:0.104167\n",
      "[5]\ttrain-merror:0.012216\tval-merror:0.111111\n",
      "[6]\ttrain-merror:0.008726\tval-merror:0.076389\n",
      "[7]\ttrain-merror:0.008726\tval-merror:0.090278\n",
      "[8]\ttrain-merror:0.005236\tval-merror:0.083333\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.090278\n",
      "[10]\ttrain-merror:0.006981\tval-merror:0.083333\n",
      "[11]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[12]\ttrain-merror:0\tval-merror:0.076389\n",
      "[13]\ttrain-merror:0\tval-merror:0.076389\n",
      "[14]\ttrain-merror:0\tval-merror:0.069444\n",
      "[15]\ttrain-merror:0\tval-merror:0.076389\n",
      "[16]\ttrain-merror:0\tval-merror:0.069444\n",
      "[17]\ttrain-merror:0\tval-merror:0.069444\n",
      "[18]\ttrain-merror:0\tval-merror:0.069444\n",
      "[19]\ttrain-merror:0\tval-merror:0.069444\n",
      "[20]\ttrain-merror:0\tval-merror:0.069444\n",
      "[21]\ttrain-merror:0\tval-merror:0.069444\n",
      "[22]\ttrain-merror:0\tval-merror:0.069444\n",
      "[23]\ttrain-merror:0\tval-merror:0.069444\n",
      "[24]\ttrain-merror:0\tval-merror:0.069444\n",
      "Stopping. Best iteration:\n",
      "[14]\ttrain-merror:0\tval-merror:0.069444\n",
      "\n",
      "[3. 2. 1. 2. 3. 3. 1. 1. 3. 3. 3. 1. 3. 2. 3. 3. 2. 2. 1. 2. 1. 3. 2. 2.\n",
      " 1. 1. 3. 1. 3. 2. 2. 3. 1. 2. 2. 2. 2. 3. 2. 1. 3. 1. 1. 1. 1. 3. 1. 1.\n",
      " 3. 1. 2. 1. 1. 2. 3. 1. 3. 3. 3. 3. 1. 2. 1. 3. 1. 3. 3. 1. 3. 1. 3. 2.\n",
      " 3. 3. 1. 3. 2. 2. 1. 2. 2. 1. 2. 3. 2. 3. 1. 3. 1. 1. 3. 1. 3. 3. 2. 3.\n",
      " 1. 2. 3. 3. 3. 1. 2. 1. 1. 1. 1. 1. 2. 2. 3. 2. 2. 2. 2. 2. 3. 2. 1. 2.\n",
      " 1. 3. 1. 3. 1. 1. 2. 1. 1. 3. 3. 1. 1. 1. 2. 1. 3. 3. 3. 3. 1. 2. 2. 3.] [3, 2, 1, 2, 3, 3, 1, 2, 3, 3, 3, 1, 3, 2, 3, 3, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 3, 1, 3, 2, 2, 3, 1, 2, 2, 2, 2, 3, 2, 1, 3, 1, 1, 1, 1, 3, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 1, 2, 1, 3, 1, 3, 3, 1, 3, 1, 3, 2, 3, 3, 2, 3, 2, 2, 1, 2, 2, 1, 2, 3, 2, 3, 1, 3, 1, 1, 3, 1, 3, 2, 2, 3, 1, 2, 3, 3, 3, 1, 2, 1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 1, 2, 1, 3, 1, 3, 1, 1, 2, 1, 1, 3, 3, 2, 1, 1, 2, 1, 3, 3, 3, 3, 1, 2, 2, 3] 0.9236111111111112\n",
      "[0]\ttrain-merror:0.080279\tval-merror:0.097222\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.034904\tval-merror:0.118056\n",
      "[2]\ttrain-merror:0.020942\tval-merror:0.111111\n",
      "[3]\ttrain-merror:0.017452\tval-merror:0.090278\n",
      "[4]\ttrain-merror:0.012216\tval-merror:0.090278\n",
      "[5]\ttrain-merror:0.013962\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.006981\tval-merror:0.090278\n",
      "[7]\ttrain-merror:0.006981\tval-merror:0.069444\n",
      "[8]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "[9]\ttrain-merror:0.00349\tval-merror:0.069444\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[11]\ttrain-merror:0.00349\tval-merror:0.076389\n",
      "[12]\ttrain-merror:0.001745\tval-merror:0.076389\n",
      "[13]\ttrain-merror:0\tval-merror:0.076389\n",
      "[14]\ttrain-merror:0\tval-merror:0.076389\n",
      "[15]\ttrain-merror:0\tval-merror:0.076389\n",
      "[16]\ttrain-merror:0\tval-merror:0.076389\n",
      "[17]\ttrain-merror:0\tval-merror:0.083333\n",
      "Stopping. Best iteration:\n",
      "[7]\ttrain-merror:0.006981\tval-merror:0.069444\n",
      "\n",
      "[3. 2. 1. 3. 1. 2. 3. 3. 1. 2. 1. 1. 2. 3. 3. 1. 3. 3. 2. 2. 3. 1. 2. 2.\n",
      " 3. 2. 2. 3. 3. 3. 3. 3. 1. 1. 1. 1. 3. 2. 3. 1. 1. 2. 1. 3. 1. 3. 2. 1.\n",
      " 1. 3. 1. 2. 1. 2. 2. 2. 3. 3. 3. 3. 2. 3. 3. 2. 1. 2. 1. 1. 1. 3. 3. 1.\n",
      " 3. 1. 1. 2. 2. 3. 1. 1. 1. 1. 2. 2. 2. 3. 1. 3. 2. 1. 3. 3. 1. 2. 3. 2.\n",
      " 2. 1. 2. 1. 1. 1. 2. 3. 1. 3. 1. 1. 1. 2. 1. 2. 1. 3. 1. 3. 3. 3. 1. 2.\n",
      " 3. 1. 3. 3. 2. 3. 2. 2. 3. 1. 2. 3. 3. 1. 1. 3. 1. 2. 1. 2. 3. 3. 2. 3.] [3, 2, 1, 3, 1, 2, 3, 3, 1, 2, 1, 1, 2, 3, 2, 1, 3, 3, 1, 2, 1, 1, 2, 2, 3, 2, 2, 3, 3, 3, 3, 3, 1, 2, 1, 1, 3, 2, 3, 1, 1, 2, 1, 3, 1, 3, 2, 1, 1, 3, 2, 2, 1, 2, 2, 2, 3, 3, 3, 3, 2, 3, 3, 2, 1, 2, 1, 1, 1, 3, 3, 1, 3, 1, 1, 1, 2, 3, 1, 1, 1, 1, 2, 1, 2, 3, 1, 3, 2, 1, 3, 3, 1, 1, 3, 2, 2, 1, 2, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 3, 3, 3, 1, 2, 3, 1, 3, 3, 2, 3, 2, 2, 3, 1, 1, 3, 3, 2, 1, 3, 1, 2, 1, 2, 3, 3, 2, 3] 0.9097222222222222\n",
      "[0]\ttrain-merror:0.057592\tval-merror:0.159722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.033159\tval-merror:0.166667\n",
      "[2]\ttrain-merror:0.027923\tval-merror:0.166667\n",
      "[3]\ttrain-merror:0.027923\tval-merror:0.138889\n",
      "[4]\ttrain-merror:0.020942\tval-merror:0.131944\n",
      "[5]\ttrain-merror:0.020942\tval-merror:0.138889\n",
      "[6]\ttrain-merror:0.017452\tval-merror:0.138889\n",
      "[7]\ttrain-merror:0.006981\tval-merror:0.131944\n",
      "[8]\ttrain-merror:0.006981\tval-merror:0.138889\n",
      "[9]\ttrain-merror:0.006981\tval-merror:0.125\n",
      "[10]\ttrain-merror:0.006981\tval-merror:0.131944\n",
      "[11]\ttrain-merror:0.006981\tval-merror:0.131944\n",
      "[12]\ttrain-merror:0.006981\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.005236\tval-merror:0.111111\n",
      "[14]\ttrain-merror:0.005236\tval-merror:0.111111\n",
      "[15]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[17]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[18]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[19]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[20]\ttrain-merror:0\tval-merror:0.097222\n",
      "[21]\ttrain-merror:0\tval-merror:0.104167\n",
      "[22]\ttrain-merror:0\tval-merror:0.090278\n",
      "[23]\ttrain-merror:0\tval-merror:0.104167\n",
      "[24]\ttrain-merror:0\tval-merror:0.104167\n",
      "[25]\ttrain-merror:0\tval-merror:0.104167\n",
      "[26]\ttrain-merror:0\tval-merror:0.104167\n",
      "[27]\ttrain-merror:0\tval-merror:0.104167\n",
      "[28]\ttrain-merror:0\tval-merror:0.097222\n",
      "[29]\ttrain-merror:0\tval-merror:0.104167\n",
      "[30]\ttrain-merror:0\tval-merror:0.097222\n",
      "[31]\ttrain-merror:0\tval-merror:0.097222\n",
      "[32]\ttrain-merror:0\tval-merror:0.090278\n",
      "Stopping. Best iteration:\n",
      "[22]\ttrain-merror:0\tval-merror:0.090278\n",
      "\n",
      "[1. 2. 2. 2. 3. 3. 3. 3. 1. 2. 2. 1. 3. 3. 2. 3. 3. 2. 3. 1. 2. 3. 3. 2.\n",
      " 1. 3. 2. 3. 2. 3. 3. 2. 2. 2. 2. 2. 3. 3. 3. 3. 3. 1. 1. 3. 3. 1. 1. 1.\n",
      " 2. 3. 2. 1. 3. 2. 1. 1. 3. 2. 3. 3. 3. 3. 1. 3. 2. 3. 2. 3. 3. 3. 1. 2.\n",
      " 2. 2. 1. 1. 1. 3. 1. 1. 1. 3. 3. 1. 2. 2. 2. 3. 1. 1. 2. 2. 3. 2. 2. 3.\n",
      " 2. 3. 1. 3. 2. 1. 3. 2. 3. 2. 3. 3. 2. 1. 1. 3. 2. 1. 2. 1. 1. 2. 1. 2.\n",
      " 3. 2. 2. 1. 3. 1. 3. 2. 3. 3. 2. 1. 2. 1. 3. 3. 3. 3. 1. 2. 1. 1. 2. 1.] [1, 2, 1, 2, 3, 3, 3, 3, 1, 2, 1, 1, 3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 1, 3, 2, 3, 3, 1, 2, 2, 2, 1, 3, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 2, 3, 2, 1, 3, 2, 1, 1, 3, 2, 3, 3, 3, 3, 1, 3, 2, 2, 2, 3, 2, 3, 1, 2, 2, 2, 1, 1, 1, 3, 1, 1, 1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 2, 2, 3, 2, 2, 3, 2, 3, 1, 3, 2, 1, 3, 2, 3, 2, 3, 3, 2, 1, 1, 3, 2, 1, 2, 2, 1, 2, 1, 2, 3, 1, 2, 1, 3, 1, 3, 1, 3, 3, 2, 1, 2, 1, 3, 1, 3, 3, 1, 2, 1, 1, 2, 1] 0.8958333333333334\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\ttrain-merror:0.076789\tval-merror:0.215278\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.027923\tval-merror:0.1875\n",
      "[2]\ttrain-merror:0.020942\tval-merror:0.152778\n",
      "[3]\ttrain-merror:0.017452\tval-merror:0.125\n",
      "[4]\ttrain-merror:0.010471\tval-merror:0.138889\n",
      "[5]\ttrain-merror:0.006981\tval-merror:0.138889\n",
      "[6]\ttrain-merror:0.00349\tval-merror:0.131944\n",
      "[7]\ttrain-merror:0.00349\tval-merror:0.125\n",
      "[8]\ttrain-merror:0.00349\tval-merror:0.125\n",
      "[9]\ttrain-merror:0.00349\tval-merror:0.111111\n",
      "[10]\ttrain-merror:0.00349\tval-merror:0.118056\n",
      "[11]\ttrain-merror:0.001745\tval-merror:0.125\n",
      "[12]\ttrain-merror:0.001745\tval-merror:0.125\n",
      "[13]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[17]\ttrain-merror:0\tval-merror:0.097222\n",
      "[18]\ttrain-merror:0\tval-merror:0.097222\n",
      "[19]\ttrain-merror:0\tval-merror:0.090278\n",
      "[20]\ttrain-merror:0\tval-merror:0.083333\n",
      "[21]\ttrain-merror:0\tval-merror:0.083333\n",
      "[22]\ttrain-merror:0\tval-merror:0.083333\n",
      "[23]\ttrain-merror:0\tval-merror:0.083333\n",
      "[24]\ttrain-merror:0\tval-merror:0.083333\n",
      "[25]\ttrain-merror:0\tval-merror:0.090278\n",
      "[26]\ttrain-merror:0\tval-merror:0.083333\n",
      "[27]\ttrain-merror:0\tval-merror:0.083333\n",
      "[28]\ttrain-merror:0\tval-merror:0.083333\n",
      "[29]\ttrain-merror:0\tval-merror:0.083333\n",
      "[30]\ttrain-merror:0\tval-merror:0.083333\n",
      "Stopping. Best iteration:\n",
      "[20]\ttrain-merror:0\tval-merror:0.083333\n",
      "\n",
      "[2. 1. 3. 2. 1. 2. 3. 1. 3. 1. 1. 1. 2. 1. 1. 1. 3. 1. 2. 1. 2. 1. 3. 3.\n",
      " 2. 2. 3. 2. 3. 2. 3. 3. 1. 2. 3. 1. 3. 3. 3. 1. 2. 1. 3. 3. 2. 3. 2. 1.\n",
      " 2. 3. 1. 1. 2. 2. 2. 2. 1. 1. 3. 3. 1. 2. 3. 1. 2. 1. 3. 2. 3. 2. 2. 2.\n",
      " 1. 2. 1. 3. 3. 2. 2. 3. 1. 1. 3. 2. 2. 2. 1. 3. 2. 2. 2. 2. 1. 3. 3. 2.\n",
      " 3. 2. 3. 3. 3. 3. 2. 2. 1. 2. 3. 2. 2. 3. 3. 2. 1. 1. 2. 1. 1. 1. 1. 2.\n",
      " 1. 3. 3. 3. 3. 1. 3. 1. 1. 2. 3. 1. 2. 2. 1. 3. 2. 1. 3. 2. 3. 1. 2. 2.] [1, 1, 3, 2, 1, 2, 3, 2, 3, 1, 1, 1, 2, 1, 1, 1, 3, 1, 2, 1, 2, 1, 3, 3, 2, 2, 3, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 3, 1, 2, 1, 3, 3, 2, 3, 2, 1, 1, 3, 1, 1, 2, 2, 1, 2, 1, 1, 3, 3, 1, 2, 3, 1, 2, 1, 3, 2, 3, 2, 2, 2, 1, 2, 1, 3, 3, 2, 2, 3, 1, 1, 3, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 2, 1, 2, 3, 2, 2, 3, 3, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 1, 3, 1, 1, 1, 3, 1, 2, 2, 1, 3, 1, 1, 3, 2, 3, 1, 2, 2] 0.9097222222222222\n",
      "[0]\ttrain-merror:0.080279\tval-merror:0.194444\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.027923\tval-merror:0.166667\n",
      "[2]\ttrain-merror:0.017452\tval-merror:0.131944\n",
      "[3]\ttrain-merror:0.019197\tval-merror:0.131944\n",
      "[4]\ttrain-merror:0.013962\tval-merror:0.111111\n",
      "[5]\ttrain-merror:0.010471\tval-merror:0.104167\n",
      "[6]\ttrain-merror:0.010471\tval-merror:0.111111\n",
      "[7]\ttrain-merror:0.006981\tval-merror:0.104167\n",
      "[8]\ttrain-merror:0.006981\tval-merror:0.104167\n",
      "[9]\ttrain-merror:0.005236\tval-merror:0.104167\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.104167\n",
      "[11]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[12]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[13]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.090278\n",
      "[15]\ttrain-merror:0.001745\tval-merror:0.090278\n",
      "[16]\ttrain-merror:0.001745\tval-merror:0.090278\n",
      "[17]\ttrain-merror:0.001745\tval-merror:0.090278\n",
      "[18]\ttrain-merror:0\tval-merror:0.097222\n",
      "[19]\ttrain-merror:0\tval-merror:0.097222\n",
      "[20]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[21]\ttrain-merror:0.001745\tval-merror:0.097222\n",
      "[22]\ttrain-merror:0\tval-merror:0.090278\n",
      "[23]\ttrain-merror:0\tval-merror:0.090278\n",
      "[24]\ttrain-merror:0\tval-merror:0.097222\n",
      "Stopping. Best iteration:\n",
      "[14]\ttrain-merror:0.001745\tval-merror:0.090278\n",
      "\n",
      "[2. 3. 2. 3. 3. 3. 3. 3. 3. 2. 3. 3. 2. 2. 3. 2. 3. 2. 1. 2. 3. 2. 2. 2.\n",
      " 2. 1. 3. 3. 2. 2. 2. 2. 3. 3. 3. 2. 2. 2. 2. 2. 2. 2. 3. 1. 3. 2. 1. 2.\n",
      " 1. 1. 3. 1. 3. 2. 3. 2. 1. 3. 1. 2. 1. 1. 2. 2. 3. 1. 3. 2. 1. 1. 2. 3.\n",
      " 1. 2. 2. 1. 2. 3. 2. 2. 3. 1. 2. 1. 1. 3. 3. 1. 3. 3. 3. 3. 1. 3. 1. 1.\n",
      " 3. 2. 1. 3. 2. 2. 1. 1. 2. 2. 2. 2. 1. 3. 3. 2. 2. 2. 1. 1. 2. 3. 3. 3.\n",
      " 1. 2. 2. 1. 2. 1. 3. 1. 1. 2. 3. 3. 1. 2. 3. 2. 3. 2. 3. 3. 1. 1. 3. 1.] [2, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 3, 2, 3, 2, 1, 2, 3, 2, 2, 1, 2, 1, 3, 3, 2, 2, 2, 1, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 2, 3, 2, 1, 3, 1, 2, 1, 1, 1, 2, 3, 1, 3, 2, 1, 1, 1, 3, 1, 1, 2, 1, 2, 3, 2, 2, 3, 1, 2, 2, 1, 3, 3, 1, 3, 3, 3, 3, 1, 3, 1, 1, 3, 2, 1, 3, 2, 2, 1, 1, 2, 2, 2, 2, 1, 3, 3, 1, 2, 2, 1, 1, 1, 3, 3, 3, 1, 2, 2, 1, 2, 1, 3, 1, 1, 2, 2, 3, 1, 2, 1, 1, 3, 2, 3, 3, 1, 1, 3, 1] 0.9027777777777778\n",
      "[0]\ttrain-merror:0.092496\tval-merror:0.159722\n",
      "Multiple eval metrics have been passed: 'val-merror' will be used for early stopping.\n",
      "\n",
      "Will train until val-merror hasn't improved in 10 rounds.\n",
      "[1]\ttrain-merror:0.026178\tval-merror:0.180556\n",
      "[2]\ttrain-merror:0.024433\tval-merror:0.180556\n",
      "[3]\ttrain-merror:0.017452\tval-merror:0.145833\n",
      "[4]\ttrain-merror:0.012216\tval-merror:0.125\n",
      "[5]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "[6]\ttrain-merror:0.008726\tval-merror:0.104167\n",
      "[7]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[8]\ttrain-merror:0.00349\tval-merror:0.104167\n",
      "[9]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "[10]\ttrain-merror:0.001745\tval-merror:0.118056\n",
      "[11]\ttrain-merror:0.001745\tval-merror:0.111111\n",
      "[12]\ttrain-merror:0\tval-merror:0.118056\n",
      "[13]\ttrain-merror:0\tval-merror:0.125\n",
      "[14]\ttrain-merror:0\tval-merror:0.125\n",
      "[15]\ttrain-merror:0\tval-merror:0.131944\n",
      "Stopping. Best iteration:\n",
      "[5]\ttrain-merror:0.010471\tval-merror:0.097222\n",
      "\n",
      "[1. 2. 3. 1. 1. 3. 3. 1. 1. 1. 3. 1. 3. 3. 2. 2. 2. 1. 3. 3. 2. 1. 1. 3.\n",
      " 3. 1. 1. 1. 1. 1. 2. 3. 1. 3. 2. 1. 2. 3. 2. 3. 3. 3. 3. 2. 1. 3. 1. 2.\n",
      " 1. 3. 1. 2. 2. 1. 2. 3. 2. 2. 1. 2. 2. 1. 2. 2. 2. 3. 3. 1. 3. 1. 1. 3.\n",
      " 3. 1. 3. 1. 1. 3. 1. 2. 2. 2. 3. 1. 3. 3. 1. 3. 1. 1. 3. 1. 3. 1. 2. 2.\n",
      " 3. 1. 3. 1. 2. 1. 2. 3. 1. 1. 3. 1. 1. 1. 3. 1. 1. 3. 2. 2. 1. 2. 2. 3.\n",
      " 2. 1. 1. 2. 3. 1. 1. 2. 3. 2. 1. 3. 3. 2. 3. 1. 2. 2. 3. 2. 3. 3. 3. 3.] [1, 1, 3, 1, 1, 3, 3, 1, 2, 1, 3, 1, 3, 3, 2, 2, 2, 1, 3, 3, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 3, 3, 3, 2, 1, 3, 2, 2, 1, 3, 2, 2, 2, 1, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 1, 1, 3, 3, 1, 3, 1, 1, 3, 1, 2, 2, 2, 3, 1, 3, 3, 1, 3, 1, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 1, 1, 3, 3, 1, 1, 3, 2, 2, 2, 3, 1, 2, 3, 2, 2, 1, 2, 2, 3, 3, 1, 2, 1, 3, 1, 1, 2, 3, 2, 1, 3, 3, 2, 3, 1, 3, 2, 3, 2, 3, 3, 3, 3] 0.875\n"
     ]
    }
   ],
   "source": [
    "def get_data(data):\n",
    "    DATA=data\n",
    "    X=[]\n",
    "    Y=[]\n",
    "    #teeths=['11','12','13','14','15','16','17','18','21','22','23','24','25','26','27','28','31','32','33','34','35','36','37','38','41','42','43','44','45','46','47','48']\n",
    "    teeths=['11','12','13','14','15','21','22','23','24','25','31','32','33','34','35','41','42','43','44','45']\n",
    "    periodontitis=['l','m','h','note1']\n",
    "\n",
    "    for key in DATA.keys():\n",
    "        try:\n",
    "            cl=DATA[key]['class']\n",
    "            tmp=[]\n",
    "            for teeth_id in teeths:\n",
    "                try:\n",
    "                    if math.isnan(DATA[key][teeth_id][2]):\n",
    "                        tmp.append(0)\n",
    "                    else:\n",
    "                        tmp.append(DATA[key][teeth_id][2])\n",
    "                except:\n",
    "                    tmp.append(0)\n",
    "            X.append(tmp)\n",
    "                \n",
    "            if cl=='note1':\n",
    "                Y.append(1)\n",
    "            elif cl=='l':\n",
    "                Y.append(1)\n",
    "            elif cl=='m':\n",
    "                Y.append(2)\n",
    "            elif cl=='h':\n",
    "                Y.append(3)\n",
    "\n",
    "        except:\n",
    "            pass\n",
    "    \n",
    "    from imblearn.over_sampling import SMOTE\n",
    "    smo = SMOTE(random_state=5)\n",
    "    X_smo, Y_smo = smo.fit_sample(X, Y)\n",
    "    \n",
    "    tmp_data=[[X_smo[i],Y_smo[i]] for i in range(len(Y_smo))]\n",
    "    import random\n",
    "    random.shuffle(tmp_data)\n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    \n",
    "    return X_train,Y_train,X_val,Y_val\n",
    "\n",
    "PER=[]\n",
    "C=np.arange(0.05,0.3,0.05)\n",
    "for c in C:\n",
    "    tmp=[]\n",
    "    for epoch in range(10):\n",
    "\n",
    "        X_train,Y_train,X_val,Y_val=get_data(all_data)\n",
    "\n",
    "        params={\n",
    "        'booster':'gbtree',\n",
    "        # 这里手写数字是0-9，是一个多类的问题，因此采用了multisoft多分类器，\n",
    "        'objective': 'multi:softmax', \n",
    "        'num_class':4, # 类数，与 multisoftmax 并用\n",
    "        'gamma':0.5,  # 在树的叶子节点下一个分区的最小损失，越大算法模型越保守 。[0:]\n",
    "        'max_depth':24, # 构建树的深度 [1:]\n",
    "        #'lambda':450,  # L2 正则项权重\n",
    "        'subsample':0.7, # 采样训练数据，设置为0.5，随机选择一般的数据实例 (0:1]\n",
    "        'colsample_bytree':0.7, # 构建树树时的采样比率 (0:1]\n",
    "        #'min_child_weight':12, # 节点的最少特征数\n",
    "        'silent':1 ,\n",
    "        'eta': c, # 如同学习率\n",
    "        'seed':710,\n",
    "        'nthread':4,# cpu 线程数,根据自己U的个数适当调整\n",
    "        }\n",
    "\n",
    "        plst = list(params.items())\n",
    "\n",
    "        #Using 10000 rows for early stopping. \n",
    "        offset = 50000  # 训练集中数据60000，划分50000用作训练，10000用作验证\n",
    "\n",
    "        num_rounds = 50 # 迭代你次数\n",
    "\n",
    "        # 划分训练集与验证集 \n",
    "        xgtrain = xgb.DMatrix(X_train, label=Y_train)\n",
    "        xgval = xgb.DMatrix(X_val, label=Y_val)\n",
    "        xgtest = xgb.DMatrix(X_val, label=Y_val)\n",
    "\n",
    "        # return 训练和验证的错误率\n",
    "        watchlist = [(xgtrain, 'train'),(xgval, 'val')]\n",
    "\n",
    "\n",
    "        # training model \n",
    "        # early_stopping_rounds 当设置的迭代次数较大时，early_stopping_rounds 可在一定的迭代次数内准确率没有提升就停止训练\n",
    "        model = xgb.train(plst, xgtrain, num_rounds, watchlist,early_stopping_rounds=10)\n",
    "        #model.save_model('./model/xgb.model') # 用于存储训练出的模型\n",
    "        preds = model.predict(xgtest,ntree_limit=model.best_iteration)\n",
    "        acc=(preds==Y_val).sum()/len(Y_val)\n",
    "        print(preds,Y_val,acc)\n",
    "\n",
    "        tmp.append(acc)\n",
    "    PER.append(np.mean(tmp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-16T09:56:53.839644Z",
     "start_time": "2019-12-16T09:56:52.821154Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABYEAAAGHCAYAAADm2Z27AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdeVxU9f7H8dcgCCig4MrihqYilial5VJXw6301u2m5jWteytNu+Kv1LTdFk1btbwW3tsirml5LTUzqbTwWipuibu4gKioDIqKyHJ+f5xmAEETBQ7L+/l48Jhhzjnf85nhO8x3PvOdz9dmGIaBiIiIiIiIiIiIiFRILlYHICIiIiIiIiIiIiIlR0lgERERERERERERkQpMSWARERERERERERGRCkxJYBEREREREREREZEKTElgERERERERERERkQpMSWARERERERERERGRCkxJYBEREREREREREZEKTElgERERERERERERkQrM1eoARERERERERESu1YYNG1iwYAFbtmzhhx9+AKB+/fq0a9eO4OBgQkNDCQwMpG7dutSpUwdfX18A56Xdbnde2u124uPjsdvt7Nq1iwMHDhAbG0tCQgIAnTp1ol27djzwwAPccccdFtxbEZFrYzMMw7A6CBERERERERGRy4mKimLmzJmsX7+ep59+mj59+tC5c2erwwIgPj6eKVOm8NVXX+Hi4sLQoUOZMGGC1WGJiOSjJLCIiIiIiIiIlDn9+vVj2bJlPP3000ycONHqcIrk7bffZuzYsXTr1o1vvvkGd3d3q0MSkUpOSWARERERERERsdyMGTN44YUX2LdvH35+flaHU6x+/PFHnnjiCfr168frr79udTgiUgkpCSwiIiIiIiIilnjqqaf45JNPOH36tNWhlKpmzZqxcOFC2rVrZ3UoIlJJuFgdgIiIiIiIiIhUPgEBAbz++uuVLgEMsG/fPg4ePEjVqlWtDkVEKgklgUVERERERESk1CxevJj77ruPpKQkqlevflXHjB8/njvuuAMAm8122f1eeOGFArfZbDbnMTt27KBOnTocPXq0wDYwZ+g6PPvss4wYMaLQ/UaOHFlo+7Nnz+bZZ58lNTX1D+/T/fffz8WLF3nzzTd58skn/3B/EZHroXIQIiIiIiIiIlJqhgwZQlRU1DUdm5qaiq+vL4WlMqpWrcrFixepXr06586dK/T49PR03Nzc8PX1ZcaMGQwePNi57Z577mH58uUAdOrUibVr11KvXj2OHz9eoJ1ff/2VDh06FLjdZrNhGAY+Pj6cOXPmqu/X559/zoABA656fxGRolISWERERERERERKxXPPPcekSZOuqw1HovW9997jxIkTzvYctzsuHc6cOUONGjWct9lsNv7zn//w6KOP5ttms9n45ZdfcHFx4dZbb6VBgwYkJCQ426hVqxaZmZk0adKEdevWERAQQE5OTr42Tp48yc033+w8rihCQ0OJi4u7rsdGRORyXK0OQEREREREREQqh717917zsZ6enly4cAGAG264gS5dutCrV68/PM7Hx4fAwEDn746E76OPPppvm4eHBx06dKBXr15kZmaSkJCQb2ZvZmam89z169d3JpXztlGnTh0Mw7jsDOIr2b9/f5H2FxEpCtUEFhEREREREZFSMWPGjCIfY7fbAbOUgyPxunfvXj755BN69uyJv78/AFOmTAHg1VdfBeDQoUPO6+3btwfgk08+ISMjgwEDBjBq1Kh82xz1gBcsWMADDzzgPL+jjXvvvReAFStWAFC/fv0C7TsMHDiwyPfzs88+K/IxIiJXS+UgRERERERERKTUNG/enFWrVtGoUSOrQykTMjMz8fb2ds5yFhEpCZoJLCIiIiIiIiKlZs+ePbz77rucPXvW6lDKhI4dOyoBLCIlTklgERERERERESlV06ZNw8vLCxcXFxYsWGB1OKXu119/JTQ0FIANGzZYHI2IVAZKAouIiIiIiIiIJXJycnjwwQeJiorCzc2NpUuXWh1SiYmNjcVmszFx4kQ6dOhAXFyc1SGJSCWimsAiIiIiIiIiUiYkJCQQEhJC48aNWbduHd7e3laHdF2ysrLo0aMH586dY/r06dx6661WhyQilZRmAouIiIiIiIhImdCgQQPOnj3L9u3b8fb25uzZs7zyyivYbDYaNGjAF198YXWIhTIMg5UrV9K6dWtsNhtPPfUUAK6urvzwww/8+uuvSgCLiKU0E1hEREREREREyp2YmBg+++wzVq9ezf798Xh7+3D33b3o3r07wcHBhIWF4ePjc13nuHDhAhs3bmTjxo1s3ryZlStXcvz4cfz9/XnkkUfo0aYNf3r+edi3r5julYhIyVASWERERERERETKLcOAG2+E7dtzbzt58iSxsbHEx8ezc+dOEhMTOX78OMeOHcNutwM4L319fZ2XtWrVonHjxtSqVYuWLVs6k8kBAQFXDsLTEyZPhlGjSuQ+iohcLyWBRURERERERKRcqlIF0tKgWjWrI/ndhAnwr3/BiRNWRyIiko+SwCIiIiIiIiJS7ri4QE6O1VFchp+fWSLCz8/qSEREAC0MJyIiIiIiIiLlSGAgLFtWhhPAACkpZgJ42jQYNszqaERENBNYRERERERERMq+M2fgscdg4UKrI7kGUVFm8BcvWh2JiFRSSgKLiIiIiIiISJk2fjzEx5fTBHBeISHmKnbl/o6ISHmjJLCIiIiIiIiIlEnr1kHv3pCaanUkxWzpUnj/fVi1yupIRKSSUE1gERERERERESlz1q+H336rgAlggL59zQRwt27www9WRyMilYBmAouIiIiIiIhImZGVBdWrQ0aG1ZGUov/9D8aMMS9FREqAksAiIiIiIiIiUiZ06QKrV0OVKlZHYpHffoObbzYz4JX2QRCRkqByECIiIiIiIiJiuT/9yayMUKlznzfeaE6FHjECZs60OhoRqUA0E1hERERERERELDNzJoSFmT9yicOHoXNn2L0bPD2tjkZEyjHNBBYRERERERGRUnfsGAwbBkOH5iaAbTYbAPfffz9Dhw4FoH79+rRo0QLDMDhx4kS+NgzDwGazsXPnTpo0acKWLVuc20JCQpz7nDhxghYtWji32Ww2jhw5gs1mY+7cuQBMnz4dgDFjxpTMHb4WDRuaiWBPT6hZE06fvuyu3t7eHD58GJvNxtmzZ3nllVc4ceIEp69wjIhUHkoCi4iIiIiIiEipSk6Gl1+GyMj8tz/33HMALFq0iHXr1gFw7NgxJk2ahIuLC3Xq1Mm3vyNpHBISwsGDB2nbtm2BczmOmzRpEp06dXLeHhgYCMCgQYPy7e/u7n59d66kpKbCRx+Bj0+hm4OCgmjYsCEtW7akb9++jBkzhjp16tCnT59SDlREyiKVgxARERERERGRUhMQAElJl9/etWtXfvzxR5o2bcprr73GrFmziImJ4dy5c3To0IGzZ88SFxfn3N9mszlnBBuGQU5ODi4uLgQGBnLkyBEAOnTowPbt2zl9+jSurq4FjsnKyuKNN96gffv2hIeHU6WsFyY+dw5q1YL9++H3ZHaTJk04cOAAQUFB7N27l+bNm5OQkEBWVhaurq4WBywiVlMSWERERERERERK3MqV8MgjcPTolfdLT0/H8wr1b/fs2UPz5s2LNzjg008/5e9//zuzZ89m8ODBxd5+iYiKguho81JE5AqUBBYRERERERGRElWlCmRn//F+LVq0YPfu3SUfUCEiIiKIjY1l9erVuLm5WRLDNcvJATe3q3uQRaRSUhJYREREREREREpEy5bw9NPm4m9SCgwDOnSA6dOhfXuroxGRMkRFYURERERERESk2LVqBTt3wu9rt0lpsNlg/XqIiTGva96fiPzOxeoARERERERERKTimDIFOneGHTuUALZM5865CWCbDZYutTYeEbGcykGIiIiIiIiIyHXbvx9at4b0dKsjkUINGQLh4ealiFQ6KgchIiIiIiIiItflwAH497+VAC7ToqIgPt5cQC49HVyVEhKpTDQTWERERERERESKxMUFcnLMigM1asCZM1ZHJEU2ahQEB5uXIlLhqSawiIiIiIiIiFy12283k7/Z2RAaqgRwuTVtGgwcCHXr5v8jbtpkXUwiUmI0E1hERERERERErsqxY+Dvb153dYXMTGvjkWLk5wf79kH9+ubvp06Bt7e1MYlIsdFMYBERERERERH5Q6tW5SaAAWw2eOUV6+KRYpaSAnXqmJn9zEzw8VGRZ5EKRDOBRURERERERMq5xMRE1q5dy8GDB9myZQtbt27l2LFj2O32IrcVFBREy5Ytady4MW3atKFRo0Z069YNb+/quLpC27bw1ltw550lcEfEWjZb/t8vM907IyODzZs3s2HDBjZt2kR8fDxxcXGcOnWqSKfz9fWlZcuWNGnShLCwMIKDgwkPD8fLy+t67oWIFEJJYBEREREREZEybMaMGSxbtowVK1YQGBjI3/72NwYOHMjNN99sSTznz58nJiaGefPmMW/ePDIzM3nssccYO3YszZs3tyQmKV6zZ89myZIlVFm8mFF+fqx88kmGDBlCs2bNSjWOpKQk1qxZQ1RUFN9++y0NGzbk2Wef5YknnijVOEQqAiWBRURERERERMqQTz/9lKFDh+Lq6srkyZMZNWqU1SFdldjYWObMmcPUqVNp2LAh8+bNo1OnTlaHJVdh37599O3bl+TkZB599FHeeOMNqlSpYnVYlzVx4kQ+/vhj0tPTGTt2LE8//bTVIYmUeUoCi4iIiIiIiFgkJSWFZs2a4eHhwYYNGwgMDLQ6pGL3zTff0KdPHyZNmsT48eOtDkeAt99+m2effZaXXnqJF1980epwikVkZCRjx47l8ccf55133rE6HJEyR0lgERERERERkVK0c+dObrrpJubPn88DDzxgdTilbtSoUXz44YdcuHABFxetV19a3n33XVauXMl///tfqlWrZnU4JcowDJ544gmqVq3KBx98YHU4ImWCksAiIiIiIiIipeSOO+7g+eefp2fPnlaHYrmRI0fSqlUrhg8fbnUoFdq5c+cICAggISEBHx8fq8MpVTk5OXTq1Ik5c+bQtGlTq8MRsZSSwCIiIiIiIiIlLCwsjPXr15fpOqsABw4cIDs7u1QXAPvhhx84efIk/fv3L7VzVhYNGzbk8OHDVodRJri7u5ORkWF1GCKW0fcuRERERERERErQoEGDiI2NLVICuGXLls7rISEhADz00EMA2Gy2fPv+8ssvAEyePBmA6tWr59uempqKzWYjISHBuc+pU6c4deoUAP/4xz8AcHV1pUmTJjRr1oy9e/cC8Pjjj5OYmJjvvOnp6QB4e3sXaCM9PZ2srCy8vb2v+r5269aN/v37l/kEeXlTs2bN60oAO/odwAsvvFBgu6PfXbrvpce8//77APj6+jq35e3fjn715ptvsnfvXrKysgCoWrUqAJMmTSIhIcG5/6lTp/L1wauVkZHB559/ftX7i1Q0SgKLiIiIiIiIlJBvvvmGuXPnFumY5cuXc/z48QJlEubMmQNAjRo1nLe1bt2aOnXqAPDwww8DcP78+XzH7dmzB4AnnnjCuU9ERAS1atUCYMOGDYCZ8HUk1by8vAD4z3/+Q1BQUL7zenp6ApCWllagDU9PT1566SXS0tKKdJ8BLly4UORjpHCbNm1i0aJFRTpm+PDhDB8+nHPnzuW7/YMPPuD11193/p6ZmYmnp6ez3xUm7zERERGAuRidY9ulH2QALFy4EC8vL1xdXTl27BiZmZmA2a+feOIJ534RERH5+mBRDBgwgAkTJhTpGJGKQklgERERERERkRLy+OOPF/mYe+65h/r16/Phhx8Wuj01NZV///vfdO3ale3btztrnRa2yNqPP/7oTN4GBQU593Ekz7788kt+++03AD788EPS0tJo3749ffv25eabb6Z79+75zptX3kSeow0wZ24WluT7I25ubqxfv77Ix0lBERER+f52V+PDDz/kww8/LDCTvEePHuzevZvdu3fj4uLCmjVrSE9Pv2KN3bzHOLi7u3PXXXfRo0cPMjIy8m0D2LhxI3379mXOnDnUr1/febuLi4vzgwjIn/i9ln72yiuvFPkYkYpASWARERERERGREjJ48OBibe+jjz4CzOTyjz/+iI+Pj/Or8Y4Zx46v0QN07dqVFi1aAGa5CMc+M2bMAGDIkCHOfbds2QJAr1692LhxIzExMaxcuTLfedetW1cgpktnjl6P9u3bF1tbldmAAQMKzAi/Vi1atHD+5OTkEBISQtOmTZ397o+OcWjfvj333XcfLVq0wN3dPd82h40bNzpnENesWRMw+7WjjAnk9t1rFR4efl3Hi5RXWhhOREREREREpAQ1adKEAwcOWB1GkUycOJHnn3++1M6XlZVFrVq1OH36dKmds6K7/fbbC03al1WHDh1izpw5JdrvBg8ezOzZs0usfZGyTElgERERERERkWKUng5r10JcHERHw7ffQlYWbN68hbZt21odXpkzfvx4IiIiCAgIsDqUCmfUqFFMnDjRWeO5Mrv11ludtatFKiMlgUVERERERESuUno67NgBMTEQG2smeY8eNbd16gTh4RAWBnfeCT4++Y/96KOPeOqpp674NfrKJCMjg5o1a3L48OErLjIm1+fxxx/n119/Zdu2bVaHYok9e/bw97//nbVr11odioillAQWERERERGRSikpCeLjzURubCx89x1cvAgeHmYyNzTUvOzWDQpZc+26eHl50atXL7744ovibbiMy87OpmHDhrRq1YpVq1ZZHU6lkpCQQLNmzYiKimLAgAFWh1OiYmJiuP/++1myZAkdO3a0OhyRMkFJYBERERERESn30tPNZG50tDlT9/vvwTDA3z83odupE3TubHWkBQ0bNoyZM2fyzjvvMHLkSNzc3KwOqdjs27eP1157jaVLl7Jp0yYaN25sdUiCmRB+8skniY+PZ926dXh7e1sd0nXJysqiR48erFmzhl9++YVbb73V6pBEyhwlgUVERERERKRMcyR4HeUX4uPNEgz+/rmzdVu1gt69wdXV6mivnWEYzJo1i8cee4y+ffsyaNAgHnjgAavDKrK3336bqKgoUlNTWbBggWZilnFffvklkydP5tSpU3z00Uf06NHD6pCuyq+//sqIESPYtGkTkZGRDB061OqQRMo0JYFFRERERESk1CQl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5hAdGsrDdjtJSUnYbDbCwsIIDg6mXbt2NG7c2JmArFq1KjVq1DDHQ25uZGZmcvbsWQCSk5NJTk7myJEjHDp0iPj4eOd4yG63ExgYyM0338zdd9/NI488UmHHQ+vXr+eXX37hxx9/ZPXq1aSmpgLme8rWrVtz0003UadOHRo2bIivry8BAQHUrFnT+Xj4+vpy8SKcO2f26+zsbOx2OykpKRw+fJijR49y/Phxtm/fTkJCAlu3biUnJwdPT0+6du1KSEgI9957L126dLHsMSgW8fHw4ovmrCQPDwB2b9nC999/z9dff01sbCwnT56kQYMGNG3alPbt2xMUFESjRo1o2LAhPj4++Pr64unpiYeHBxcuXCA9PZ2LFy+SlJTEqVOniI+PZ9++fezfv5/169eTmJgIQK9evQgLC2PIkCE0b97cykdBrGSISIUwdepUw2azGTVr1jReQm1NmgAAIABJREFUfvllY/v27VaH5LR9+3Zj8ODBhqenp9GqVSvj559/LtLxV/pPlZFhGOPGmfv4+hpGZKRhnD17nQGLlGHbt283+vTpYwBGp06djFWrVlkdklNKSooxa9YsIzg42ACMiIgIIyMjw+qwREREitXPP/9sREREGIDh6+trTJ482cjMzLQ6rAL2799vTJ482fD393e+Lp8/f97qsIrF9u3bjZdfftk5Hpo6daqRk5NjdVhOGzduzDde27hxo9UhXdHXX39tDB482ACMsLAwY/LkycaZM2esDuuyMjMzjcjISKNfv37O52FkZKTVYV3Ryy+/bPj5+RnBwcHGrFmzysRzMe/fPSIiokzlEKRkKAksUk6tWrXK+NOf/mTUrVvXeOedd6wOp0ji4+ON8ePHG4DRv3//y+43ebJhuLnlTwL//LNhdOpk3tanj2HMmlUKAYtYbPjw4YaLi4sxdOhQY/PmzVaHUyT/+c9/jJYtWxo33nijkZycbHU4IiIi12TkyJGGm5ubcd999xlHjhyxOpxrNn/+fKNTp06Gn5+fER0dbXU4RTJ37lyjdevWRqtWrcrdeCg2NtZo2bKl4eLiYsybN8/qcIzExESjc+fOBmA89dRTZSIheb2ysrKMV155xahfv77RunVrY8uWLZbGk5OTY9x9991GvXr1jA8++MDSWK7W//73/+zdeVxUZfs/8M8MyKKsCogLyOICuIBhau65ZPmkWaZm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4ikrK6NDhw7Rm2++SZ06dSIANHr0aPruu+9kiccYGzdupI4dO6r7zilTptCp6GhZYzp58iStXr2aevToQQAoMDCQVq9eLWtMhigpKaHt27dT9+7dCQC1a9eOFi5cSL///ruscV28eJHee+89GjBgAAGgRx55hD788EMqLS2VNS5D5efn07Jly2jgwIEEgMLCwuill16in376ia5fvy53eGpHjx6luXPnquNs3bo1TZw40eLHIZxW2JDY2FgaMmQINW3alI4dOyZ3OHoZN243ubrOpI4d19K0aRn03ntEs2cTTZggd2S2b9++fdSvXz/y8fGhTz75RO5wDJKSkkJz5swhADRq1Ci5w2H1VFRUFCmVSgoLC6MzZ87IHY5BYmNjKSQkhJRKJW3dulXucDTs27ePGjZsSD4+PvT333/LHY5BUlJSqFevXtS8eXNas2aN3OEwxvSwZs0aCgoKovbt29M///wjdzhGO3LkCIWF/UHAAWrYsFhjELikRO7omKioqMhm828istn8Oy4ujl544QVSKpX02muvUV5entwhGSU3N5e++OILUigU1Lp1azp37pxssfz+++/k4eFBzs7OFBUVJVscprBz50568sknycHBQfbPEhsbS0FBQRQaGkrr16+XNZbaOnjwILVr144AWEVenJaWRv379yc7OzsaO3Yspaamyh2SSalUKlq5ciWFhoaSp6cnbdu2zSzL4UFgGzBs2DBSKBQ2f6bSqVOnSKFQWN2AhS1RqVQ0Y8YMcnNzk/VsFlNbtGgRNWjQgD799FO5Q2F1XEFBAXl6elJQUBDl5+fLHY5J5OXlUUBAADVu3JgKCwtliUGlUlGbNm3omWeeqTN9U0VFBXXr1o0aNGhA6enpcofDGJPYt28ftWnThh577DGqqKiQOxyTq6iooOXLlxMAmjp1qtzhMCJ1/r1hwwa5QzEZa8+/y8rKaPLkyeTs7EynT5+WOxyzOHXqFDk5OVG7du2ovLzc7MtLT08nFxcXGjdunCxnqltCQUEBvfPOO2RnZ2ex8ZOff/6Z/Pz86D//+Q+dPXvWIsu0tIqKCnriiScIgEWvkly1ahU1btyYBg8eTAcOHLDYcq1BQUEBLV68mADQsGHDTFYv3xPYSr355puIjo6u5v4vts/T0xOxsbEICgqSOxSrN3nyZADA559/LnMk5pefnw83NzesWrUK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evbsifHjx2OgCDc2vn37NrZv345t27YhJSUFEyZMwKJFi2BtbV3hsWgqMDAQJ06cwA8//IDk5GR4e3tj+PDh8PT0RAf5fTVFEhERgStXruCPP/7A4cOHoaenh/fffx8+Pj4YPny4qLFp6vr169i4cSO2b98OABg2bBg8PDwwul07WPXrJ25wAI4fP46DBw/i6tWrCAkJQf/+/dGnTx/MmDED+vr6YodX6SUlJeH333/H119/jdjYWLz55psYN24cvL290bRp0wqN5cGDB9i5cye2b9+OuLg4DB8+HEOHDsW7775boXFoq6CgAJs2bcKZM2fw559/olWrVujQoQMGDRqEDh06wN7eXuwQAcjm/UOHDuH69es4duwYmjZtil69emHy5Mno1q2b2OExxhhjjDHG1EWMlWDv3r3Us2dP0tfXp1WrVlFUVJTYIemUVCqlb7/9lvT19cnMzIx+++03UePZs2cPOTs7U9u2benGjRuixqKp4OBgmjRpEunp6dGvv/4qWhw3btwgX19fAkDLli2jhw8fihaLrmRkZNC2bduobt261LVrV9HHKRHR+vXrqW3btmRhYUFLliyhvLw8sUPSiStXrpCnpycBoE8++UTscER1+vRp6t69OzVu3JhWrVoldjgaiYyMpPnz5xMAWrdunaixvHz5koYPH04AaODAgXTnzh1R4ykPP/30E3Xu3JkMDQ1p8uTJlJ+fL3ZIjDHGGGOMMRV8JTArZO3atVi2bBk6dOiAQ4cOoU6dOmKHVGEyMzPx3XffYcmSJVi/fj0++uijCmnT19cXwcHBuH37NurVq1fubZa39PR0zJs3D/v27UNcXFy5j6HHjx/DxcUFenp6+Pvvv9GuXbtybU9sGRkZ6Nu3Ly5duoRjx47hrbfeqpB2V61ahaVLl6J///747bffqsftK0qxdOlS+Pv7Y9SoUVi3bh3q168vdkjliojwySefYOvWrQgJCYGlpaXYIZWZVCrFl19+ieXLl8Pf3x8ff/xxubeZnJwMDw8PmJiYwM/PDyNGjCj3NiuTH374AR9++CG8vLxw/vx5vsqeMcYYY4yxSoCTwAwFBQUwMzPDd999hylTpogdTqXz448/Yv78+Thw4AB69eqlkzqlUikMDAzg7++PefPm6aTOyiwqKgq2trY4evQo+vfvr5M6f/zxR3z99dfYv38/OnbsqJM6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\n",
      "text/plain": [
       "<Figure size 1800x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb.plot_tree(model, num_trees=2)\n",
    "fig = plt.gcf()\n",
    "fig.set_size_inches(25, 10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# t-SNE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-17T09:17:57.937778Z",
     "start_time": "2019-12-17T09:17:54.633239Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Org data dimension is 642.Embedded data dimension is 2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import manifold, datasets\n",
    "\n",
    "def get_data(data):\n",
    "    DATA=data\n",
    "    X=[]\n",
    "    Y=[]\n",
    "    teeths=['11','12','13','14','15','16','17','18','21','22','23','24','25','26','27','28','31','32','33','34','35','36','37','38','41','42','43','44','45','46','47','48']\n",
    "    #teeths=['11','12','13','14','15','21','22','23','24','25','31','32','33','34','35','41','42','43','44','45']\n",
    "    periodontitis=['l','m','h','note1']\n",
    "\n",
    "    for key in DATA.keys():\n",
    "        try:\n",
    "            cl=DATA[key]['class']\n",
    "            \n",
    "            \n",
    "            ratio = np.zeros((32))\n",
    "            new_teeths=DATA[key].keys()\n",
    "            new_teeths=list(new_teeths)\n",
    "            new_teeths.remove('class')\n",
    "            for tooth in new_teeths:\n",
    "                #有些样本中牙的数量太少\n",
    "                if(len(new_teeths) == 1): \n",
    "                    continue\n",
    "                else:\n",
    "                    #有些样本中的牙的ratio为NaN，无法计算，continue\n",
    "                    if(math.isnan(DATA[key][tooth][2])):\n",
    "                        continue\n",
    "                    ratio[list(new_teeths).index(tooth)] = DATA[key][tooth][2]\n",
    "                    #ratio.append(distance_data[i][tooth][2])\n",
    "\n",
    "\n",
    "            #如果样本中的牙的数量小于32，则用插值的办法（第一个和第二个的mean，依此类推）来补充，直到向量长度为32\n",
    "            #将每个牙都根据周围的牙齿来进行插值，输出的顺序按照牙齿的标号顺序\n",
    "            for j in range(0,len(ratio)):\n",
    "                if(ratio.all() > 0):\n",
    "                    break\n",
    "                if(ratio[j] > 0):\n",
    "                    continue\n",
    "                elif(j == 0 and ratio[j+1] > 0 and ratio[j+2] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j+2])/2\n",
    "                elif(j == len(ratio) - 1 and  ratio[j-1] > 0 and ratio[j-2] > 0):\n",
    "                    ratio[j] = (ratio[j-1] + ratio[j-2])/2\n",
    "                elif(j > 0 and j < len(ratio) - 1 and ratio[j+1] > 0 and ratio[j-1] > 0):\n",
    "                    ratio[j] = (ratio[j+1]+ratio[j - 1])/2\n",
    "                else:\n",
    "                    ratio[j] = (np.random.choice(ratio[np.where(ratio > 0)],1)+np.random.choice(ratio[np.where(ratio > 0)],1))/2\n",
    "            X.append(ratio.tolist())\n",
    "            \n",
    "            \n",
    "            \"\"\"\n",
    "            tmp=[]\n",
    "            for teeth_id in teeths:\n",
    "                try:\n",
    "                    if math.isnan(DATA[key][teeth_id][2]):\n",
    "                        tmp.append(0)\n",
    "                    else:\n",
    "                        tmp.append(DATA[key][teeth_id][2])\n",
    "                except:\n",
    "                    tmp.append(0)\n",
    "            X.append(tmp)\n",
    "            \"\"\"\n",
    "                \n",
    "            if cl=='note1':\n",
    "                Y.append(1)\n",
    "            elif cl=='l':\n",
    "                Y.append(1)\n",
    "            elif cl=='m':\n",
    "                Y.append(2)\n",
    "            elif cl=='h':\n",
    "                Y.append(3)\n",
    "\n",
    "        except:\n",
    "            pass\n",
    "        \n",
    "   \n",
    "    from imblearn.over_sampling import SMOTE\n",
    "    smo = SMOTE(random_state=5)\n",
    "    X_smo, Y_smo = smo.fit_sample(X, Y)\n",
    "    \n",
    "    tmp_data=[[X_smo[i],Y_smo[i]] for i in range(len(Y_smo))]\n",
    "    import random\n",
    "    random.shuffle(tmp_data)\n",
    "    \n",
    "    \n",
    "    X_train=[x[0] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    Y_train=[x[1] for x in tmp_data[0:int(len(tmp_data)*0.8)]]\n",
    "    X_val=[x[0] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    Y_val=[x[1] for x in tmp_data[int(len(tmp_data)*0.8)::]]\n",
    "    \"\"\"\n",
    "    \n",
    "    X_train=[x for x in X[0:int(len(X)*0.8)]]\n",
    "    Y_train=[x for x in Y[0:int(len(Y)*0.8)]]\n",
    "    X_val=[x for x in X[int(len(X)*0.8)::]]\n",
    "    Y_val=[x for x in Y[int(len(Y)*0.8)::]]\n",
    "     \"\"\"\n",
    "    \n",
    "    return X_train,Y_train,X_val,Y_val\n",
    "\n",
    "X_train,Y_train,X_val,Y_val=get_data(all_data)\n",
    "\n",
    "tsne = manifold.TSNE(n_components=2, init='pca', random_state=501)\n",
    "\n",
    "X=X_train+X_val\n",
    "Y=Y_train+Y_val\n",
    "X_tsne = tsne.fit_transform(X)\n",
    "\n",
    "print(\"Org data dimension is {}.Embedded data dimension is {}\".format(len(X), X_tsne.shape[-1]))\n",
    "\n",
    "x_min, x_max = X_tsne.min(0), X_tsne.max(0)\n",
    "X_norm = (X_tsne - x_min) / (x_max - x_min)  # 归一化\n",
    "plt.figure(figsize=(8, 8))\n",
    "for i in range(X_norm.shape[0]):\n",
    "    plt.text(X_norm[i, 0], X_norm[i, 1], str(Y[i]), color=plt.cm.Set1(Y[i]), \n",
    "             fontdict={'weight': 'bold', 'size': 9})\n",
    "plt.xticks([])\n",
    "plt.yticks([])\n",
    "plt.xlabel('t-SNE 1',fontsize=15)\n",
    "plt.ylabel('t-SNE 2',fontsize=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-16T19:29:42.052332Z",
     "start_time": "2019-12-16T19:29:41.619049Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Org data dimension is 30.Embedded data dimension is 2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X=X_train+X_val\n",
    "Y=Y_train+Y_val\n",
    "X_tsne = tsne.fit_transform(X)\n",
    "\n",
    "print(\"Org data dimension is {}.Embedded data dimension is {}\".format(len(X), X_tsne.shape[-1]))\n",
    "\n",
    "x_min, x_max = X_tsne.min(0), X_tsne.max(0)\n",
    "X_norm = (X_tsne - x_min) / (x_max - x_min)  # 归一化\n",
    "plt.figure(figsize=(8, 8))\n",
    "for i in range(X_norm.shape[0]):\n",
    "    plt.text(X_norm[i, 0], X_norm[i, 1], str(Y[i]), color=plt.cm.Set1(Y[i]), \n",
    "             fontdict={'weight': 'bold', 'size': 9})\n",
    "plt.xticks([])\n",
    "plt.yticks([])\n",
    "plt.xlabel('t-SNE 1',fontsize=15)\n",
    "plt.ylabel('t-SNE 2',fontsize=15)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ml",
   "language": "python",
   "name": "ml"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "362.59375px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
