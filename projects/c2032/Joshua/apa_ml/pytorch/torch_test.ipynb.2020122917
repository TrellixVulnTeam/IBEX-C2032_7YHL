{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pickle\n",
    "\n",
    "def save_obj(obj, name):\n",
    "    with open('data/'+ name + '.pkl', 'wb') as f:\n",
    "        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\n",
    "\n",
    "def load_obj(name):\n",
    "    with open('data/' + name + '.pkl', 'rb') as f:\n",
    "        return pickle.load(f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['RAWDATA.pkl',\n",
       " 'bl6.pAs.random.negative.txt',\n",
       " 'parental.pAs.usage.txt',\n",
       " 'bl.pAs.sequence.txt',\n",
       " 'Coverage_BL6_REP1.zhangbin.txt',\n",
       " 'bl6.pAs.zhangbin.fibroblast.txt']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir('data/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA={}\n",
    "\n",
    "\"\"\"\n",
    "with open('data/bl.pAs.sequence.txt','r') as f:\n",
    "    for line in f:\n",
    "        line=line.rstrip('\\n').split('\\t')\n",
    "        if line[0]!='#pas_type':\n",
    "            ID=line[0]\n",
    "            PAS_TYPE=line[1]\n",
    "            COORDINATE1=line[2]\n",
    "            SEQUENCE=line[3]\n",
    "            DATA[ID]={}\n",
    "            DATA[ID]['PAS_TYPE']=PAS_TYPE\n",
    "            DATA[ID]['COORDINATE1']=COORDINATE1\n",
    "            DATA[ID]['SEQUENCE']=SEQUENCE\n",
    "            DATA[ID]['TYPE']='POSITIVE'\n",
    "            \n",
    "with open('data/Coverage_BL6_REP1.zhangbin.txt','r') as f:\n",
    "    for line in f:\n",
    "        line=line.rstrip('\\n').split('\\t')\n",
    "        ID=line[0]\n",
    "        PAS_TYPE=line[1]\n",
    "        STRAND=line[2]\n",
    "        COORDINATE2=line[3]\n",
    "        COVERAGE=[int(x) for x in line[4::]]\n",
    "        DATA[ID]['STRAND']=STRAND\n",
    "        DATA[ID]['COORDINATE2']=COORDINATE2\n",
    "        DATA[ID]['COVERAGE']=COVERAGE\n",
    "        DATA[ID]['TYPE']='POSITIVE'\n",
    "    \n",
    "with open('data/parental.pAs.usage.txt','r') as f:\n",
    "    for line in f:\n",
    "        line=line.rstrip('\\n').split('\\t')\n",
    "        if line[0]!='':\n",
    "            ID=line[0]\n",
    "            PASUSAGE=float(line[1])\n",
    "            DATA[ID]['PASUSAGE']=PASUSAGE\n",
    "            DATA[ID]['TYPE']='POSITIVE'\n",
    "            \n",
    "\"\"\"\n",
    "\n",
    "with open('data/bl6.pAs.zhangbin.fibroblast.txt','r') as f:\n",
    "    for line in f:\n",
    "        line=line.rstrip('\\n').split('\\t')\n",
    "        if line[0]!='#pas_id':\n",
    "            ID=line[0]\n",
    "            PAS_TYPE=line[1].split('=')[0]\n",
    "            STRAND=line[4]\n",
    "            PASUSAGE=float(line[6])\n",
    "            SEQUENCE=line[7]\n",
    "            COVERAGE=[int(x) for x in line[8::]]\n",
    "            COVERAGE=np.array(COVERAGE)\n",
    "            \n",
    "            DATA[ID]={}\n",
    "            DATA[ID]['PAS_TYPE']=PAS_TYPE\n",
    "            DATA[ID]['STRAND']=STRAND\n",
    "            DATA[ID]['SEQUENCE']=SEQUENCE\n",
    "            DATA[ID]['PASUSAGE']=PASUSAGE\n",
    "            DATA[ID]['COVERAGE']=COVERAGE\n",
    "            DATA[ID]['TYPE']='POSITIVE'\n",
    "    \n",
    "with open('data/bl6.pAs.random.negative.txt','r') as f:\n",
    "    for line in f:\n",
    "        line=line.rstrip('\\n').split('\\t')\n",
    "        if line[0]!='pas_id':\n",
    "            ID=line[0]\n",
    "            STRAND=line[4]\n",
    "            SEQUENCE=line[7]\n",
    "            COVERAGE=[int(float(x)) for x in line[8::]]\n",
    "            COVERAGE=np.array(COVERAGE)\n",
    "            \n",
    "            DATA[ID]={}\n",
    "            DATA[ID]['STRAND']=STRAND\n",
    "            DATA[ID]['SEQUENCE']=SEQUENCE\n",
    "            DATA[ID]['COVERAGE']=COVERAGE\n",
    "            DATA[ID]['TYPE']='NEGATIVE'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "save_obj(DATA,'RAWDATA')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA=load_obj('RAWDATA')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Size:  43354\n",
      "Positive Data Size:  21677\n",
      "Negative Data Size:  21677\n"
     ]
    }
   ],
   "source": [
    "print('Data Size: ',len(DATA))\n",
    "print('Positive Data Size: ',len([x for x in DATA.keys() if DATA[x]['TYPE']=='POSITIVE']))\n",
    "print('Negative Data Size: ',len([x for x in DATA.keys() if DATA[x]['TYPE']=='NEGATIVE']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'PAS_TYPE': 'tandemUTR_motif',\n",
       " 'STRAND': '+',\n",
       " 'SEQUENCE': 'GCCCTACTTTAATATTAGTTATTTATGTAAAGTGTATTTTTCCCATGATGATACGTTATGTATATATAATGTACATAAAAGCCCTGATTATTGGTTTCTAATTGTATAGAATTATTTTTGCAATTTTGCTATGGGTGGTAATGAACTCTTGATTGAGCTACCGTATGTGCATTAAAATGTGCTTGCCATTAAGAGGTGGTG',\n",
       " 'PASUSAGE': 0.00615599132596,\n",
       " 'COVERAGE': array([285, 289, 281, 279, 270, 246, 241, 244, 245, 244, 244, 243, 244,\n",
       "        244, 238, 238, 240, 240, 231, 234, 234, 232, 232, 230, 230, 229,\n",
       "        234, 232, 232, 233, 232, 228, 227, 231, 242, 243, 247, 250, 248,\n",
       "        250, 248, 248, 246, 245, 225, 224, 221, 221, 225, 224, 217, 218,\n",
       "        217, 221, 223, 222, 224, 230, 227, 227, 226, 229, 232, 235, 239,\n",
       "        237, 235, 239, 242, 246, 243, 243, 242, 246, 245, 249, 249, 241,\n",
       "        241, 241, 240, 234, 234, 231, 213, 205, 192, 194, 198, 205, 205,\n",
       "        204, 203, 211, 214, 220, 221, 223, 224, 225, 224, 223, 215, 208,\n",
       "        207, 208, 209, 205, 209, 213, 216, 217, 219, 221, 221, 222, 222,\n",
       "        220, 225, 226, 228, 229, 234, 234, 239, 239, 235, 230, 235, 235,\n",
       "        241, 244, 246, 248, 250, 242, 241, 238, 242, 254, 264, 278, 297,\n",
       "        297, 297, 318, 316, 317, 317, 312, 311, 311, 310, 310, 308, 309,\n",
       "        321, 327, 321, 320, 319, 321, 317, 314, 314, 311, 315, 315, 313,\n",
       "        318, 322, 327, 368, 372, 377, 378, 374, 376, 376, 376, 376, 380,\n",
       "        378, 391, 402, 431, 443, 446, 450, 451, 446, 449, 452, 452, 447,\n",
       "        447, 441, 440, 437, 439, 440]),\n",
       " 'TYPE': 'POSITIVE'}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DATA['ENSMUSG00000056763.13:2']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. 1.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 1. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 1. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 0. 1.]] [285 289 281 279 270 246 241 244 245 244 244 243 244 244 238 238 240 240\n",
      " 231 234 234 232 232 230 230 229 234 232 232 233 232 228 227 231 242 243\n",
      " 247 250 248 250 248 248 246 245 225 224 221 221 225 224 217 218 217 221\n",
      " 223 222 224 230 227 227 226 229 232 235 239 237 235 239 242 246 243 243\n",
      " 242 246 245 249 249 241 241 241 240 234 234 231 213 205 192 194 198 205\n",
      " 205 204 203 211 214 220 221 223 224 225 224 223 215 208 207 208 209 205\n",
      " 209 213 216 217 219 221 221 222 222 220 225 226 228 229 234 234 239 239\n",
      " 235 230 235 235 241 244 246 248 250 242 241 238 242 254 264 278 297 297\n",
      " 297 318 316 317 317 312 311 311 310 310 308 309 321 327 321 320 319 321\n",
      " 317 314 314 311 315 315 313 318 322 327 368 372 377 378 374 376 376 376\n",
      " 376 380 378 391 402 431 443 446 450 451 446 449 452 452 447 447 441 440\n",
      " 437 439 440] POSITIVE\n"
     ]
    }
   ],
   "source": [
    "data=[]\n",
    "labels=[]\n",
    "\n",
    "ID='ENSMUSG00000056763.13:2'\n",
    "SEQUENCE=list(DATA[ID]['SEQUENCE'])\n",
    "COVERAGE=DATA[ID]['COVERAGE']\n",
    "TYPE=DATA[ID]['TYPE']\n",
    "\n",
    "alphabet = np.array(['A', 'T', 'C', 'G'])\n",
    "seq = np.array(SEQUENCE, dtype = '|U1').reshape(-1, 1)\n",
    "ONEHOT_SEQUENCE = (seq == alphabet).astype(np.float32)\n",
    "print(ONEHOT_SEQUENCE,COVERAGE,TYPE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "201 201\n"
     ]
    }
   ],
   "source": [
    "print(len(SEQUENCE),len(COVERAGE))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Size:  43354\n",
      "Positive Data Size:  21677\n",
      "Positive Data Size:  21677\n",
      "[INFO] dataloaders generated\n",
      "[INFO] start to train and tune\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0/19 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:19<00:00, 13.53it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.2065 ACC: 0.6324, Sensitivity:0.4915\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:02<00:00, 25.69it/s]\n",
      "/Users/joshuachou/anaconda3/lib/python3.7/site-packages/torch/serialization.py:256: UserWarning: Couldn't retrieve source code for container of type cnn_2s. It won't be checked for correctness upon loading.\n",
      "  \"type \" + obj.__name__ + \". It won't be checked \"\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 4.7798 ACC: 0.2737, Sensitivity:0.1108\n",
      "[INFO] save model after 0 epoch of crossvalition 0 to BL6_SEQUENCE_COVERAGE_0\n",
      "Epoch 1/19 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:22<00:00, 16.26it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1658 ACC: 0.7279, Sensitivity:0.4921\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:03<00:00, 21.03it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 181.6729 ACC: 0.4933, Sensitivity:0.0000\n",
      "Epoch 2/19 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:21<00:00, 15.20it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1528 ACC: 0.7547, Sensitivity:0.4921\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 37.58it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 137.5687 ACC: 0.4933, Sensitivity:0.0000\n",
      "Epoch 3/19 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 39%|███▉      | 107/271 [00:07<00:13, 12.20it/s]Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 242, in _feed\n",
      "    send_bytes(obj)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 200, in send_bytes\n",
      "    self._send_bytes(m[offset:offset + size])\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 404, in _send_bytes\n",
      "    self._send(header + buf)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 368, in _send\n",
      "    n = write(self._handle, buf)\n",
      "BrokenPipeError: [Errno 32] Broken pipe\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 242, in _feed\n",
      "    send_bytes(obj)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 200, in send_bytes\n",
      "    self._send_bytes(m[offset:offset + size])\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 242, in _feed\n",
      "    send_bytes(obj)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 200, in send_bytes\n",
      "    self._send_bytes(m[offset:offset + size])\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 404, in _send_bytes\n",
      "    self._send(header + buf)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 368, in _send\n",
      "    n = write(self._handle, buf)\n",
      "BrokenPipeError: [Errno 32] Broken pipe\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 404, in _send_bytes\n",
      "    self._send(header + buf)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 242, in _feed\n",
      "    send_bytes(obj)\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 200, in send_bytes\n",
      "    self._send_bytes(m[offset:offset + size])\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 404, in _send_bytes\n",
      "    self._send(header + buf)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 368, in _send\n",
      "    n = write(self._handle, buf)\n",
      "BrokenPipeError: [Errno 32] Broken pipe\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 368, in _send\n",
      "    n = write(self._handle, buf)\n",
      "BrokenPipeError: [Errno 32] Broken pipe\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 242, in _feed\n",
      "    send_bytes(obj)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 200, in send_bytes\n",
      "    self._send_bytes(m[offset:offset + size])\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 404, in _send_bytes\n",
      "    self._send(header + buf)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 368, in _send\n",
      "    n = write(self._handle, buf)\n",
      "BrokenPipeError: [Errno 32] Broken pipe\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 242, in _feed\n",
      "    send_bytes(obj)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 200, in send_bytes\n",
      "    self._send_bytes(m[offset:offset + size])\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 404, in _send_bytes\n",
      "    self._send(header + buf)\n",
      "  File \"/Users/joshuachou/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 368, in _send\n",
      "    n = write(self._handle, buf)\n",
      "BrokenPipeError: [Errno 32] Broken pipe\n",
      "\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-762e8ce9febf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    390\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mphase\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'train'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 391\u001b[0;31m                     \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    392\u001b[0m                     \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    393\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/torch/tensor.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient, retain_graph, create_graph)\u001b[0m\n\u001b[1;32m    105\u001b[0m                 \u001b[0mproducts\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0mDefaults\u001b[0m \u001b[0mto\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m         \"\"\"\n\u001b[0;32m--> 107\u001b[0;31m         \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mregister_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables)\u001b[0m\n\u001b[1;32m     91\u001b[0m     Variable._execution_engine.run_backward(\n\u001b[1;32m     92\u001b[0m         \u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad_tensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m         allow_unreachable=True)  # allow_unreachable flag\n\u001b[0m\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import numpy\n",
    "import pickle\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import DataLoader\n",
    "from torch.utils.data import Dataset\n",
    "import pandas as pd\n",
    "import os\n",
    "import time\n",
    "import copy\n",
    "from tqdm import tqdm\n",
    "from torch.autograd import Variable\n",
    "from sklearn import metrics\n",
    "import random\n",
    "import math\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "\n",
    "def save_obj(obj, name):\n",
    "    with open('data/'+ name + '.pkl', 'wb') as f:\n",
    "        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\n",
    "\n",
    "def load_obj(name):\n",
    "    with open('data/' + name + '.pkl', 'rb') as f:\n",
    "        return pickle.load(f)\n",
    "    \n",
    "DATA=load_obj('RAWDATA')\n",
    "print('Data Size: ',len(DATA))\n",
    "print('Positive Data Size: ',len([x for x in DATA.keys() if DATA[x]['TYPE']=='POSITIVE']))\n",
    "print('Negative Data Size: ',len([x for x in DATA.keys() if DATA[x]['TYPE']=='NEGATIVE']))\n",
    "    \n",
    "class cnn_2s(nn.Module):\n",
    "    \"\"\" Hyperparameters:\n",
    "        - conv out_channels (filter number)\n",
    "        - conv kernel_size (kernel size)\n",
    "        - conv stride\n",
    "        - conv padding\n",
    "        - conv dilation\n",
    "        - conv groups (separate the conv layers towards output)\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        super(cnn_2s, self).__init__()\n",
    "        \n",
    "        # x1\n",
    "        \n",
    "        self.conv1 = nn.Conv1d(in_channels=4, out_channels=16, \\\n",
    "            kernel_size=3, stride=1,padding=0, dilation=1,groups=1, bias=True)\n",
    "        self.conv2 = nn.Conv1d(in_channels=16, out_channels=32, \\\n",
    "            kernel_size=5, stride=1,padding=0, dilation=1,groups=1, bias=True)\n",
    "        self.conv3 = nn.Conv1d(in_channels=32, out_channels=64, \\\n",
    "            kernel_size=7, stride=1,padding=0, dilation=1, groups=1,bias=True)\n",
    "        self.relu1 = nn.ReLU(inplace=False)\n",
    "        self.relu2 = nn.ReLU(inplace=False)\n",
    "        self.relu3 = nn.ReLU(inplace=False)\n",
    "        self.maxpool1 = nn.MaxPool1d(kernel_size=4, stride=4)\n",
    "        self.maxpool2 = nn.MaxPool1d(kernel_size=4, stride=4)\n",
    "        self.dropout1 = nn.Dropout(p=0.2, inplace=False)\n",
    "        self.dropout2 = nn.Dropout(p=0.3, inplace=False)\n",
    "        self.dropout3 = nn.Dropout(p=0.5, inplace=False)\n",
    "        self.bn1 = nn.BatchNorm1d(self.conv1.out_channels) # conv1.out_channels\n",
    "        self.bn2 = nn.BatchNorm1d(self.conv2.out_channels) # conv2.out_channels\n",
    "        self.bn3 = nn.BatchNorm1d(self.conv3.out_channels) # conv3.out_channels\n",
    "        self.seqlength = 201\n",
    "        self.fc1_in_channels = (math.floor( \\\n",
    "                               (math.floor((self.seqlength - self.conv1.kernel_size[0] + 1) / (self.maxpool1.kernel_size * 1.0)) - \\\n",
    "                               self.conv2.kernel_size[0] + 1 ) / (self.maxpool2.kernel_size * 1.0)) - \\\n",
    "                               self.conv3.kernel_size[0] + 1) * self.conv3.out_channels\n",
    "        self.fc1 = nn.Linear(self.fc1_in_channels, 2)\n",
    "        \n",
    "        # x2\n",
    "        \n",
    "        self.conv2_1 = nn.Conv1d(in_channels=1, out_channels=16, \\\n",
    "            kernel_size=5, stride=1,padding=0, dilation=1,groups=1, bias=True)\n",
    "        self.relu2_1 = nn.ReLU(inplace=False)\n",
    "        self.maxpool2_1 = nn.MaxPool1d(kernel_size=4, stride=4)\n",
    "        self.dropout2_1 = nn.Dropout(p=0.2, inplace=False)\n",
    "        self.bn2_1 = nn.BatchNorm1d(self.conv2_1.out_channels) # conv1.out_channels\n",
    "        self.seqlength = 201\n",
    "        self.fc2_in_channels = (math.floor((self.seqlength - self.conv2_1.kernel_size[0] + 1) / (self.maxpool2_1.kernel_size * 1.0)) - \\\n",
    "                               self.conv2_1.kernel_size[0] + 1) * self.conv2_1.out_channels + 2 \n",
    "        self.fc2 = nn.Linear(784, 2)\n",
    "\n",
    "        # init weights\n",
    "        for m in self.modules():\n",
    "            if isinstance(m, nn.Conv1d):\n",
    "                n = m.kernel_size[0] * m.out_channels\n",
    "                m.weight.data.normal_(0, math.sqrt(2.0 / n))\n",
    "                # m.weight.data.normal_(0, kwargs['stdv'])\n",
    "\n",
    "            # if isinstance(m, nn.BatchNorm1d):\n",
    "            #     m.weight.data.fill_(1)\n",
    "            #     m.bias.data.zero_()\n",
    "\n",
    "    def forward(self,x1,x2):\n",
    "        \n",
    "        # x1\n",
    "        #print(x1,x1.shape)\n",
    "        x1 = self.conv1(x1)\n",
    "        x1 = self.bn1(x1)\n",
    "        x1 = self.maxpool1(x1)\n",
    "        x1 = self.relu1(x1)\n",
    "        x1 = self.dropout1(x1)\n",
    "\n",
    "        x1 = self.conv2(x1)\n",
    "        x1 = self.bn2(x1)\n",
    "        x1 = self.maxpool2(x1)\n",
    "        x1 = self.relu2(x1)\n",
    "        x1 = self.dropout2(x1)\n",
    "\n",
    "        x1 = self.conv3(x1)\n",
    "        x1 = self.relu3(x1)\n",
    "        x1 = self.dropout3(x1)\n",
    "\n",
    "        x1 = x1.view(-1, self.num_flat_features(x1))\n",
    "        \n",
    "        #print(x1,x1.shape)\n",
    "        x1 = self.fc1(x1) # 100\n",
    "        #print(x1,x1.shape)\n",
    "        \n",
    "        # x2\n",
    "        \n",
    "        #print(x2,x2.shape)\n",
    "        x2 = self.conv2_1(x2)\n",
    "        x2 = self.bn2_1(x2)\n",
    "        x2 = self.maxpool2_1(x2)\n",
    "        x2 = self.relu2_1(x2)\n",
    "        x2 = self.dropout2_1(x2)\n",
    "        #print(x2,x2.shape)\n",
    "        x2 = x2.view(-1, self.num_flat_features(x2))\n",
    "        x2 = self.fc2(x2)\n",
    "        #print(x2,x2.shape)\n",
    "        \n",
    "        # x1+x2\n",
    "        \n",
    "        x=torch.mul(x1,x2)\n",
    "        \n",
    "        # Attention: there is no need to add softmax layer since it is included in CrossEntropyLoss!\n",
    "        # x = self.sigmoid(x)\n",
    "        #x = self.softmax(x)\n",
    "        return x\n",
    "\n",
    "    def num_flat_features(self, x):\n",
    "        size = x.size()[1:]\n",
    "        num_features = 1\n",
    "        for s in size:\n",
    "            num_features *= s\n",
    "        return num_features\n",
    "\n",
    "\n",
    "class MyDataset(Dataset):\n",
    "\n",
    "    def __init__(self):\n",
    "        super(MyDataset,self).__init__()\n",
    "        \n",
    "        all_data=[]\n",
    "\n",
    "        for ID in DATA.keys():\n",
    "            SEQUENCE=list(DATA[ID]['SEQUENCE'])\n",
    "            COVERAGE=DATA[ID]['COVERAGE']\n",
    "            TYPE=DATA[ID]['TYPE']\n",
    "            alphabet = np.array(['A', 'T', 'C', 'G'])\n",
    "            seq = np.array(SEQUENCE, dtype = '|U1').reshape(-1, 1)\n",
    "            ONEHOT_SEQUENCE = (seq == alphabet).astype(np.float32)\n",
    "            ONEHOT_SEQUENCE=ONEHOT_SEQUENCE.T\n",
    "            \n",
    "            if TYPE=='POSITIVE':\n",
    "                all_data.append((ONEHOT_SEQUENCE,COVERAGE,1))\n",
    "            elif TYPE=='NEGATIVE':\n",
    "                all_data.append((ONEHOT_SEQUENCE,COVERAGE,0))\n",
    "\n",
    "        random.shuffle(all_data)\n",
    "        self.all_data=all_data\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.all_data)\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        x1,x2,label= self.all_data[index]\n",
    "        return x1,x2,label\n",
    "\n",
    "    def get_cross_data(self,index):\n",
    "        return np.array(self.all_data)[index]\n",
    "\n",
    "class CrossValidationDataset(Dataset):\n",
    "    \"\"\"total dataset.\"\"\"\n",
    "\n",
    "    def __init__(self, data):\n",
    "        self.data= data\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        x1,x2,label= self.data[index]\n",
    "        return x1,x2,label\n",
    "\n",
    "def partitions(number, k):\n",
    "    '''\n",
    "    Distribution of the folds\n",
    "    Args:\n",
    "        number: number of patients\n",
    "        k: folds number\n",
    "    '''\n",
    "    n_partitions = np.ones(k) * int(number/k)\n",
    "    n_partitions[0:(number % k)] += 1\n",
    "    return n_partitions\n",
    "\n",
    "def get_indices(n_splits = 3, subjects = 145):\n",
    "    '''\n",
    "    Indices of the set test\n",
    "    Args:\n",
    "        n_splits: folds number\n",
    "        subjects: number of patients\n",
    "    '''\n",
    "    l = partitions(subjects, n_splits)\n",
    "    fold_sizes = l\n",
    "    indices = np.arange(subjects).astype(int)\n",
    "    current = 0\n",
    "    for fold_size in fold_sizes:\n",
    "        start = current\n",
    "        stop =  current + fold_size\n",
    "        current = stop\n",
    "        yield(indices[int(start):int(stop)])\n",
    "\n",
    "def k_folds(n_splits = 3, subjects = 145):\n",
    "    '''\n",
    "    Generates folds for cross validation\n",
    "    Args:\n",
    "        n_splits: folds number\n",
    "        subjects: number of patients\n",
    "    '''\n",
    "    indices = np.arange(subjects).astype(int)\n",
    "    for test_idx in get_indices(n_splits, subjects):\n",
    "        train_idx = np.setdiff1d(indices, test_idx)\n",
    "        yield train_idx, test_idx\n",
    "\n",
    "\n",
    "# train_kwargs, cnn_1s\n",
    "train_kwargs = {}\n",
    "train_kwargs['tune_metric'] = 'auprc' # ['auroc', 'auprc', 'avgrank']\n",
    "train_kwargs['random_seed'] = 1337\n",
    "train_kwargs['optim'] = 'Adam' # ['SGD', 'Adam', 'Adagrad', 'RMSProp']\n",
    "train_kwargs['optim_param'] = {'betas': [0.9, 0.999], 'lr': 0.005, 'weight_decay': 1e-5}\n",
    "train_kwargs['scheduler'] = 'StepLR' # ['StepLR', 'MultiStepLR', 'ReduceLROnPlateau']\n",
    "train_kwargs['scheduler_param'] = {'step_size': 10, 'gamma': 0.1}\n",
    "train_kwargs['loss'] = 'CrossEntropyLoss' # ['CrossEntropyLoss', 'NLLLoss', 'MSELoss']\n",
    "train_kwargs['cudnn'] = False\n",
    "train_kwargs['imbalance'] = [1.0, 10.0]\n",
    "train_kwargs['batch_size'] = 128\n",
    "train_kwargs['encode_mode'] = 'N_2_zero'\n",
    "# train_kwargs_cnn_2s['num_epochs'] = 40\n",
    "train_kwargs['num_epochs'] = 50\n",
    "train_kwargs['shuffle'] = True\n",
    "train_kwargs['num_workers'] = 8\n",
    "\n",
    "filename_model='BL6_SEQUENCE_COVERAGE'\n",
    "filename_output='BL6_SEQUENCE_COVERAGE_OUTPUT'\n",
    "filename_log='BL6_SEQUENCE_COVERAGE_LOG'\n",
    "\n",
    "# read datasets\n",
    "all_dataset = MyDataset()\n",
    "\n",
    "\n",
    "print(\"[INFO] dataloaders generated\")\n",
    "print('[INFO] start to train and tune')\n",
    "print('-' * 10)\n",
    "\n",
    "\n",
    "num_sequences=all_dataset.__len__()\n",
    "crossvalidation_count=0\n",
    "\n",
    "count=0\n",
    "for train_idx, test_idx in k_folds(n_splits = 5,subjects=num_sequences):\n",
    "    if count!=0:\n",
    "        break\n",
    "    count+=1\n",
    "    random_seed = train_kwargs['random_seed']\n",
    "    optim = train_kwargs['optim'] # ['SGD', 'Adam', 'Adagrad', 'RMSProp']\n",
    "    optim_param = train_kwargs['optim_param'] # {'betas': [0.9, 0.999], 'lr': 0.001, 'weight_decay': 1e-5}\n",
    "    scheduler =  train_kwargs['scheduler'] # ['StepLR', 'MultiStepLR', 'ReduceLROnPlateau']\n",
    "    scheduler_param = train_kwargs['scheduler_param'] # {'step_size': 10, 'gamma': 0.1}\n",
    "    loss = train_kwargs['loss'] # ['CrossEntropyLoss', 'NLLLoss', 'MSELoss']\n",
    "    cudnn = train_kwargs['cudnn'] # [True, False]\n",
    "    imbalance = train_kwargs['imbalance'] # 10.0\n",
    "    batch_size = train_kwargs['batch_size'] # 16, .. 32\n",
    "    encode_mode = train_kwargs['encode_mode'] # 'N_2_zero', 'N_2_quarter'\n",
    "    num_epochs = train_kwargs['num_epochs'] # 40\n",
    "    shuffle = train_kwargs['shuffle']\n",
    "    num_workers = train_kwargs['num_workers']\n",
    "\n",
    "    gpu = torch.cuda.is_available()\n",
    "    torch.backends.cudnn.deterministic = True\n",
    "    torch.backends.cudnn.fastest = cudnn\n",
    "    torch.manual_seed(random_seed)\n",
    "\n",
    "    if gpu:\n",
    "        model = cnn_2s().cuda()\n",
    "        class_imbalance = torch.FloatTensor(imbalance).cuda()\n",
    "    else:\n",
    "        model = cnn_2s()\n",
    "        class_imbalance = torch.FloatTensor(imbalance)\n",
    "\n",
    "    # build optimizer\n",
    "    if optim == 'SGD':\n",
    "        optimizer = torch.optim.SGD(model.parameters(), **optim_param)\n",
    "    elif optim == 'Adam':\n",
    "        optimizer = torch.optim.Adam(model.parameters(), **optim_param)\n",
    "    elif optim == 'Adagrad':\n",
    "        optimizer = torch.optim.Adagrad(model.parameters(), **optim_param)\n",
    "    elif optim == 'RMSProp':\n",
    "        optimizer = torch.optim.RMSProp(model.parameters(), **optim_param)\n",
    "\n",
    "    # build scheduler\n",
    "    if scheduler == 'StepLR':\n",
    "        scheduler = torch.optim.lr_scheduler.StepLR(optimizer, **scheduler_param)\n",
    "    elif scheduler == 'MultiStepLR':\n",
    "        scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, **scheduler_param)\n",
    "    elif scheduler == 'ReduceLROnPlateau':\n",
    "        scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, **scheduler_param)\n",
    "\n",
    "    if loss == 'CrossEntropyLoss':\n",
    "        criterion = nn.CrossEntropyLoss(weight=class_imbalance)\n",
    "    elif loss == 'NLLLoss':\n",
    "        criterion = nn.NLLLoss(weight=class_imbalance)\n",
    "    elif loss == 'MSELoss':\n",
    "        criterion = nn.MSELoss(weight=class_imbalance)\n",
    "\n",
    "    #print(train_idx,test_idx)\n",
    "    cross_train_data=all_dataset.get_cross_data(train_idx)\n",
    "    dataset_train=CrossValidationDataset(data=cross_train_data)\n",
    "    cross_test_data=all_dataset.get_cross_data(test_idx)\n",
    "    dataset_test=CrossValidationDataset(data=cross_test_data)\n",
    "\n",
    "    trainloader = DataLoader(dataset_train, batch_size=batch_size, shuffle=shuffle, num_workers=num_workers)\n",
    "    valloader = DataLoader(dataset_test, batch_size=batch_size, shuffle=shuffle, num_workers=num_workers)\n",
    "\n",
    "    dataloaders = {'train': trainloader, 'val': valloader}\n",
    "\n",
    "    start_time = time.time()\n",
    "    best_model_wts = copy.deepcopy(model.state_dict())\n",
    "    best_acc = 0.0\n",
    "    best_sensitivity = 0.0\n",
    "    best_auroc = 0.0\n",
    "    best_auprc = 0.0\n",
    "    best_epoch = -1\n",
    "    best_labels_list = []\n",
    "    best_probs_list = []\n",
    "    epoch_loss_min = float('inf')\n",
    "    epoch_loss_prev = float('inf')\n",
    "    uptrend = 0 # num of continuous saturated epoches\n",
    "    max_uptrend = 10 # max num of continuous aturated epoches\n",
    "    early_stopping = False\n",
    "    performance_hist = pd.DataFrame(columns=[\"loss\", \"acc\", \"sensitivity\", \"auroc\", \"auprc\", \"epoch\", \"phase\"])\n",
    "\n",
    "\n",
    "    for epoch in range(num_epochs):\n",
    "\n",
    "        print('Epoch {}/{} CrossValidation {}'.format(epoch, num_epochs - 1,crossvalidation_count))\n",
    "        print('-' * 10)\n",
    "\n",
    "        dataset_sizes = {'train': 0.0, 'val':0.0} # set to float for later division\n",
    "\n",
    "        for phase in ['train', 'val']:\n",
    "\n",
    "            if phase == 'train':\n",
    "                scheduler.step()\n",
    "                model.train(True)\n",
    "            else:\n",
    "                model.train(False)\n",
    "\n",
    "            running_loss = 0.0\n",
    "            running_corrects = 0.0\n",
    "            running_tp = 0.0 # num of true positive cases\n",
    "            labels_list = []\n",
    "            probs_list = []\n",
    "\n",
    "            for data in tqdm(dataloaders[phase]):\n",
    "                #print(data)\n",
    "                inputs1,inputs2,labels = data\n",
    "                inputs2=torch.from_numpy(numpy.array([x.numpy().tolist() for x in inputs2]))\n",
    "                inputs2=inputs2.unsqueeze(1).float()\n",
    "                #print(inputs1,inputs2,labels)\n",
    "                if gpu:\n",
    "                    inputs1,inputs2,labels= Variable(inputs1.cuda()),Variable(inputs2.cuda()),Variable(labels.cuda())\n",
    "                else:\n",
    "                    inputs1,inputs2,labels = Variable(inputs1),Variable(inputs2),Variable(labels)\n",
    "\n",
    "                optimizer.zero_grad()\n",
    "                outputs = model(inputs1,inputs2)\n",
    "                _, preds = torch.max(outputs.data, 1)\n",
    "                probs = outputs.data[:, 1]\n",
    "                loss = criterion(outputs, labels)\n",
    "\n",
    "                labels_list.extend(labels.data)\n",
    "                probs_list.extend(probs)\n",
    "\n",
    "                if phase == 'train':\n",
    "                    loss.backward()\n",
    "                    optimizer.step()\n",
    "\n",
    "                running_loss += loss.item() * inputs1.size(0)\n",
    "                running_corrects += torch.sum(preds == labels.data)\n",
    "                running_tp += torch.sum((preds + labels.data) == 2)\n",
    "                dataset_sizes[phase] += len(labels)\n",
    "\n",
    "            epoch_loss = running_loss / dataset_sizes[phase]\n",
    "            epoch_acc = running_corrects.cpu().numpy() / dataset_sizes[phase]\n",
    "            epoch_sensitivity = running_tp.cpu().numpy() / dataset_sizes[phase]\n",
    "\n",
    "            performance = {'loss': epoch_loss, 'acc': epoch_acc, 'sensitivity': epoch_sensitivity, 'epoch': epoch, 'crossvalidation':crossvalidation_count,'phase': phase}\n",
    "            performance_hist = performance_hist.append(performance, ignore_index=True)\n",
    "            print('{} Loss: {:.4f} ACC: {:.4f}, Sensitivity:{:.4f}'.format(phase, epoch_loss, epoch_acc, epoch_sensitivity))\n",
    "\n",
    "\n",
    "            if phase == 'val':\n",
    "                if epoch_loss < epoch_loss_min:\n",
    "                    best_epoch = epoch\n",
    "                    best_crossvalidation=crossvalidation_count\n",
    "                    epoch_loss_min = epoch_loss\n",
    "                    best_acc = epoch_acc\n",
    "                    best_sensitivity = epoch_sensitivity\n",
    "                    torch.save(model, filename_model+\"_%s\"%str(crossvalidation_count))\n",
    "                    print('[INFO] save model after {} epoch of crossvalition {} to {}'.format(epoch,crossvalidation_count, filename_model+\"_%s\"%str(crossvalidation_count)))\n",
    "\n",
    "                if epoch_loss < epoch_loss_prev:\n",
    "                    uptrend = 0\n",
    "                    epoch_loss_prev = epoch_loss\n",
    "                else:\n",
    "                    uptrend += 1\n",
    "                    epoch_loss_prev = epoch_loss\n",
    "\n",
    "                if uptrend == max_uptrend:\n",
    "                    early_stopping = True\n",
    "                    print('[INFO] loss: {}, acc: {}, sensitivity: {}, AUROC: {}, AUPRC: {}, best_epoch: {}, total_epoch: {},crossvalidation: {}, phase: {}'.format(epoch_loss, best_acc, best_sensitivity, best_auroc, best_auprc, best_epoch, epoch,crossvalidation_count, phase))\n",
    "\n",
    "                if early_stopping:\n",
    "                    print('[INFO] early stop')\n",
    "                    break\n",
    "        if early_stopping:\n",
    "            break\n",
    "\n",
    "    time_elapsed = time.time()-start_time\n",
    "    print('Training completes in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))\n",
    "    performance_hist.to_csv(filename_log+\"_%s\"%str(crossvalidation_count), sep='\\t', index=False)\n",
    "    print('[INFO] performance_hist saved to {}'.format(filename_log))\n",
    "    print('[INFO] fine-tuned model saved to {}'.format(filename_model))\n",
    "\n",
    "    with open(filename_output+\"_%s\"%str(crossvalidation_count), 'w') as f:\n",
    "        f.write('Acc\\tSensitivity\\tAUROC\\tAUPRC\\n')\n",
    "        f.write('{:.4f}\\t{:.4f}\\n'.format(best_acc, best_sensitivity))\n",
    "        f.write('-'*10+'\\n')\n",
    "        f.write('train_kwargs: {}\\n'.format(train_kwargs))\n",
    "        f.write('model: {}\\n'.format(filename_model))\n",
    "        f.write('-'*10+'\\n')\n",
    "    print('[INFO] resnet_2s2a model training output (with settings) saved to {}'.format(filename_output))\n",
    "\n",
    "    crossvalidation_count+=1\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simple Version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Size:  43354\n",
      "Positive Data Size:  21677\n",
      "Negative Data Size:  21677\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] dataloaders generated\n",
      "[INFO] start to train and tune\n",
      "----------\n",
      "Epoch 0/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 58.15it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1828 ACC: 0.7010, Sensitivity:0.4923\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 58.39it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 101.8138 ACC: 0.5013, Sensitivity:0.0000\n",
      "[INFO] save model after 0 epoch of crossvalition 0 to BL6_SEQUENCE_COVERAGE_0\n",
      "Epoch 1/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 59.87it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1388 ACC: 0.7895, Sensitivity:0.4931\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 63.03it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 1.5369 ACC: 0.7623, Sensitivity:0.2697\n",
      "[INFO] save model after 1 epoch of crossvalition 0 to BL6_SEQUENCE_COVERAGE_0\n",
      "Epoch 2/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 55.86it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1258 ACC: 0.8131, Sensitivity:0.4936\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 55.92it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 6.1828 ACC: 0.6756, Sensitivity:0.1813\n",
      "Epoch 3/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.66it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1177 ACC: 0.8255, Sensitivity:0.4931\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 55.54it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 60.9021 ACC: 0.5013, Sensitivity:0.0000\n",
      "Epoch 4/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.29it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1144 ACC: 0.8304, Sensitivity:0.4939\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 56.50it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 22.0846 ACC: 0.5017, Sensitivity:0.0003\n",
      "Epoch 5/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.45it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1098 ACC: 0.8373, Sensitivity:0.4940\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 56.71it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 37.3011 ACC: 0.5014, Sensitivity:0.0001\n",
      "Epoch 6/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.07it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1095 ACC: 0.8396, Sensitivity:0.4940\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 55.59it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 43.2407 ACC: 0.5016, Sensitivity:0.0002\n",
      "Epoch 7/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.82it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1085 ACC: 0.8435, Sensitivity:0.4946\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.38it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 100.7014 ACC: 0.5014, Sensitivity:0.0001\n",
      "Epoch 8/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 55.89it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1075 ACC: 0.8436, Sensitivity:0.4943\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 54.68it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 87.4285 ACC: 0.5031, Sensitivity:0.0017\n",
      "Epoch 9/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 55.22it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.1056 ACC: 0.8479, Sensitivity:0.4945\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 54.60it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 54.6505 ACC: 0.5051, Sensitivity:0.0048\n",
      "Epoch 10/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.55it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0975 ACC: 0.8556, Sensitivity:0.4953\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 54.69it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.9660 ACC: 0.8177, Sensitivity:0.3258\n",
      "[INFO] save model after 10 epoch of crossvalition 0 to BL6_SEQUENCE_COVERAGE_0\n",
      "Epoch 11/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.31it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0939 ACC: 0.8600, Sensitivity:0.4949\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.97it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 2.3923 ACC: 0.7021, Sensitivity:0.2039\n",
      "Epoch 12/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.02it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0932 ACC: 0.8619, Sensitivity:0.4952\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 54.79it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1150 ACC: 0.8364, Sensitivity:0.4929\n",
      "[INFO] save model after 12 epoch of crossvalition 0 to BL6_SEQUENCE_COVERAGE_0\n",
      "Epoch 13/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 46.13it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0941 ACC: 0.8611, Sensitivity:0.4948\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 57.41it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.2131 ACC: 0.9164, Sensitivity:0.4607\n",
      "Epoch 14/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 56.39it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0932 ACC: 0.8643, Sensitivity:0.4953\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.04it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 3.7474 ACC: 0.6604, Sensitivity:0.1602\n",
      "Epoch 15/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.06it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0930 ACC: 0.8610, Sensitivity:0.4953\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.97it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 5.0344 ACC: 0.6435, Sensitivity:0.1446\n",
      "Epoch 16/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 59.58it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0932 ACC: 0.8649, Sensitivity:0.4954\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.33it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.5758 ACC: 0.8682, Sensitivity:0.3859\n",
      "Epoch 17/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.58it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0930 ACC: 0.8632, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.44it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 9.8485 ACC: 0.5295, Sensitivity:0.0286\n",
      "Epoch 18/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.90it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0919 ACC: 0.8658, Sensitivity:0.4952\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.35it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.6838 ACC: 0.8645, Sensitivity:0.3850\n",
      "Epoch 19/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.53it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0905 ACC: 0.8676, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.89it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 1.6000 ACC: 0.7469, Sensitivity:0.2498\n",
      "Epoch 20/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.44it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0888 ACC: 0.8709, Sensitivity:0.4962\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.09it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1114 ACC: 0.8541, Sensitivity:0.4915\n",
      "[INFO] save model after 20 epoch of crossvalition 0 to BL6_SEQUENCE_COVERAGE_0\n",
      "Epoch 21/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 62.83it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0898 ACC: 0.8682, Sensitivity:0.4959\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.04it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1127 ACC: 0.8587, Sensitivity:0.4911\n",
      "Epoch 22/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 58.59it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0894 ACC: 0.8682, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.48it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1162 ACC: 0.8715, Sensitivity:0.4892\n",
      "Epoch 23/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 63.61it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0891 ACC: 0.8688, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.77it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1150 ACC: 0.8754, Sensitivity:0.4889\n",
      "Epoch 24/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.56it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0893 ACC: 0.8693, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.75it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1153 ACC: 0.8766, Sensitivity:0.4885\n",
      "Epoch 25/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.25it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0899 ACC: 0.8689, Sensitivity:0.4952\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.06it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1134 ACC: 0.8422, Sensitivity:0.4933\n",
      "Epoch 26/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.46it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0889 ACC: 0.8697, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.86it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8605, Sensitivity:0.4908\n",
      "Epoch 27/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.58it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0914 ACC: 0.8700, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.43it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1169 ACC: 0.8276, Sensitivity:0.4939\n",
      "Epoch 28/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 59.35it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0897 ACC: 0.8678, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.73it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1310 ACC: 0.8983, Sensitivity:0.4836\n",
      "Epoch 29/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.43it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0902 ACC: 0.8675, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.28it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1125 ACC: 0.8558, Sensitivity:0.4915\n",
      "Epoch 30/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.51it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0906 ACC: 0.8642, Sensitivity:0.4960\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.39it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1121 ACC: 0.8586, Sensitivity:0.4911\n",
      "Epoch 31/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.45it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0908 ACC: 0.8652, Sensitivity:0.4954\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.85it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1118 ACC: 0.8603, Sensitivity:0.4908\n",
      "Epoch 32/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.33it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0898 ACC: 0.8674, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.94it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1118 ACC: 0.8620, Sensitivity:0.4908\n",
      "Epoch 33/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 59.08it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0896 ACC: 0.8675, Sensitivity:0.4950\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.51it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8590, Sensitivity:0.4911\n",
      "Epoch 34/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.36it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0913 ACC: 0.8677, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.34it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1118 ACC: 0.8610, Sensitivity:0.4908\n",
      "Epoch 35/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.40it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0901 ACC: 0.8666, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.07it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1119 ACC: 0.8614, Sensitivity:0.4909\n",
      "Epoch 36/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.12it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0894 ACC: 0.8675, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.74it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1123 ACC: 0.8610, Sensitivity:0.4909\n",
      "Epoch 37/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.53it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0892 ACC: 0.8698, Sensitivity:0.4952\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.62it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1122 ACC: 0.8616, Sensitivity:0.4907\n",
      "Epoch 38/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.54it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0896 ACC: 0.8694, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.41it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8641, Sensitivity:0.4905\n",
      "Epoch 39/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.79it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0895 ACC: 0.8707, Sensitivity:0.4953\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.64it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1121 ACC: 0.8583, Sensitivity:0.4913\n",
      "Epoch 40/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.42it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0890 ACC: 0.8690, Sensitivity:0.4956\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.35it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1115 ACC: 0.8599, Sensitivity:0.4911\n",
      "Epoch 41/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.26it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0910 ACC: 0.8660, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.40it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1118 ACC: 0.8607, Sensitivity:0.4911\n",
      "Epoch 42/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.54it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0892 ACC: 0.8692, Sensitivity:0.4959\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.71it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1118 ACC: 0.8602, Sensitivity:0.4911\n",
      "Epoch 43/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.22it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0899 ACC: 0.8668, Sensitivity:0.4956\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.64it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8635, Sensitivity:0.4906\n",
      "Epoch 44/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.49it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0895 ACC: 0.8687, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.31it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1116 ACC: 0.8596, Sensitivity:0.4911\n",
      "Epoch 45/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.95it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0899 ACC: 0.8684, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.38it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1121 ACC: 0.8613, Sensitivity:0.4911\n",
      "Epoch 46/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 61.95it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0905 ACC: 0.8683, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.17it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8592, Sensitivity:0.4911\n",
      "Epoch 47/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 54.00it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0898 ACC: 0.8687, Sensitivity:0.4961\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.69it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1126 ACC: 0.8617, Sensitivity:0.4907\n",
      "Epoch 48/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.59it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0890 ACC: 0.8681, Sensitivity:0.4960\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.06it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1120 ACC: 0.8595, Sensitivity:0.4911\n",
      "Epoch 49/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 61.42it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0892 ACC: 0.8685, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.34it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1126 ACC: 0.8607, Sensitivity:0.4911\n",
      "Epoch 50/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.71it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0893 ACC: 0.8681, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.76it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1127 ACC: 0.8611, Sensitivity:0.4911\n",
      "Epoch 51/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.54it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0890 ACC: 0.8704, Sensitivity:0.4960\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.97it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8603, Sensitivity:0.4911\n",
      "Epoch 52/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.23it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0889 ACC: 0.8683, Sensitivity:0.4959\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.97it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1127 ACC: 0.8620, Sensitivity:0.4908\n",
      "Epoch 53/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.42it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0894 ACC: 0.8696, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.99it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1118 ACC: 0.8609, Sensitivity:0.4911\n",
      "Epoch 54/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.41it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0881 ACC: 0.8688, Sensitivity:0.4960\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.06it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8626, Sensitivity:0.4907\n",
      "Epoch 55/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.47it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0906 ACC: 0.8684, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.30it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1128 ACC: 0.8629, Sensitivity:0.4907\n",
      "Epoch 56/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.28it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0905 ACC: 0.8686, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.97it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1118 ACC: 0.8620, Sensitivity:0.4907\n",
      "Epoch 57/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.48it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0889 ACC: 0.8681, Sensitivity:0.4961\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.41it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1115 ACC: 0.8605, Sensitivity:0.4911\n",
      "Epoch 58/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.53it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0886 ACC: 0.8690, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.04it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1119 ACC: 0.8602, Sensitivity:0.4911\n",
      "Epoch 59/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.81it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0889 ACC: 0.8694, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.53it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1117 ACC: 0.8593, Sensitivity:0.4911\n",
      "Epoch 60/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.38it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0901 ACC: 0.8678, Sensitivity:0.4953\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.19it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1123 ACC: 0.8628, Sensitivity:0.4906\n",
      "Epoch 61/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 54.08it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0916 ACC: 0.8664, Sensitivity:0.4951\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.87it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1121 ACC: 0.8618, Sensitivity:0.4909\n",
      "Epoch 62/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 54.17it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0902 ACC: 0.8680, Sensitivity:0.4956\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.26it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1123 ACC: 0.8620, Sensitivity:0.4906\n",
      "Epoch 63/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.10it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0902 ACC: 0.8689, Sensitivity:0.4954\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.71it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1127 ACC: 0.8626, Sensitivity:0.4907\n",
      "Epoch 64/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.40it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0885 ACC: 0.8695, Sensitivity:0.4963\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.55it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1127 ACC: 0.8618, Sensitivity:0.4908\n",
      "Epoch 65/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 54.08it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0895 ACC: 0.8680, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.54it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1119 ACC: 0.8615, Sensitivity:0.4908\n",
      "Epoch 66/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.91it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0903 ACC: 0.8684, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.77it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1119 ACC: 0.8608, Sensitivity:0.4909\n",
      "Epoch 67/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.57it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0881 ACC: 0.8681, Sensitivity:0.4960\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.18it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1120 ACC: 0.8606, Sensitivity:0.4911\n",
      "Epoch 68/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 59.50it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0902 ACC: 0.8678, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.46it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1121 ACC: 0.8601, Sensitivity:0.4912\n",
      "Epoch 69/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.41it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0898 ACC: 0.8686, Sensitivity:0.4960\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.89it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1120 ACC: 0.8608, Sensitivity:0.4911\n",
      "Epoch 70/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 53.40it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0895 ACC: 0.8701, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.77it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1117 ACC: 0.8608, Sensitivity:0.4908\n",
      "Epoch 71/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.29it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0895 ACC: 0.8680, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.26it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1121 ACC: 0.8624, Sensitivity:0.4907\n",
      "Epoch 72/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 59.27it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0888 ACC: 0.8696, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.29it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1117 ACC: 0.8614, Sensitivity:0.4909\n",
      "Epoch 73/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 54.10it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0889 ACC: 0.8665, Sensitivity:0.4953\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.53it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1126 ACC: 0.8613, Sensitivity:0.4911\n",
      "Epoch 74/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.28it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0884 ACC: 0.8698, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.31it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1112 ACC: 0.8596, Sensitivity:0.4911\n",
      "[INFO] save model after 74 epoch of crossvalition 0 to BL6_SEQUENCE_COVERAGE_0\n",
      "Epoch 75/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.56it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0897 ACC: 0.8667, Sensitivity:0.4953\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.99it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1120 ACC: 0.8631, Sensitivity:0.4907\n",
      "Epoch 76/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.62it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0894 ACC: 0.8662, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.46it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1123 ACC: 0.8611, Sensitivity:0.4911\n",
      "Epoch 77/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.26it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0902 ACC: 0.8687, Sensitivity:0.4953\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.18it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1122 ACC: 0.8618, Sensitivity:0.4907\n",
      "Epoch 78/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.77it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0895 ACC: 0.8660, Sensitivity:0.4957\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.82it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1115 ACC: 0.8607, Sensitivity:0.4911\n",
      "Epoch 79/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 55.21it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0904 ACC: 0.8669, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.08it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8607, Sensitivity:0.4909\n",
      "Epoch 80/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.54it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0895 ACC: 0.8676, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.08it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1122 ACC: 0.8624, Sensitivity:0.4908\n",
      "Epoch 81/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.63it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0886 ACC: 0.8708, Sensitivity:0.4963\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.47it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8613, Sensitivity:0.4909\n",
      "Epoch 82/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.99it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0900 ACC: 0.8668, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.31it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1118 ACC: 0.8608, Sensitivity:0.4911\n",
      "Epoch 83/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.48it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0870 ACC: 0.8687, Sensitivity:0.4964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.71it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1126 ACC: 0.8626, Sensitivity:0.4907\n",
      "Epoch 84/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.49it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0894 ACC: 0.8689, Sensitivity:0.4955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 53.38it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1126 ACC: 0.8581, Sensitivity:0.4911\n",
      "Epoch 85/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 62.42it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0901 ACC: 0.8684, Sensitivity:0.4953\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 51.65it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1124 ACC: 0.8618, Sensitivity:0.4909\n",
      "Epoch 86/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:04<00:00, 54.57it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0900 ACC: 0.8671, Sensitivity:0.4954\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 68/68 [00:01<00:00, 52.23it/s]\n",
      "  0%|          | 0/271 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val Loss: 0.1128 ACC: 0.8607, Sensitivity:0.4911\n",
      "Epoch 87/99 CrossValidation 0\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 271/271 [00:05<00:00, 52.59it/s]\n",
      "  0%|          | 0/68 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train Loss: 0.0893 ACC: 0.8685, Sensitivity:0.4958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  1%|▏         | 1/68 [00:00<00:33,  1.98it/s]Process Process-1665:\n",
      "Process Process-1667:\n",
      "\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-24-6a66fbd4b083>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    358\u001b[0m                 \u001b[0;31m#print(data)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    359\u001b[0m                 \u001b[0minputs1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minputs2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 360\u001b[0;31m                 \u001b[0minputs2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0minputs2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    361\u001b[0m                 \u001b[0minputs2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m                 \u001b[0;31m#print(inputs1,inputs2,labels)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-24-6a66fbd4b083>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    358\u001b[0m                 \u001b[0;31m#print(data)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    359\u001b[0m                 \u001b[0minputs1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minputs2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 360\u001b[0;31m                 \u001b[0minputs2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0minputs2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    361\u001b[0m                 \u001b[0minputs2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m                 \u001b[0;31m#print(inputs1,inputs2,labels)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process Process-1666:\n",
      "Process Process-1672:\n",
      "Process Process-1669:\n",
      "Process Process-1668:\n",
      "Process Process-1671:\n",
      "Process Process-1670:\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 93, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 93, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 93, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 93, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 42, in _worker_loop\n",
      "    samples = collate_fn([dataset[i] for i in batch_indices])\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 93, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 36, in _worker_loop\n",
      "    r = index_queue.get()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 93, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 93, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 36, in _worker_loop\n",
      "    r = index_queue.get()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 36, in _worker_loop\n",
      "    r = index_queue.get()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/process.py\", line 93, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 119, in default_collate\n",
      "    return [default_collate(samples) for samples in transposed]\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 36, in _worker_loop\n",
      "    r = index_queue.get()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/queues.py\", line 334, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 36, in _worker_loop\n",
      "    r = index_queue.get()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 36, in _worker_loop\n",
      "    r = index_queue.get()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/queues.py\", line 334, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/queues.py\", line 334, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 36, in _worker_loop\n",
      "    r = index_queue.get()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 119, in <listcomp>\n",
      "    return [default_collate(samples) for samples in transposed]\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/queues.py\", line 334, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/synchronize.py\", line 95, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/queues.py\", line 334, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/queues.py\", line 334, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/synchronize.py\", line 95, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/synchronize.py\", line 95, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/queues.py\", line 335, in get\n",
      "    res = self._reader.recv_bytes()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 105, in default_collate\n",
      "    return torch.stack([torch.from_numpy(b) for b in batch], 0)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/synchronize.py\", line 95, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/synchronize.py\", line 95, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/synchronize.py\", line 95, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 105, in <listcomp>\n",
      "    return torch.stack([torch.from_numpy(b) for b in batch], 0)\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/connection.py\", line 216, in recv_bytes\n",
      "    buf = self._recv_bytes(maxlength)\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/connection.py\", line 407, in _recv_bytes\n",
      "    buf = self._recv(4)\n",
      "KeyboardInterrupt\n",
      "  File \"/home/joshua/anaconda3/envs/p36torch/lib/python3.6/multiprocessing/connection.py\", line 379, in _recv\n",
      "    chunk = read(handle, remaining)\n",
      "KeyboardInterrupt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import numpy\n",
    "import pickle\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import DataLoader\n",
    "from torch.utils.data import Dataset\n",
    "import pandas as pd\n",
    "import os\n",
    "import time\n",
    "import copy\n",
    "from tqdm import tqdm\n",
    "from torch.autograd import Variable\n",
    "from sklearn import metrics\n",
    "import random\n",
    "import math\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "\n",
    "# train_kwargs, cnn_1s\n",
    "train_kwargs = {}\n",
    "train_kwargs['tune_metric'] = 'auprc' # ['auroc', 'auprc', 'avgrank']\n",
    "train_kwargs['random_seed'] = 1337\n",
    "train_kwargs['optim'] = 'Adam' # ['SGD', 'Adam', 'Adagrad', 'RMSProp']\n",
    "train_kwargs['optim_param'] = {'betas': [0.9, 0.999], 'lr': 0.005, 'weight_decay': 1e-5}\n",
    "train_kwargs['scheduler'] = 'StepLR' # ['StepLR', 'MultiStepLR', 'ReduceLROnPlateau']\n",
    "train_kwargs['scheduler_param'] = {'step_size': 10, 'gamma': 0.1}\n",
    "train_kwargs['loss'] = 'CrossEntropyLoss' # ['CrossEntropyLoss', 'NLLLoss', 'MSELoss']\n",
    "train_kwargs['cudnn'] = True\n",
    "train_kwargs['imbalance'] = [1.0, 10.0]\n",
    "train_kwargs['batch_size'] = 128\n",
    "train_kwargs['encode_mode'] = 'N_2_zero'\n",
    "# train_kwargs_cnn_2s['num_epochs'] = 40\n",
    "train_kwargs['num_epochs'] = 100\n",
    "train_kwargs['shuffle'] = True\n",
    "train_kwargs['num_workers'] = 8\n",
    "\n",
    "filename_model='BL6_SEQUENCE_COVERAGE'\n",
    "filename_output='BL6_SEQUENCE_COVERAGE_OUTPUT'\n",
    "filename_log='BL6_SEQUENCE_COVERAGE_LOG'\n",
    "PATCH_SIZE=10\n",
    "SEQ_LENGTH=201\n",
    "\n",
    "\n",
    "PATCH=[[0.25,0.25,0.25,0.25] for i in range(PATCH_SIZE)]\n",
    "\n",
    "def save_obj(obj, name):\n",
    "    with open('data/'+ name + '.pkl', 'wb') as f:\n",
    "        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\n",
    "\n",
    "def load_obj(name):\n",
    "    with open('data/' + name + '.pkl', 'rb') as f:\n",
    "        return pickle.load(f)\n",
    "\n",
    "DATA=load_obj('RAWDATA')\n",
    "print('Data Size: ',len(DATA))\n",
    "print('Positive Data Size: ',len([x for x in DATA.keys() if DATA[x]['TYPE']=='POSITIVE']))\n",
    "print('Negative Data Size: ',len([x for x in DATA.keys() if DATA[x]['TYPE']=='NEGATIVE']))\n",
    "\n",
    "class cnn_2s(nn.Module):\n",
    "    \"\"\" Hyperparameters:\n",
    "        - conv out_channels (filter number)\n",
    "        - conv kernel_size (kernel size)\n",
    "        - conv stride\n",
    "        - conv padding\n",
    "        - conv dilation\n",
    "        - conv groups (separate the conv layers towards output)\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        super(cnn_2s, self).__init__()\n",
    "\n",
    "        # x1\n",
    "\n",
    "        self.conv1 = nn.Conv1d(in_channels=4, out_channels=16, \\\n",
    "            kernel_size=3, stride=1,padding=0, dilation=1,groups=1, bias=True)\n",
    "        self.relu1 = nn.ReLU(inplace=False)\n",
    "        self.maxpool1 = nn.MaxPool1d(kernel_size=4, stride=4)\n",
    "        self.dropout1 = nn.Dropout(p=0.2, inplace=False)\n",
    "        self.bn1 = nn.BatchNorm1d(self.conv1.out_channels) # conv1.out_channels\n",
    "        self.fc1 = nn.Linear(864, 2)\n",
    "\n",
    "        # x2\n",
    "\n",
    "        \n",
    "        self.conv2_1 = nn.Conv1d(in_channels=1, out_channels=16, \\\n",
    "            kernel_size=5, stride=1,padding=0, dilation=1,groups=1, bias=True)\n",
    "        self.relu2_1 = nn.ReLU(inplace=False)\n",
    "        self.maxpool2_1 = nn.MaxPool1d(kernel_size=4, stride=4)\n",
    "        self.dropout2_1 = nn.Dropout(p=0.2, inplace=False)\n",
    "        self.bn2_1 = nn.BatchNorm1d(self.conv2_1.out_channels) # conv1.out_channels\n",
    "        self.fc2 = nn.Linear(784, 2)\n",
    "\n",
    "        # init weights\n",
    "        for m in self.modules():\n",
    "            if isinstance(m, nn.Conv1d):\n",
    "                n = m.kernel_size[0] * m.out_channels\n",
    "                m.weight.data.normal_(0, math.sqrt(2.0 / n))\n",
    "                # m.weight.data.normal_(0, kwargs['stdv'])\n",
    "\n",
    "            # if isinstance(m, nn.BatchNorm1d):\n",
    "            #     m.weight.data.fill_(1)\n",
    "            #     m.bias.data.zero_()\n",
    "\n",
    "    def forward(self,x1,x2):\n",
    "\n",
    "        # x1\n",
    "        #print(x1,x1.shape)\n",
    "        x1 = self.conv1(x1)\n",
    "        x1 = self.bn1(x1)\n",
    "        x1 = self.maxpool1(x1)\n",
    "        x1 = self.relu1(x1)\n",
    "        x1 = self.dropout1(x1)\n",
    "\n",
    "        x1 = x1.view(-1, self.num_flat_features(x1))\n",
    "\n",
    "        #print(x1,x1.shape)\n",
    "        x1 = self.fc1(x1)\n",
    "        #print(x1,x1.shape)\n",
    "\n",
    "        # x2\n",
    "\n",
    "        #print(x2,x2.shape)\n",
    "        x2 = self.conv2_1(x2)\n",
    "        x2 = self.bn2_1(x2)\n",
    "        x2 = self.maxpool2_1(x2)\n",
    "        x2 = self.relu2_1(x2)\n",
    "        x2 = self.dropout2_1(x2)\n",
    "        #print(x2,x2.shape)\n",
    "        x2 = x2.view(-1, self.num_flat_features(x2))\n",
    "        x2 = self.fc2(x2)\n",
    "        #print(x2,x2.shape)\n",
    "\n",
    "        # x1+x2\n",
    "\n",
    "        x=torch.mul(x1,x2)\n",
    "\n",
    "        # Attention: there is no need to add softmax layer since it is included in CrossEntropyLoss!\n",
    "        # x = self.sigmoid(x)\n",
    "        #x = self.softmax(x)\n",
    "        return x\n",
    "\n",
    "    def num_flat_features(self, x):\n",
    "        size = x.size()[1:]\n",
    "        num_features = 1\n",
    "        for s in size:\n",
    "            num_features *= s\n",
    "        return num_features\n",
    "\n",
    "\n",
    "class MyDataset(Dataset):\n",
    "\n",
    "    def __init__(self):\n",
    "        super(MyDataset,self).__init__()\n",
    "\n",
    "        all_data=[]\n",
    "\n",
    "        for ID in DATA.keys():\n",
    "            SEQUENCE=list(DATA[ID]['SEQUENCE'])\n",
    "            COVERAGE=DATA[ID]['COVERAGE']\n",
    "            TYPE=DATA[ID]['TYPE']\n",
    "            alphabet = np.array(['A', 'T', 'C', 'G'])\n",
    "            seq = np.array(SEQUENCE, dtype = '|U1').reshape(-1, 1)\n",
    "            ONEHOT_SEQUENCE = (seq == alphabet).astype(np.float32)\n",
    "            ONEHOT_SEQUENCE = np.vstack((np.vstack((PATCH,ONEHOT_SEQUENCE)),PATCH))\n",
    "            #print(ONEHOT_SEQUENCE)\n",
    "            ONEHOT_SEQUENCE=ONEHOT_SEQUENCE.T.astype(np.float32)\n",
    "\n",
    "            if TYPE=='POSITIVE':\n",
    "                all_data.append((ONEHOT_SEQUENCE,COVERAGE,1))\n",
    "            elif TYPE=='NEGATIVE':\n",
    "                all_data.append((ONEHOT_SEQUENCE,COVERAGE,0))\n",
    "\n",
    "        random.shuffle(all_data)\n",
    "        self.all_data=all_data\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.all_data)\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        x1,x2,label= self.all_data[index]\n",
    "        return x1,x2,label\n",
    "\n",
    "    def get_cross_data(self,index):\n",
    "        return np.array(self.all_data)[index]\n",
    "\n",
    "class CrossValidationDataset(Dataset):\n",
    "    \"\"\"total dataset.\"\"\"\n",
    "\n",
    "    def __init__(self, data):\n",
    "        self.data= data\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        x1,x2,label= self.data[index]\n",
    "        return x1,x2,label\n",
    "\n",
    "def partitions(number, k):\n",
    "    '''\n",
    "    Distribution of the folds\n",
    "    Args:\n",
    "        number: number of patients\n",
    "        k: folds number\n",
    "    '''\n",
    "    n_partitions = np.ones(k) * int(number/k)\n",
    "    n_partitions[0:(number % k)] += 1\n",
    "    return n_partitions\n",
    "\n",
    "def get_indices(n_splits = 3, subjects = 145):\n",
    "    '''\n",
    "    Indices of the set test\n",
    "    Args:\n",
    "        n_splits: folds number\n",
    "        subjects: number of patients\n",
    "    '''\n",
    "    l = partitions(subjects, n_splits)\n",
    "    fold_sizes = l\n",
    "    indices = np.arange(subjects).astype(int)\n",
    "    current = 0\n",
    "    for fold_size in fold_sizes:\n",
    "        start = current\n",
    "        stop =  current + fold_size\n",
    "        current = stop\n",
    "        yield(indices[int(start):int(stop)])\n",
    "\n",
    "def k_folds(n_splits = 3, subjects = 145):\n",
    "    '''\n",
    "    Generates folds for cross validation\n",
    "    Args:\n",
    "        n_splits: folds number\n",
    "        subjects: number of patients\n",
    "    '''\n",
    "    indices = np.arange(subjects).astype(int)\n",
    "    for test_idx in get_indices(n_splits, subjects):\n",
    "        train_idx = np.setdiff1d(indices, test_idx)\n",
    "        yield train_idx, test_idx\n",
    "\n",
    "# read datasets\n",
    "all_dataset = MyDataset()\n",
    "\n",
    "\n",
    "print(\"[INFO] dataloaders generated\")\n",
    "print('[INFO] start to train and tune')\n",
    "print('-' * 10)\n",
    "\n",
    "\n",
    "num_sequences=all_dataset.__len__()\n",
    "crossvalidation_count=0\n",
    "\n",
    "count=0\n",
    "for train_idx, test_idx in k_folds(n_splits = 5,subjects=num_sequences):\n",
    "    if count!=0:\n",
    "        break\n",
    "    count+=1\n",
    "    random_seed = train_kwargs['random_seed']\n",
    "    optim = train_kwargs['optim'] # ['SGD', 'Adam', 'Adagrad', 'RMSProp']\n",
    "    optim_param = train_kwargs['optim_param'] # {'betas': [0.9, 0.999], 'lr': 0.001, 'weight_decay': 1e-5}\n",
    "    scheduler =  train_kwargs['scheduler'] # ['StepLR', 'MultiStepLR', 'ReduceLROnPlateau']\n",
    "    scheduler_param = train_kwargs['scheduler_param'] # {'step_size': 10, 'gamma': 0.1}\n",
    "    loss = train_kwargs['loss'] # ['CrossEntropyLoss', 'NLLLoss', 'MSELoss']\n",
    "    cudnn = train_kwargs['cudnn'] # [True, False]\n",
    "    imbalance = train_kwargs['imbalance'] # 10.0\n",
    "    batch_size = train_kwargs['batch_size'] # 16, .. 32\n",
    "    encode_mode = train_kwargs['encode_mode'] # 'N_2_zero', 'N_2_quarter'\n",
    "    num_epochs = train_kwargs['num_epochs'] # 40\n",
    "    shuffle = train_kwargs['shuffle']\n",
    "    num_workers = train_kwargs['num_workers']\n",
    "\n",
    "    gpu = torch.cuda.is_available()\n",
    "    #gpu = False\n",
    "    torch.backends.cudnn.deterministic = True\n",
    "    torch.backends.cudnn.fastest = cudnn\n",
    "    torch.manual_seed(random_seed)\n",
    "\n",
    "    if gpu:\n",
    "        model = cnn_2s().cuda()\n",
    "        class_imbalance = torch.FloatTensor(imbalance).cuda()\n",
    "    else:\n",
    "        model = cnn_2s()\n",
    "        class_imbalance = torch.FloatTensor(imbalance)\n",
    "\n",
    "    # build optimizer\n",
    "    if optim == 'SGD':\n",
    "        optimizer = torch.optim.SGD(model.parameters(), **optim_param)\n",
    "    elif optim == 'Adam':\n",
    "        optimizer = torch.optim.Adam(model.parameters(), **optim_param)\n",
    "    elif optim == 'Adagrad':\n",
    "        optimizer = torch.optim.Adagrad(model.parameters(), **optim_param)\n",
    "    elif optim == 'RMSProp':\n",
    "        optimizer = torch.optim.RMSProp(model.parameters(), **optim_param)\n",
    "\n",
    "    # build scheduler\n",
    "    if scheduler == 'StepLR':\n",
    "        scheduler = torch.optim.lr_scheduler.StepLR(optimizer, **scheduler_param)\n",
    "    elif scheduler == 'MultiStepLR':\n",
    "        scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, **scheduler_param)\n",
    "    elif scheduler == 'ReduceLROnPlateau':\n",
    "        scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, **scheduler_param)\n",
    "\n",
    "    if loss == 'CrossEntropyLoss':\n",
    "        criterion = nn.CrossEntropyLoss(weight=class_imbalance)\n",
    "    elif loss == 'NLLLoss':\n",
    "        criterion = nn.NLLLoss(weight=class_imbalance)\n",
    "    elif loss == 'MSELoss':\n",
    "        criterion = nn.MSELoss(weight=class_imbalance)\n",
    "\n",
    "    #print(train_idx,test_idx)\n",
    "    cross_train_data=all_dataset.get_cross_data(train_idx)\n",
    "    dataset_train=CrossValidationDataset(data=cross_train_data)\n",
    "    cross_test_data=all_dataset.get_cross_data(test_idx)\n",
    "    dataset_test=CrossValidationDataset(data=cross_test_data)\n",
    "\n",
    "    trainloader = DataLoader(dataset_train, batch_size=batch_size, shuffle=shuffle, num_workers=num_workers)\n",
    "    valloader = DataLoader(dataset_test, batch_size=batch_size, shuffle=shuffle, num_workers=num_workers)\n",
    "\n",
    "    dataloaders = {'train': trainloader, 'val': valloader}\n",
    "\n",
    "    start_time = time.time()\n",
    "    best_model_wts = copy.deepcopy(model.state_dict())\n",
    "    best_acc = 0.0\n",
    "    best_sensitivity = 0.0\n",
    "    best_auroc = 0.0\n",
    "    best_auprc = 0.0\n",
    "    best_epoch = -1\n",
    "    best_labels_list = []\n",
    "    best_probs_list = []\n",
    "    epoch_loss_min = float('inf')\n",
    "    epoch_loss_prev = float('inf')\n",
    "    uptrend = 0 # num of continuous saturated epoches\n",
    "    max_uptrend = 10 # max num of continuous aturated epoches\n",
    "    early_stopping = False\n",
    "    performance_hist = pd.DataFrame(columns=[\"loss\", \"acc\", \"sensitivity\", \"auroc\", \"auprc\", \"epoch\", \"phase\"])\n",
    "\n",
    "\n",
    "    for epoch in range(num_epochs):\n",
    "\n",
    "        print('Epoch {}/{} CrossValidation {}'.format(epoch, num_epochs - 1,crossvalidation_count))\n",
    "        print('-' * 10)\n",
    "\n",
    "        dataset_sizes = {'train': 0.0, 'val':0.0} # set to float for later division\n",
    "\n",
    "        for phase in ['train', 'val']:\n",
    "\n",
    "            if phase == 'train':\n",
    "                scheduler.step()\n",
    "                model.train(True)\n",
    "            else:\n",
    "                model.train(False)\n",
    "\n",
    "            running_loss = 0.0\n",
    "            running_corrects = 0.0\n",
    "            running_tp = 0.0 # num of true positive cases\n",
    "            labels_list = []\n",
    "            probs_list = []\n",
    "\n",
    "            for data in tqdm(dataloaders[phase]):\n",
    "                #print(data)\n",
    "                inputs1,inputs2,labels = data\n",
    "                inputs2=torch.from_numpy(numpy.array([x.numpy().tolist() for x in inputs2]))\n",
    "                inputs2=inputs2.unsqueeze(1).float()\n",
    "                #print(inputs1,inputs2,labels)\n",
    "                if gpu:\n",
    "                    inputs1,inputs2,labels= Variable(inputs1.cuda()),Variable(inputs2.cuda()),Variable(labels.cuda())\n",
    "                else:\n",
    "                    inputs1,inputs2,labels = Variable(inputs1),Variable(inputs2),Variable(labels)\n",
    "\n",
    "                optimizer.zero_grad()\n",
    "                outputs = model(inputs1,inputs2)\n",
    "                _, preds = torch.max(outputs.data, 1)\n",
    "                probs = outputs.data[:, 1]\n",
    "                loss = criterion(outputs, labels)\n",
    "\n",
    "                labels_list.extend(labels.data)\n",
    "                probs_list.extend(probs)\n",
    "\n",
    "                if phase == 'train':\n",
    "                    loss.backward()\n",
    "                    optimizer.step()\n",
    "\n",
    "                running_loss += loss * inputs1.size(0)\n",
    "                running_corrects += torch.sum(preds == labels.data)\n",
    "                running_tp += torch.sum((preds + labels.data) == 2)\n",
    "                dataset_sizes[phase] += len(labels)\n",
    "\n",
    "            epoch_loss = float(running_loss / dataset_sizes[phase])\n",
    "            epoch_acc = float(running_corrects/ dataset_sizes[phase])\n",
    "            epoch_sensitivity = float(running_tp / dataset_sizes[phase])\n",
    "\n",
    "            performance = {'loss': epoch_loss, 'acc': epoch_acc, 'sensitivity': epoch_sensitivity, 'epoch': epoch, 'crossvalidation':crossvalidation_count,'phase': phase}\n",
    "            performance_hist = performance_hist.append(performance, ignore_index=True)\n",
    "            print('{} Loss: {:.4f} ACC: {:.4f}, Sensitivity:{:.4f}'.format(phase, epoch_loss, epoch_acc, epoch_sensitivity))\n",
    "\n",
    "\n",
    "            if phase == 'val':\n",
    "                if epoch_loss < epoch_loss_min:\n",
    "                    best_epoch = epoch\n",
    "                    best_crossvalidation=crossvalidation_count\n",
    "                    epoch_loss_min = epoch_loss\n",
    "                    best_acc = epoch_acc\n",
    "                    best_sensitivity = epoch_sensitivity\n",
    "                    torch.save(model, filename_model+\"_%s\"%str(crossvalidation_count))\n",
    "                    print('[INFO] save model after {} epoch of crossvalition {} to {}'.format(epoch,crossvalidation_count, filename_model+\"_%s\"%str(crossvalidation_count)))\n",
    "\n",
    "                if epoch_loss < epoch_loss_prev:\n",
    "                    uptrend = 0\n",
    "                    epoch_loss_prev = epoch_loss\n",
    "                else:\n",
    "                    uptrend += 1\n",
    "                    epoch_loss_prev = epoch_loss\n",
    "\n",
    "                if uptrend == max_uptrend:\n",
    "                    early_stopping = True\n",
    "                    print('[INFO] loss: {}, acc: {}, sensitivity: {}, AUROC: {}, AUPRC: {}, best_epoch: {}, total_epoch: {},crossvalidation: {}, phase: {}'.format(epoch_loss, best_acc, best_sensitivity, best_auroc, best_auprc, best_epoch, epoch,crossvalidation_count, phase))\n",
    "\n",
    "                if early_stopping:\n",
    "                    print('[INFO] early stop')\n",
    "                    break\n",
    "        if early_stopping:\n",
    "            break\n",
    "\n",
    "    time_elapsed = time.time()-start_time\n",
    "    print('Training completes in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))\n",
    "    performance_hist.to_csv(filename_log+\"_%s\"%str(crossvalidation_count), sep='\\t', index=False)\n",
    "    print('[INFO] performance_hist saved to {}'.format(filename_log))\n",
    "    print('[INFO] fine-tuned model saved to {}'.format(filename_model))\n",
    "\n",
    "    with open(filename_output+\"_%s\"%str(crossvalidation_count), 'w') as f:\n",
    "        f.write('Acc\\tSensitivity\\tAUROC\\tAUPRC\\n')\n",
    "        f.write('{:.4f}\\t{:.4f}\\n'.format(best_acc, best_sensitivity))\n",
    "        f.write('-'*10+'\\n')\n",
    "        f.write('train_kwargs: {}\\n'.format(train_kwargs))\n",
    "        f.write('model: {}\\n'.format(filename_model))\n",
    "        f.write('-'*10+'\\n')\n",
    "    print('[INFO] resnet_2s2a model training output (with settings) saved to {}'.format(filename_output))\n",
    "\n",
    "    crossvalidation_count+=1\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot Acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model='model7'\n",
    "log=pd.read_csv('output/'+model+'_log_0',sep='\\t')\n",
    "\n",
    "plt.figure(figsize=[10,6])\n",
    "plt.plot(log[log.phase=='train'].epoch,log[log.phase=='train'].acc,label='Train')\n",
    "plt.plot(log[log.phase=='train'].epoch,log[log.phase=='val'].acc,label='Test')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Acc')\n",
    "plt.xticks(log[log.phase=='train'].epoch,rotation=90)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "plt.savefig('output/%s.jpg'%model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Acc</th>\n",
       "      <th>Sensitivity</th>\n",
       "      <th>AUROC</th>\n",
       "      <th>AUPRC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.8878</td>\n",
       "      <td>0.4966</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>----------</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>train_kwargs: {'tune_metric': 'auprc', 'random...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>model: model6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>----------</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Acc  Sensitivity  AUROC  \\\n",
       "0                                             0.8878       0.4966    NaN   \n",
       "1                                         ----------          NaN    NaN   \n",
       "2  train_kwargs: {'tune_metric': 'auprc', 'random...          NaN    NaN   \n",
       "3                                      model: model6          NaN    NaN   \n",
       "4                                         ----------          NaN    NaN   \n",
       "\n",
       "   AUPRC  \n",
       "0    NaN  \n",
       "1    NaN  \n",
       "2    NaN  \n",
       "3    NaN  \n",
       "4    NaN  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=[1,2,3,4,5,6]\n",
    "import random\n",
    "random.shuffle(x)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "p36torch",
   "language": "python",
   "name": "p36torch"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": false,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "357px",
    "left": "1586px",
    "top": "134px",
    "width": "231px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
