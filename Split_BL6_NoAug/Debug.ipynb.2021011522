{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "from prep_data import prep_data\n",
    "from PolyAModel import *\n",
    "import numpy as np\n",
    "from tensorflow.keras.utils import Sequence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "ROOT_DIR='data'\n",
    "BLOCK_DIR='../Split_BL6/scanGenome_data/Blocks'\n",
    "polyA_file='../Split_BL6_PolyARead/BAM/BL6_REP1.PolyACount.txt'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def onehot2set(seq_onehot):\n",
    "    for base in seq_onehot:\n",
    "        if base[0] ==1:\n",
    "            print('A',end='')\n",
    "        elif base[1] ==1:\n",
    "            print('T',end='')\n",
    "        elif base[2] ==1:\n",
    "            print('C',end='')\n",
    "        elif base[3] ==1:\n",
    "            print('G',end='')\n",
    "    print() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of train positive dataset: 17405\n",
      "Size of train positive augmentation dataset: 836127\n",
      "Size of train negative dataset: 17919\n",
      "Size of train negative augmentation dataset: 838094\n"
     ]
    }
   ],
   "source": [
    "train_data,train_labels = prep_data(ROOT_DIR,BLOCK_DIR,polyA_file,'aug_SC_p10r30_0',5,'train')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of valid positive dataset: 4213\n",
      "Size of valid positive augmentation dataset: 4213\n",
      "Size of valid negative dataset: 4361\n",
      "Size of valid negative augmentation dataset: 4361\n"
     ]
    }
   ],
   "source": [
    "valid_data,valid_labels = prep_data(ROOT_DIR,BLOCK_DIR,polyA_file,'aug_SC_p10r30_0',5,'valid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [5.],\n",
       "       [0.],\n",
       "       [2.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [2.],\n",
       "       [0.]], dtype=float32)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['pol_input']['chr10:117051005:-'][90:110]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DataGenerator(Sequence):\n",
    "    'Generates data for Keras'\n",
    "    def __init__(self, datasets, labels, batch_size=32,n_classes=2, shuffle=True):\n",
    "        'Initialization'\n",
    "        self.batch_size = batch_size\n",
    "        self.labels = labels\n",
    "        self.n_classes = n_classes\n",
    "        self.shuffle = shuffle\n",
    "        self.datasets = datasets\n",
    "        #####Original pas id. data augmentation to shift the pas  \n",
    "        self.list_IDs = [*datasets['meta_data']]\n",
    "        #np.random.shuffle(self.list_IDs)\n",
    "        self.sizes = len(self.list_IDs)\n",
    "        #self.indexes = np.arange(self.sizes)\n",
    "        #np.random.shuffle(self.indexes)\n",
    "        #self.list_IDs = [self.list_IDs[k] for k in self.indexes]\n",
    "        self.on_epoch_end()\n",
    "\n",
    "    def __len__(self):\n",
    "        'Denotes the number of batches per epoch'\n",
    "        return int(np.floor(self.sizes / self.batch_size))\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        'Generate one batch of data'\n",
    "        # Generate indexes of the batch\n",
    "        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n",
    "\n",
    "        # Find list of IDs\n",
    "        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n",
    "\n",
    "        # Generate data\n",
    "        X, y = self.__data_generation(list_IDs_temp)\n",
    "\n",
    "        return X, y\n",
    "\n",
    "    def on_epoch_end(self):\n",
    "        'Updates indexes after each epoch'\n",
    "        self.indexes = np.arange(self.sizes)\n",
    "        if self.shuffle == True:\n",
    "            np.random.shuffle(self.indexes)\n",
    "\n",
    "    def __data_generation(self, list_IDs_temp):\n",
    "        'Generates data containing batch_size samples' \n",
    "        # Initialization\n",
    "        \n",
    "        seq_input = self.datasets['seq_input']\n",
    "        cov_input = self.datasets['cov_input']\n",
    "        pol_input = self.datasets['pol_input']\n",
    "        meta_data = self.datasets['meta_data']\n",
    "        \n",
    "        seq_data = np.empty((self.batch_size, next(iter(seq_input.values())).shape[0], next(iter(seq_input.values())).shape[1]))\n",
    "        cov_data = np.empty((self.batch_size, next(iter(cov_input.values())).shape[0], next(iter(cov_input.values())).shape[1]))\n",
    "        pol_data = np.empty((self.batch_size, next(iter(pol_input.values())).shape[0], next(iter(pol_input.values())).shape[1]))\n",
    "        cop_data = np.empty((self.batch_size, next(iter(pol_input.values())).shape[0], 2))\n",
    "        y = np.empty((self.batch_size), dtype=int)\n",
    "        # Generate data\n",
    "        for i, ID in enumerate(list_IDs_temp):\n",
    "            # Store sample\n",
    "            #####Data augmentation\n",
    "            PASID = np.random.choice(meta_data[ID]) ###Randomly selected one\n",
    "            seq_data[i,] = seq_input[PASID] \n",
    "            cov_data[i,] = cov_input[PASID] \n",
    "            pol_data[i,] = pol_input[PASID] \n",
    "            cop_data[i,] = np.concatenate((cov_input[PASID],pol_input[PASID] ), axis=1)\n",
    "            #print(seq_data[i],PASID)\n",
    "            # Store class\n",
    "            y[i] = self.labels[PASID]\n",
    "        \n",
    "        print(cop_data)\n",
    "    \n",
    "        X = {\"seq_input\": seq_data, \"cov_input\": cov_data,\"pol_input\": pol_data,\"cop_input\":cop_data}\n",
    "\n",
    "        return X,y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "176"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "next(iter(train_data['seq_input'].values())).shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "training_generator =  DataGenerator(train_data,train_labels)\n",
    "validation_generator = DataGenerator(valid_data,valid_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 25.   0.]\n",
      "  [ 24.   0.]\n",
      "  [ 24.   0.]\n",
      "  ...\n",
      "  [  4.   0.]\n",
      "  [  4.   0.]\n",
      "  [  4.   0.]]\n",
      "\n",
      " [[228.   0.]\n",
      "  [228.   0.]\n",
      "  [227.   0.]\n",
      "  ...\n",
      "  [130.   0.]\n",
      "  [130.   0.]\n",
      "  [131.   0.]]\n",
      "\n",
      " [[220.   0.]\n",
      "  [220.   0.]\n",
      "  [221.   0.]\n",
      "  ...\n",
      "  [265.   0.]\n",
      "  [266.   0.]\n",
      "  [265.   0.]]\n",
      "\n",
      " ...\n",
      "\n",
      " [[375.   0.]\n",
      "  [382.   0.]\n",
      "  [391.   0.]\n",
      "  ...\n",
      "  [798.   0.]\n",
      "  [795.   0.]\n",
      "  [796.   0.]]\n",
      "\n",
      " [[771.   0.]\n",
      "  [769.   1.]\n",
      "  [748.   0.]\n",
      "  ...\n",
      "  [  9.   0.]\n",
      "  [  9.   0.]\n",
      "  [  9.   0.]]\n",
      "\n",
      " [[341.   0.]\n",
      "  [339.   0.]\n",
      "  [326.   0.]\n",
      "  ...\n",
      "  [ 32.   0.]\n",
      "  [ 32.   0.]\n",
      "  [ 32.   0.]]]\n"
     ]
    }
   ],
   "source": [
    "x_batch,y_batch = next(iter(training_generator))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 1., 0., 0.]])"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_batch['seq_input'][3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def FC():\n",
    "    inputs = Input(shape=(176,4))\n",
    "    z = Flatten()(inputs)\n",
    "    z = Dense(64, kernel_regularizer = regularizers.l2(1e-3),bias_regularizer = regularizers.l2(1e-3))(z)\n",
    "    z = Activation('relu')(z)\n",
    "    z= Dense(1, activation='sigmoid')(z)\n",
    "    model = Model(inputs=inputs, outputs=z)\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0., 0., 1., 0.],\n",
       "        [0., 1., 0., 0.],\n",
       "        [0., 0., 1., 0.],\n",
       "        ...,\n",
       "        [1., 0., 0., 0.],\n",
       "        [0., 0., 0., 1.],\n",
       "        [0., 0., 0., 1.]],\n",
       "\n",
       "       [[0., 1., 0., 0.],\n",
       "        [0., 0., 1., 0.],\n",
       "        [1., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 1., 0., 0.],\n",
       "        [1., 0., 0., 0.],\n",
       "        [1., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., 1.],\n",
       "        [0., 0., 0., 1.],\n",
       "        [1., 0., 0., 0.],\n",
       "        ...,\n",
       "        [1., 0., 0., 0.],\n",
       "        [0., 0., 0., 1.],\n",
       "        [0., 1., 0., 0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0., 1., 0., 0.],\n",
       "        [0., 0., 1., 0.],\n",
       "        [0., 1., 0., 0.],\n",
       "        ...,\n",
       "        [1., 0., 0., 0.],\n",
       "        [0., 1., 0., 0.],\n",
       "        [0., 0., 1., 0.]],\n",
       "\n",
       "       [[0., 0., 0., 1.],\n",
       "        [0., 0., 1., 0.],\n",
       "        [1., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 1., 0., 0.],\n",
       "        [0., 1., 0., 0.],\n",
       "        [0., 1., 0., 0.]],\n",
       "\n",
       "       [[1., 0., 0., 0.],\n",
       "        [1., 0., 0., 0.],\n",
       "        [0., 0., 0., 1.],\n",
       "        ...,\n",
       "        [1., 0., 0., 0.],\n",
       "        [0., 0., 1., 0.],\n",
       "        [0., 0., 1., 0.]]])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_batch['seq_input']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "input_layers = [seq_input,cov_input,pol_input]\n"
     ]
    }
   ],
   "source": [
    "model = PolyA_CNN('SCP')\n",
    "#model = FC()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss='binary_crossentropy', optimizer= SGD(momentum = 0.95, lr = 1e-4, nesterov=True), metrics=[binary_accuracy])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss='binary_crossentropy', optimizer= Adam(learning_rate = learning_rate), metrics=[binary_accuracy])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:sample_weight modes were coerced from\n",
      "  ...\n",
      "    to  \n",
      "  ['...']\n",
      "WARNING:tensorflow:sample_weight modes were coerced from\n",
      "  ...\n",
      "    to  \n",
      "  ['...']\n",
      "Train for 1103 steps, validate for 267 steps\n",
      "Epoch 1/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2801 - binary_accuracy: 0.8899 - val_loss: 0.2311 - val_binary_accuracy: 0.9135\n",
      "Epoch 2/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2728 - binary_accuracy: 0.8936 - val_loss: 0.2374 - val_binary_accuracy: 0.9054\n",
      "Epoch 3/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2698 - binary_accuracy: 0.8939 - val_loss: 0.2218 - val_binary_accuracy: 0.9153\n",
      "Epoch 4/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2604 - binary_accuracy: 0.9011 - val_loss: 0.2241 - val_binary_accuracy: 0.9171\n",
      "Epoch 5/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2590 - binary_accuracy: 0.8982 - val_loss: 0.2171 - val_binary_accuracy: 0.9177\n",
      "Epoch 6/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2515 - binary_accuracy: 0.9013 - val_loss: 0.2165 - val_binary_accuracy: 0.9191\n",
      "Epoch 7/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2538 - binary_accuracy: 0.9016 - val_loss: 0.2144 - val_binary_accuracy: 0.9192\n",
      "Epoch 8/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2502 - binary_accuracy: 0.9027 - val_loss: 0.2091 - val_binary_accuracy: 0.9239\n",
      "Epoch 9/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2514 - binary_accuracy: 0.9031 - val_loss: 0.2119 - val_binary_accuracy: 0.9210\n",
      "Epoch 10/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2473 - binary_accuracy: 0.9053 - val_loss: 0.2172 - val_binary_accuracy: 0.9183\n",
      "Epoch 11/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2454 - binary_accuracy: 0.9061 - val_loss: 0.2137 - val_binary_accuracy: 0.9185\n",
      "Epoch 12/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2449 - binary_accuracy: 0.9081 - val_loss: 0.2075 - val_binary_accuracy: 0.9222\n",
      "Epoch 13/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2444 - binary_accuracy: 0.9072 - val_loss: 0.2204 - val_binary_accuracy: 0.9160\n",
      "Epoch 14/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2433 - binary_accuracy: 0.9074 - val_loss: 0.2181 - val_binary_accuracy: 0.9189\n",
      "Epoch 15/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2402 - binary_accuracy: 0.9072 - val_loss: 0.2139 - val_binary_accuracy: 0.9197\n",
      "Epoch 16/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2416 - binary_accuracy: 0.9082 - val_loss: 0.2230 - val_binary_accuracy: 0.9176\n",
      "Epoch 17/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2419 - binary_accuracy: 0.9075 - val_loss: 0.2136 - val_binary_accuracy: 0.9208\n",
      "Epoch 18/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2404 - binary_accuracy: 0.9086 - val_loss: 0.2177 - val_binary_accuracy: 0.9215\n",
      "Epoch 19/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2394 - binary_accuracy: 0.9091 - val_loss: 0.2131 - val_binary_accuracy: 0.9212\n",
      "Epoch 20/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2418 - binary_accuracy: 0.9068 - val_loss: 0.2137 - val_binary_accuracy: 0.9191\n",
      "Epoch 21/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2409 - binary_accuracy: 0.9072 - val_loss: 0.2114 - val_binary_accuracy: 0.9213\n",
      "Epoch 22/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2376 - binary_accuracy: 0.9097 - val_loss: 0.2240 - val_binary_accuracy: 0.9171\n",
      "Epoch 23/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2374 - binary_accuracy: 0.9104 - val_loss: 0.2120 - val_binary_accuracy: 0.9188\n",
      "Epoch 24/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2389 - binary_accuracy: 0.9088 - val_loss: 0.2144 - val_binary_accuracy: 0.9169\n",
      "Epoch 25/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2405 - binary_accuracy: 0.9080 - val_loss: 0.2138 - val_binary_accuracy: 0.9216\n",
      "Epoch 26/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2393 - binary_accuracy: 0.9087 - val_loss: 0.2079 - val_binary_accuracy: 0.9215\n",
      "Epoch 27/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2379 - binary_accuracy: 0.9097 - val_loss: 0.2185 - val_binary_accuracy: 0.9168\n",
      "Epoch 28/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2377 - binary_accuracy: 0.9122 - val_loss: 0.2432 - val_binary_accuracy: 0.9066\n",
      "Epoch 29/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2373 - binary_accuracy: 0.9092 - val_loss: 0.2100 - val_binary_accuracy: 0.9210\n",
      "Epoch 30/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2373 - binary_accuracy: 0.9109 - val_loss: 0.2386 - val_binary_accuracy: 0.9113\n",
      "Epoch 31/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2384 - binary_accuracy: 0.9089 - val_loss: 0.2111 - val_binary_accuracy: 0.9217\n",
      "Epoch 32/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2331 - binary_accuracy: 0.9123 - val_loss: 0.2121 - val_binary_accuracy: 0.9206\n",
      "Epoch 33/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2361 - binary_accuracy: 0.9096 - val_loss: 0.2181 - val_binary_accuracy: 0.9191\n",
      "Epoch 34/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2354 - binary_accuracy: 0.9102 - val_loss: 0.2150 - val_binary_accuracy: 0.9173\n",
      "Epoch 35/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2345 - binary_accuracy: 0.9110 - val_loss: 0.2144 - val_binary_accuracy: 0.9229\n",
      "Epoch 36/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2350 - binary_accuracy: 0.9106 - val_loss: 0.2079 - val_binary_accuracy: 0.9230\n",
      "Epoch 37/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2320 - binary_accuracy: 0.9112 - val_loss: 0.2175 - val_binary_accuracy: 0.9177\n",
      "Epoch 38/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2368 - binary_accuracy: 0.9108 - val_loss: 0.2088 - val_binary_accuracy: 0.9218\n",
      "Epoch 39/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2340 - binary_accuracy: 0.9118 - val_loss: 0.2258 - val_binary_accuracy: 0.9164\n",
      "Epoch 40/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2344 - binary_accuracy: 0.9107 - val_loss: 0.2121 - val_binary_accuracy: 0.9197\n",
      "Epoch 41/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2339 - binary_accuracy: 0.9105 - val_loss: 0.2257 - val_binary_accuracy: 0.9144\n",
      "Epoch 42/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2334 - binary_accuracy: 0.9104 - val_loss: 0.2077 - val_binary_accuracy: 0.9243\n",
      "Epoch 43/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2306 - binary_accuracy: 0.9115 - val_loss: 0.2181 - val_binary_accuracy: 0.9188\n",
      "Epoch 44/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2331 - binary_accuracy: 0.9124 - val_loss: 0.2100 - val_binary_accuracy: 0.9228\n",
      "Epoch 45/300\n",
      "1103/1103 [==============================] - 5s 5ms/step - loss: 0.2348 - binary_accuracy: 0.9122 - val_loss: 0.2063 - val_binary_accuracy: 0.9225\n",
      "Epoch 46/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2300 - binary_accuracy: 0.9129 - val_loss: 0.2126 - val_binary_accuracy: 0.9203\n",
      "Epoch 47/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2332 - binary_accuracy: 0.9112 - val_loss: 0.2046 - val_binary_accuracy: 0.9257\n",
      "Epoch 48/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2328 - binary_accuracy: 0.9116 - val_loss: 0.2267 - val_binary_accuracy: 0.9150\n",
      "Epoch 49/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2332 - binary_accuracy: 0.9122 - val_loss: 0.2099 - val_binary_accuracy: 0.9231\n",
      "Epoch 50/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2325 - binary_accuracy: 0.9123 - val_loss: 0.2156 - val_binary_accuracy: 0.9212\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 51/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2313 - binary_accuracy: 0.9121 - val_loss: 0.2110 - val_binary_accuracy: 0.9225\n",
      "Epoch 52/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2333 - binary_accuracy: 0.9114 - val_loss: 0.2091 - val_binary_accuracy: 0.9212\n",
      "Epoch 53/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2297 - binary_accuracy: 0.9123 - val_loss: 0.2060 - val_binary_accuracy: 0.9237\n",
      "Epoch 54/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2320 - binary_accuracy: 0.9123 - val_loss: 0.2054 - val_binary_accuracy: 0.9252\n",
      "Epoch 55/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2301 - binary_accuracy: 0.9117 - val_loss: 0.2011 - val_binary_accuracy: 0.9256\n",
      "Epoch 56/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2297 - binary_accuracy: 0.9134 - val_loss: 0.2082 - val_binary_accuracy: 0.9228\n",
      "Epoch 57/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2284 - binary_accuracy: 0.9134 - val_loss: 0.2078 - val_binary_accuracy: 0.9233\n",
      "Epoch 58/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2286 - binary_accuracy: 0.9132 - val_loss: 0.2011 - val_binary_accuracy: 0.9266\n",
      "Epoch 59/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2294 - binary_accuracy: 0.9131 - val_loss: 0.2108 - val_binary_accuracy: 0.9216\n",
      "Epoch 60/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2295 - binary_accuracy: 0.9129 - val_loss: 0.2061 - val_binary_accuracy: 0.9251\n",
      "Epoch 61/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2327 - binary_accuracy: 0.9116 - val_loss: 0.2106 - val_binary_accuracy: 0.9225\n",
      "Epoch 62/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2315 - binary_accuracy: 0.9135 - val_loss: 0.2015 - val_binary_accuracy: 0.9284\n",
      "Epoch 63/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2291 - binary_accuracy: 0.9127 - val_loss: 0.2063 - val_binary_accuracy: 0.9254\n",
      "Epoch 64/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2329 - binary_accuracy: 0.9111 - val_loss: 0.2085 - val_binary_accuracy: 0.9225\n",
      "Epoch 65/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2305 - binary_accuracy: 0.9127 - val_loss: 0.2126 - val_binary_accuracy: 0.9251\n",
      "Epoch 66/300\n",
      "1103/1103 [==============================] - 5s 5ms/step - loss: 0.2286 - binary_accuracy: 0.9124 - val_loss: 0.2085 - val_binary_accuracy: 0.9224\n",
      "Epoch 67/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2292 - binary_accuracy: 0.9130 - val_loss: 0.2157 - val_binary_accuracy: 0.9191\n",
      "Epoch 68/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2301 - binary_accuracy: 0.9123 - val_loss: 0.2091 - val_binary_accuracy: 0.9222\n",
      "Epoch 69/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2277 - binary_accuracy: 0.9147 - val_loss: 0.2029 - val_binary_accuracy: 0.9257\n",
      "Epoch 70/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2281 - binary_accuracy: 0.9134 - val_loss: 0.2136 - val_binary_accuracy: 0.9210\n",
      "Epoch 71/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2290 - binary_accuracy: 0.9135 - val_loss: 0.2298 - val_binary_accuracy: 0.9115\n",
      "Epoch 72/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2290 - binary_accuracy: 0.9138 - val_loss: 0.2118 - val_binary_accuracy: 0.9212\n",
      "Epoch 73/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2291 - binary_accuracy: 0.9127 - val_loss: 0.2136 - val_binary_accuracy: 0.9198\n",
      "Epoch 74/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2266 - binary_accuracy: 0.9123 - val_loss: 0.2055 - val_binary_accuracy: 0.9247\n",
      "Epoch 75/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2293 - binary_accuracy: 0.9128 - val_loss: 0.2207 - val_binary_accuracy: 0.9178\n",
      "Epoch 76/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2302 - binary_accuracy: 0.9125 - val_loss: 0.2073 - val_binary_accuracy: 0.9243\n",
      "Epoch 77/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2310 - binary_accuracy: 0.9120 - val_loss: 0.2134 - val_binary_accuracy: 0.9209\n",
      "Epoch 78/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2304 - binary_accuracy: 0.9127 - val_loss: 0.2105 - val_binary_accuracy: 0.9245\n",
      "Epoch 79/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2313 - binary_accuracy: 0.9119 - val_loss: 0.2082 - val_binary_accuracy: 0.9232\n",
      "Epoch 80/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2318 - binary_accuracy: 0.9109 - val_loss: 0.2088 - val_binary_accuracy: 0.9223\n",
      "Epoch 81/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2311 - binary_accuracy: 0.9123 - val_loss: 0.2042 - val_binary_accuracy: 0.9240\n",
      "Epoch 82/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2290 - binary_accuracy: 0.9133 - val_loss: 0.2141 - val_binary_accuracy: 0.9204\n",
      "Epoch 83/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2294 - binary_accuracy: 0.9148 - val_loss: 0.2210 - val_binary_accuracy: 0.9181\n",
      "Epoch 84/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2262 - binary_accuracy: 0.9142 - val_loss: 0.2070 - val_binary_accuracy: 0.9242\n",
      "Epoch 85/300\n",
      "1103/1103 [==============================] - 5s 5ms/step - loss: 0.2294 - binary_accuracy: 0.9139 - val_loss: 0.2113 - val_binary_accuracy: 0.9208\n",
      "Epoch 86/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2315 - binary_accuracy: 0.9124 - val_loss: 0.2150 - val_binary_accuracy: 0.9198\n",
      "Epoch 87/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2312 - binary_accuracy: 0.9139 - val_loss: 0.2130 - val_binary_accuracy: 0.9218\n",
      "Epoch 88/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2280 - binary_accuracy: 0.9129 - val_loss: 0.2294 - val_binary_accuracy: 0.9139\n",
      "Epoch 89/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2297 - binary_accuracy: 0.9119 - val_loss: 0.2180 - val_binary_accuracy: 0.9185\n",
      "Epoch 90/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2306 - binary_accuracy: 0.9124 - val_loss: 0.2378 - val_binary_accuracy: 0.9095\n",
      "Epoch 91/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2289 - binary_accuracy: 0.9126 - val_loss: 0.2144 - val_binary_accuracy: 0.9209\n",
      "Epoch 92/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2301 - binary_accuracy: 0.9124 - val_loss: 0.2016 - val_binary_accuracy: 0.9277\n",
      "Epoch 93/300\n",
      "1103/1103 [==============================] - 5s 5ms/step - loss: 0.2312 - binary_accuracy: 0.9146 - val_loss: 0.2078 - val_binary_accuracy: 0.9244\n",
      "Epoch 94/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2294 - binary_accuracy: 0.9146 - val_loss: 0.2028 - val_binary_accuracy: 0.9257\n",
      "Epoch 95/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2260 - binary_accuracy: 0.9163 - val_loss: 0.2055 - val_binary_accuracy: 0.9249\n",
      "Epoch 96/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2293 - binary_accuracy: 0.9130 - val_loss: 0.2223 - val_binary_accuracy: 0.9182\n",
      "Epoch 97/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2290 - binary_accuracy: 0.9130 - val_loss: 0.2104 - val_binary_accuracy: 0.9228\n",
      "Epoch 98/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2311 - binary_accuracy: 0.9127 - val_loss: 0.2135 - val_binary_accuracy: 0.9209\n",
      "Epoch 99/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2293 - binary_accuracy: 0.9129 - val_loss: 0.2081 - val_binary_accuracy: 0.9230\n",
      "Epoch 100/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2298 - binary_accuracy: 0.9129 - val_loss: 0.2173 - val_binary_accuracy: 0.9178\n",
      "Epoch 101/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2288 - binary_accuracy: 0.9138 - val_loss: 0.2144 - val_binary_accuracy: 0.9184\n",
      "Epoch 102/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2292 - binary_accuracy: 0.9140 - val_loss: 0.2047 - val_binary_accuracy: 0.9242\n",
      "Epoch 103/300\n",
      "1103/1103 [==============================] - 7s 6ms/step - loss: 0.2296 - binary_accuracy: 0.9134 - val_loss: 0.2061 - val_binary_accuracy: 0.9226\n",
      "Epoch 104/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2271 - binary_accuracy: 0.9135 - val_loss: 0.2208 - val_binary_accuracy: 0.9202\n",
      "Epoch 105/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2309 - binary_accuracy: 0.9122 - val_loss: 0.2097 - val_binary_accuracy: 0.9211\n",
      "Epoch 106/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2282 - binary_accuracy: 0.9124 - val_loss: 0.2229 - val_binary_accuracy: 0.9139\n",
      "Epoch 107/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2319 - binary_accuracy: 0.9126 - val_loss: 0.2082 - val_binary_accuracy: 0.9221\n",
      "Epoch 108/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2283 - binary_accuracy: 0.9150 - val_loss: 0.2120 - val_binary_accuracy: 0.9205\n",
      "Epoch 109/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2288 - binary_accuracy: 0.9134 - val_loss: 0.2193 - val_binary_accuracy: 0.9184\n",
      "Epoch 110/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2273 - binary_accuracy: 0.9121 - val_loss: 0.2259 - val_binary_accuracy: 0.9134\n",
      "Epoch 111/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2274 - binary_accuracy: 0.9135 - val_loss: 0.2166 - val_binary_accuracy: 0.9194\n",
      "Epoch 112/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2312 - binary_accuracy: 0.9124 - val_loss: 0.2234 - val_binary_accuracy: 0.9153\n",
      "Epoch 113/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2243 - binary_accuracy: 0.9155 - val_loss: 0.2057 - val_binary_accuracy: 0.9233\n",
      "Epoch 114/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2293 - binary_accuracy: 0.9126 - val_loss: 0.2102 - val_binary_accuracy: 0.9238\n",
      "Epoch 115/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2303 - binary_accuracy: 0.9129 - val_loss: 0.2100 - val_binary_accuracy: 0.9232\n",
      "Epoch 116/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2290 - binary_accuracy: 0.9154 - val_loss: 0.2132 - val_binary_accuracy: 0.9194\n",
      "Epoch 117/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2250 - binary_accuracy: 0.9142 - val_loss: 0.2085 - val_binary_accuracy: 0.9228\n",
      "Epoch 118/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2280 - binary_accuracy: 0.9148 - val_loss: 0.2185 - val_binary_accuracy: 0.9182\n",
      "Epoch 119/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2287 - binary_accuracy: 0.9132 - val_loss: 0.2170 - val_binary_accuracy: 0.9192\n",
      "Epoch 120/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2302 - binary_accuracy: 0.9129 - val_loss: 0.2099 - val_binary_accuracy: 0.9242\n",
      "Epoch 121/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2282 - binary_accuracy: 0.9142 - val_loss: 0.2008 - val_binary_accuracy: 0.9288\n",
      "Epoch 122/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2268 - binary_accuracy: 0.9148 - val_loss: 0.2027 - val_binary_accuracy: 0.9263\n",
      "Epoch 123/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2299 - binary_accuracy: 0.9141 - val_loss: 0.2068 - val_binary_accuracy: 0.9243\n",
      "Epoch 124/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2289 - binary_accuracy: 0.9135 - val_loss: 0.2112 - val_binary_accuracy: 0.9239\n",
      "Epoch 125/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2285 - binary_accuracy: 0.9141 - val_loss: 0.2060 - val_binary_accuracy: 0.9243\n",
      "Epoch 126/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2256 - binary_accuracy: 0.9160 - val_loss: 0.2180 - val_binary_accuracy: 0.9209\n",
      "Epoch 127/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2291 - binary_accuracy: 0.9132 - val_loss: 0.2087 - val_binary_accuracy: 0.9250\n",
      "Epoch 128/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2274 - binary_accuracy: 0.9137 - val_loss: 0.2374 - val_binary_accuracy: 0.9099\n",
      "Epoch 129/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2270 - binary_accuracy: 0.9166 - val_loss: 0.2152 - val_binary_accuracy: 0.9212\n",
      "Epoch 130/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2276 - binary_accuracy: 0.9144 - val_loss: 0.2141 - val_binary_accuracy: 0.9249\n",
      "Epoch 131/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2298 - binary_accuracy: 0.9129 - val_loss: 0.2156 - val_binary_accuracy: 0.9203\n",
      "Epoch 132/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2281 - binary_accuracy: 0.9133 - val_loss: 0.2074 - val_binary_accuracy: 0.9228\n",
      "Epoch 133/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2303 - binary_accuracy: 0.9130 - val_loss: 0.2105 - val_binary_accuracy: 0.9225\n",
      "Epoch 134/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2271 - binary_accuracy: 0.9138 - val_loss: 0.2183 - val_binary_accuracy: 0.9198\n",
      "Epoch 135/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2295 - binary_accuracy: 0.9140 - val_loss: 0.2104 - val_binary_accuracy: 0.9228\n",
      "Epoch 136/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2258 - binary_accuracy: 0.9129 - val_loss: 0.2053 - val_binary_accuracy: 0.9273\n",
      "Epoch 137/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2253 - binary_accuracy: 0.9148 - val_loss: 0.2047 - val_binary_accuracy: 0.9243\n",
      "Epoch 138/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2275 - binary_accuracy: 0.9144 - val_loss: 0.2029 - val_binary_accuracy: 0.9254\n",
      "Epoch 139/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2267 - binary_accuracy: 0.9144 - val_loss: 0.2049 - val_binary_accuracy: 0.9273\n",
      "Epoch 140/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2256 - binary_accuracy: 0.9150 - val_loss: 0.2009 - val_binary_accuracy: 0.9276\n",
      "Epoch 141/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2276 - binary_accuracy: 0.9138 - val_loss: 0.2020 - val_binary_accuracy: 0.9263\n",
      "Epoch 142/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2283 - binary_accuracy: 0.9149 - val_loss: 0.2040 - val_binary_accuracy: 0.9259\n",
      "Epoch 143/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2282 - binary_accuracy: 0.9142 - val_loss: 0.2054 - val_binary_accuracy: 0.9246\n",
      "Epoch 144/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2267 - binary_accuracy: 0.9144 - val_loss: 0.2047 - val_binary_accuracy: 0.9273\n",
      "Epoch 145/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2284 - binary_accuracy: 0.9139 - val_loss: 0.2027 - val_binary_accuracy: 0.9265\n",
      "Epoch 146/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2271 - binary_accuracy: 0.9139 - val_loss: 0.2132 - val_binary_accuracy: 0.9218\n",
      "Epoch 147/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2266 - binary_accuracy: 0.9140 - val_loss: 0.2054 - val_binary_accuracy: 0.9253\n",
      "Epoch 148/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2236 - binary_accuracy: 0.9153 - val_loss: 0.2102 - val_binary_accuracy: 0.9244\n",
      "Epoch 149/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2240 - binary_accuracy: 0.9155 - val_loss: 0.2036 - val_binary_accuracy: 0.9267\n",
      "Epoch 150/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2272 - binary_accuracy: 0.9144 - val_loss: 0.2056 - val_binary_accuracy: 0.9251\n",
      "Epoch 151/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2253 - binary_accuracy: 0.9153 - val_loss: 0.2085 - val_binary_accuracy: 0.9236\n",
      "Epoch 152/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2281 - binary_accuracy: 0.9131 - val_loss: 0.2166 - val_binary_accuracy: 0.9199\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 153/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2274 - binary_accuracy: 0.9115 - val_loss: 0.2142 - val_binary_accuracy: 0.9219\n",
      "Epoch 154/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2251 - binary_accuracy: 0.9153 - val_loss: 0.2053 - val_binary_accuracy: 0.9245\n",
      "Epoch 155/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2296 - binary_accuracy: 0.9123 - val_loss: 0.2107 - val_binary_accuracy: 0.9215\n",
      "Epoch 156/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2257 - binary_accuracy: 0.9157 - val_loss: 0.2112 - val_binary_accuracy: 0.9228\n",
      "Epoch 157/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2274 - binary_accuracy: 0.9144 - val_loss: 0.2087 - val_binary_accuracy: 0.9229\n",
      "Epoch 158/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2266 - binary_accuracy: 0.9165 - val_loss: 0.2062 - val_binary_accuracy: 0.9217\n",
      "Epoch 159/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2259 - binary_accuracy: 0.9149 - val_loss: 0.2140 - val_binary_accuracy: 0.9205\n",
      "Epoch 160/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2275 - binary_accuracy: 0.9140 - val_loss: 0.2116 - val_binary_accuracy: 0.9232\n",
      "Epoch 161/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2273 - binary_accuracy: 0.9129 - val_loss: 0.2076 - val_binary_accuracy: 0.9264\n",
      "Epoch 162/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2268 - binary_accuracy: 0.9146 - val_loss: 0.2080 - val_binary_accuracy: 0.9226\n",
      "Epoch 163/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2267 - binary_accuracy: 0.9133 - val_loss: 0.2080 - val_binary_accuracy: 0.9247\n",
      "Epoch 164/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2275 - binary_accuracy: 0.9146 - val_loss: 0.2059 - val_binary_accuracy: 0.9249\n",
      "Epoch 165/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2262 - binary_accuracy: 0.9140 - val_loss: 0.2038 - val_binary_accuracy: 0.9233\n",
      "Epoch 166/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2278 - binary_accuracy: 0.9147 - val_loss: 0.2075 - val_binary_accuracy: 0.9229\n",
      "Epoch 167/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2285 - binary_accuracy: 0.9133 - val_loss: 0.2121 - val_binary_accuracy: 0.9209\n",
      "Epoch 168/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2256 - binary_accuracy: 0.9154 - val_loss: 0.2196 - val_binary_accuracy: 0.9170\n",
      "Epoch 169/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2281 - binary_accuracy: 0.9144 - val_loss: 0.2443 - val_binary_accuracy: 0.9081\n",
      "Epoch 170/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2242 - binary_accuracy: 0.9157 - val_loss: 0.2106 - val_binary_accuracy: 0.9225\n",
      "Epoch 171/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2266 - binary_accuracy: 0.9145 - val_loss: 0.2161 - val_binary_accuracy: 0.9203\n",
      "Epoch 172/300\n",
      "1103/1103 [==============================] - 5s 5ms/step - loss: 0.2243 - binary_accuracy: 0.9162 - val_loss: 0.2135 - val_binary_accuracy: 0.9205\n",
      "Epoch 173/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2294 - binary_accuracy: 0.9134 - val_loss: 0.2211 - val_binary_accuracy: 0.9171\n",
      "Epoch 174/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2270 - binary_accuracy: 0.9157 - val_loss: 0.2070 - val_binary_accuracy: 0.9240\n",
      "Epoch 175/300\n",
      "1103/1103 [==============================] - 5s 5ms/step - loss: 0.2269 - binary_accuracy: 0.9145 - val_loss: 0.2098 - val_binary_accuracy: 0.9237\n",
      "Epoch 176/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2274 - binary_accuracy: 0.9140 - val_loss: 0.2041 - val_binary_accuracy: 0.9246\n",
      "Epoch 177/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2283 - binary_accuracy: 0.9146 - val_loss: 0.2125 - val_binary_accuracy: 0.9226\n",
      "Epoch 178/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2266 - binary_accuracy: 0.9144 - val_loss: 0.2067 - val_binary_accuracy: 0.9245\n",
      "Epoch 179/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2288 - binary_accuracy: 0.9139 - val_loss: 0.2113 - val_binary_accuracy: 0.9215\n",
      "Epoch 180/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2278 - binary_accuracy: 0.9134 - val_loss: 0.2177 - val_binary_accuracy: 0.9199\n",
      "Epoch 181/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2260 - binary_accuracy: 0.9161 - val_loss: 0.2037 - val_binary_accuracy: 0.9235\n",
      "Epoch 182/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2272 - binary_accuracy: 0.9146 - val_loss: 0.2098 - val_binary_accuracy: 0.9208\n",
      "Epoch 183/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2273 - binary_accuracy: 0.9149 - val_loss: 0.2149 - val_binary_accuracy: 0.9233\n",
      "Epoch 184/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2240 - binary_accuracy: 0.9160 - val_loss: 0.2085 - val_binary_accuracy: 0.9232\n",
      "Epoch 185/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2257 - binary_accuracy: 0.9149 - val_loss: 0.2125 - val_binary_accuracy: 0.9225\n",
      "Epoch 186/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2283 - binary_accuracy: 0.9153 - val_loss: 0.2075 - val_binary_accuracy: 0.9239\n",
      "Epoch 187/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2251 - binary_accuracy: 0.9157 - val_loss: 0.2067 - val_binary_accuracy: 0.9245\n",
      "Epoch 188/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2271 - binary_accuracy: 0.9155 - val_loss: 0.2077 - val_binary_accuracy: 0.9230\n",
      "Epoch 189/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2271 - binary_accuracy: 0.9148 - val_loss: 0.2070 - val_binary_accuracy: 0.9228\n",
      "Epoch 190/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2270 - binary_accuracy: 0.9130 - val_loss: 0.2042 - val_binary_accuracy: 0.9242\n",
      "Epoch 191/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2269 - binary_accuracy: 0.9149 - val_loss: 0.2069 - val_binary_accuracy: 0.9235\n",
      "Epoch 192/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2320 - binary_accuracy: 0.9115 - val_loss: 0.2088 - val_binary_accuracy: 0.9242\n",
      "Epoch 193/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2254 - binary_accuracy: 0.9158 - val_loss: 0.2049 - val_binary_accuracy: 0.9249\n",
      "Epoch 194/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2240 - binary_accuracy: 0.9144 - val_loss: 0.2089 - val_binary_accuracy: 0.9222\n",
      "Epoch 195/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2280 - binary_accuracy: 0.9148 - val_loss: 0.2117 - val_binary_accuracy: 0.9226\n",
      "Epoch 196/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2330 - binary_accuracy: 0.9145 - val_loss: 0.2164 - val_binary_accuracy: 0.9176\n",
      "Epoch 197/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2259 - binary_accuracy: 0.9149 - val_loss: 0.2018 - val_binary_accuracy: 0.9261\n",
      "Epoch 198/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2281 - binary_accuracy: 0.9146 - val_loss: 0.2056 - val_binary_accuracy: 0.9251\n",
      "Epoch 199/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2277 - binary_accuracy: 0.9137 - val_loss: 0.2107 - val_binary_accuracy: 0.9221\n",
      "Epoch 200/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2294 - binary_accuracy: 0.9134 - val_loss: 0.2101 - val_binary_accuracy: 0.9228\n",
      "Epoch 201/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2257 - binary_accuracy: 0.9165 - val_loss: 0.2237 - val_binary_accuracy: 0.9146\n",
      "Epoch 202/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2257 - binary_accuracy: 0.9144 - val_loss: 0.2123 - val_binary_accuracy: 0.9213\n",
      "Epoch 203/300\n",
      "1103/1103 [==============================] - 5s 5ms/step - loss: 0.2276 - binary_accuracy: 0.9153 - val_loss: 0.2089 - val_binary_accuracy: 0.9246\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 204/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2265 - binary_accuracy: 0.9146 - val_loss: 0.2073 - val_binary_accuracy: 0.9256\n",
      "Epoch 205/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2259 - binary_accuracy: 0.9135 - val_loss: 0.2063 - val_binary_accuracy: 0.9231\n",
      "Epoch 206/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2277 - binary_accuracy: 0.9139 - val_loss: 0.2026 - val_binary_accuracy: 0.9246\n",
      "Epoch 207/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2258 - binary_accuracy: 0.9140 - val_loss: 0.2051 - val_binary_accuracy: 0.9249\n",
      "Epoch 208/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2262 - binary_accuracy: 0.9147 - val_loss: 0.2135 - val_binary_accuracy: 0.9205\n",
      "Epoch 209/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2249 - binary_accuracy: 0.9166 - val_loss: 0.2039 - val_binary_accuracy: 0.9256\n",
      "Epoch 210/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2252 - binary_accuracy: 0.9146 - val_loss: 0.2052 - val_binary_accuracy: 0.9239\n",
      "Epoch 211/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2270 - binary_accuracy: 0.9147 - val_loss: 0.2072 - val_binary_accuracy: 0.9244\n",
      "Epoch 212/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2234 - binary_accuracy: 0.9160 - val_loss: 0.2049 - val_binary_accuracy: 0.9243\n",
      "Epoch 213/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2257 - binary_accuracy: 0.9145 - val_loss: 0.2001 - val_binary_accuracy: 0.9271\n",
      "Epoch 214/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2267 - binary_accuracy: 0.9161 - val_loss: 0.2102 - val_binary_accuracy: 0.9240\n",
      "Epoch 215/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2269 - binary_accuracy: 0.9141 - val_loss: 0.2448 - val_binary_accuracy: 0.9064\n",
      "Epoch 216/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2275 - binary_accuracy: 0.9153 - val_loss: 0.2109 - val_binary_accuracy: 0.9228\n",
      "Epoch 217/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2248 - binary_accuracy: 0.9150 - val_loss: 0.2026 - val_binary_accuracy: 0.9268\n",
      "Epoch 218/300\n",
      "1103/1103 [==============================] - 7s 6ms/step - loss: 0.2270 - binary_accuracy: 0.9148 - val_loss: 0.2108 - val_binary_accuracy: 0.9230\n",
      "Epoch 219/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2238 - binary_accuracy: 0.9153 - val_loss: 0.2027 - val_binary_accuracy: 0.9263\n",
      "Epoch 220/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2221 - binary_accuracy: 0.9167 - val_loss: 0.2103 - val_binary_accuracy: 0.9252\n",
      "Epoch 221/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2258 - binary_accuracy: 0.9140 - val_loss: 0.2071 - val_binary_accuracy: 0.9224\n",
      "Epoch 222/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2255 - binary_accuracy: 0.9156 - val_loss: 0.2037 - val_binary_accuracy: 0.9260\n",
      "Epoch 223/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2275 - binary_accuracy: 0.9145 - val_loss: 0.2054 - val_binary_accuracy: 0.9238\n",
      "Epoch 224/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2275 - binary_accuracy: 0.9153 - val_loss: 0.2000 - val_binary_accuracy: 0.9274\n",
      "Epoch 225/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2279 - binary_accuracy: 0.9141 - val_loss: 0.2022 - val_binary_accuracy: 0.9253\n",
      "Epoch 226/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2270 - binary_accuracy: 0.9156 - val_loss: 0.2069 - val_binary_accuracy: 0.9238\n",
      "Epoch 227/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2258 - binary_accuracy: 0.9152 - val_loss: 0.2175 - val_binary_accuracy: 0.9191\n",
      "Epoch 228/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2262 - binary_accuracy: 0.9152 - val_loss: 0.2031 - val_binary_accuracy: 0.9260\n",
      "Epoch 229/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2274 - binary_accuracy: 0.9136 - val_loss: 0.2166 - val_binary_accuracy: 0.9194\n",
      "Epoch 230/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2276 - binary_accuracy: 0.9164 - val_loss: 0.2103 - val_binary_accuracy: 0.9226\n",
      "Epoch 231/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2246 - binary_accuracy: 0.9159 - val_loss: 0.2094 - val_binary_accuracy: 0.9224\n",
      "Epoch 232/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2253 - binary_accuracy: 0.9157 - val_loss: 0.2048 - val_binary_accuracy: 0.9247\n",
      "Epoch 233/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2267 - binary_accuracy: 0.9160 - val_loss: 0.2029 - val_binary_accuracy: 0.9263\n",
      "Epoch 234/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2282 - binary_accuracy: 0.9137 - val_loss: 0.2069 - val_binary_accuracy: 0.9259\n",
      "Epoch 235/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2253 - binary_accuracy: 0.9149 - val_loss: 0.2080 - val_binary_accuracy: 0.9237\n",
      "Epoch 236/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2292 - binary_accuracy: 0.9157 - val_loss: 0.2104 - val_binary_accuracy: 0.9229\n",
      "Epoch 237/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2239 - binary_accuracy: 0.9163 - val_loss: 0.2053 - val_binary_accuracy: 0.9243\n",
      "Epoch 238/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2272 - binary_accuracy: 0.9146 - val_loss: 0.2097 - val_binary_accuracy: 0.9228\n",
      "Epoch 239/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2240 - binary_accuracy: 0.9161 - val_loss: 0.2069 - val_binary_accuracy: 0.9247\n",
      "Epoch 240/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2283 - binary_accuracy: 0.9129 - val_loss: 0.2076 - val_binary_accuracy: 0.9249\n",
      "Epoch 241/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2247 - binary_accuracy: 0.9157 - val_loss: 0.2108 - val_binary_accuracy: 0.9213\n",
      "Epoch 242/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2245 - binary_accuracy: 0.9164 - val_loss: 0.2061 - val_binary_accuracy: 0.9232\n",
      "Epoch 243/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2256 - binary_accuracy: 0.9157 - val_loss: 0.2140 - val_binary_accuracy: 0.9212\n",
      "Epoch 244/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2247 - binary_accuracy: 0.9151 - val_loss: 0.2134 - val_binary_accuracy: 0.9223\n",
      "Epoch 245/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2264 - binary_accuracy: 0.9143 - val_loss: 0.2312 - val_binary_accuracy: 0.9127\n",
      "Epoch 246/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2245 - binary_accuracy: 0.9162 - val_loss: 0.2101 - val_binary_accuracy: 0.9226\n",
      "Epoch 247/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2254 - binary_accuracy: 0.9161 - val_loss: 0.2091 - val_binary_accuracy: 0.9237\n",
      "Epoch 248/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2241 - binary_accuracy: 0.9162 - val_loss: 0.2213 - val_binary_accuracy: 0.9189\n",
      "Epoch 249/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2240 - binary_accuracy: 0.9147 - val_loss: 0.2033 - val_binary_accuracy: 0.9257\n",
      "Epoch 250/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2247 - binary_accuracy: 0.9172 - val_loss: 0.2079 - val_binary_accuracy: 0.9209\n",
      "Epoch 251/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2256 - binary_accuracy: 0.9161 - val_loss: 0.2058 - val_binary_accuracy: 0.9231\n",
      "Epoch 252/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2255 - binary_accuracy: 0.9160 - val_loss: 0.2065 - val_binary_accuracy: 0.9254\n",
      "Epoch 253/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2254 - binary_accuracy: 0.9178 - val_loss: 0.2116 - val_binary_accuracy: 0.9212\n",
      "Epoch 254/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2228 - binary_accuracy: 0.9153 - val_loss: 0.2090 - val_binary_accuracy: 0.9243\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 255/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2255 - binary_accuracy: 0.9147 - val_loss: 0.2095 - val_binary_accuracy: 0.9216\n",
      "Epoch 256/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2257 - binary_accuracy: 0.9146 - val_loss: 0.2059 - val_binary_accuracy: 0.9258\n",
      "Epoch 257/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2270 - binary_accuracy: 0.9146 - val_loss: 0.2101 - val_binary_accuracy: 0.9226\n",
      "Epoch 258/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2274 - binary_accuracy: 0.9140 - val_loss: 0.2149 - val_binary_accuracy: 0.9225\n",
      "Epoch 259/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2260 - binary_accuracy: 0.9148 - val_loss: 0.2293 - val_binary_accuracy: 0.9139\n",
      "Epoch 260/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2251 - binary_accuracy: 0.9157 - val_loss: 0.2032 - val_binary_accuracy: 0.9243\n",
      "Epoch 261/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2285 - binary_accuracy: 0.9145 - val_loss: 0.2028 - val_binary_accuracy: 0.9245\n",
      "Epoch 262/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2262 - binary_accuracy: 0.9143 - val_loss: 0.2080 - val_binary_accuracy: 0.9243\n",
      "Epoch 263/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2244 - binary_accuracy: 0.9156 - val_loss: 0.2192 - val_binary_accuracy: 0.9185\n",
      "Epoch 264/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2279 - binary_accuracy: 0.9137 - val_loss: 0.2132 - val_binary_accuracy: 0.9223\n",
      "Epoch 265/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2255 - binary_accuracy: 0.9158 - val_loss: 0.2084 - val_binary_accuracy: 0.9217\n",
      "Epoch 266/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2252 - binary_accuracy: 0.9156 - val_loss: 0.2102 - val_binary_accuracy: 0.9230\n",
      "Epoch 267/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2256 - binary_accuracy: 0.9162 - val_loss: 0.2075 - val_binary_accuracy: 0.9221\n",
      "Epoch 268/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2263 - binary_accuracy: 0.9143 - val_loss: 0.2080 - val_binary_accuracy: 0.9247\n",
      "Epoch 269/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2265 - binary_accuracy: 0.9147 - val_loss: 0.2129 - val_binary_accuracy: 0.9215\n",
      "Epoch 270/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2256 - binary_accuracy: 0.9147 - val_loss: 0.2131 - val_binary_accuracy: 0.9225\n",
      "Epoch 271/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2219 - binary_accuracy: 0.9178 - val_loss: 0.2129 - val_binary_accuracy: 0.9211\n",
      "Epoch 272/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2282 - binary_accuracy: 0.9134 - val_loss: 0.2094 - val_binary_accuracy: 0.9230\n",
      "Epoch 273/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2257 - binary_accuracy: 0.9159 - val_loss: 0.2044 - val_binary_accuracy: 0.9250\n",
      "Epoch 274/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2264 - binary_accuracy: 0.9138 - val_loss: 0.2279 - val_binary_accuracy: 0.9163\n",
      "Epoch 275/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2241 - binary_accuracy: 0.9169 - val_loss: 0.2096 - val_binary_accuracy: 0.9211\n",
      "Epoch 276/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2273 - binary_accuracy: 0.9132 - val_loss: 0.2154 - val_binary_accuracy: 0.9221\n",
      "Epoch 277/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2270 - binary_accuracy: 0.9147 - val_loss: 0.2139 - val_binary_accuracy: 0.9180\n",
      "Epoch 278/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2275 - binary_accuracy: 0.9152 - val_loss: 0.2123 - val_binary_accuracy: 0.9238\n",
      "Epoch 279/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2260 - binary_accuracy: 0.9141 - val_loss: 0.2048 - val_binary_accuracy: 0.9259\n",
      "Epoch 280/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2254 - binary_accuracy: 0.9145 - val_loss: 0.2164 - val_binary_accuracy: 0.9188\n",
      "Epoch 281/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2247 - binary_accuracy: 0.9151 - val_loss: 0.2060 - val_binary_accuracy: 0.9249\n",
      "Epoch 282/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2282 - binary_accuracy: 0.9144 - val_loss: 0.2064 - val_binary_accuracy: 0.9218\n",
      "Epoch 283/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2234 - binary_accuracy: 0.9170 - val_loss: 0.2136 - val_binary_accuracy: 0.9205\n",
      "Epoch 284/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2262 - binary_accuracy: 0.9147 - val_loss: 0.2074 - val_binary_accuracy: 0.9233\n",
      "Epoch 285/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2258 - binary_accuracy: 0.9135 - val_loss: 0.2114 - val_binary_accuracy: 0.9206\n",
      "Epoch 286/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2238 - binary_accuracy: 0.9163 - val_loss: 0.2096 - val_binary_accuracy: 0.9216\n",
      "Epoch 287/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2262 - binary_accuracy: 0.9156 - val_loss: 0.2078 - val_binary_accuracy: 0.9250\n",
      "Epoch 288/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2249 - binary_accuracy: 0.9155 - val_loss: 0.2136 - val_binary_accuracy: 0.9219\n",
      "Epoch 289/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2244 - binary_accuracy: 0.9153 - val_loss: 0.2130 - val_binary_accuracy: 0.9212\n",
      "Epoch 290/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2243 - binary_accuracy: 0.9163 - val_loss: 0.2051 - val_binary_accuracy: 0.9247\n",
      "Epoch 291/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2259 - binary_accuracy: 0.9147 - val_loss: 0.2045 - val_binary_accuracy: 0.9249\n",
      "Epoch 292/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2260 - binary_accuracy: 0.9155 - val_loss: 0.2171 - val_binary_accuracy: 0.9175\n",
      "Epoch 293/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2285 - binary_accuracy: 0.9133 - val_loss: 0.2062 - val_binary_accuracy: 0.9242\n",
      "Epoch 294/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2240 - binary_accuracy: 0.9141 - val_loss: 0.2026 - val_binary_accuracy: 0.9263\n",
      "Epoch 295/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2273 - binary_accuracy: 0.9155 - val_loss: 0.2035 - val_binary_accuracy: 0.9254\n",
      "Epoch 296/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2257 - binary_accuracy: 0.9147 - val_loss: 0.2067 - val_binary_accuracy: 0.9250\n",
      "Epoch 297/300\n",
      "1103/1103 [==============================] - 6s 6ms/step - loss: 0.2267 - binary_accuracy: 0.9148 - val_loss: 0.2079 - val_binary_accuracy: 0.9232\n",
      "Epoch 298/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2263 - binary_accuracy: 0.9152 - val_loss: 0.2104 - val_binary_accuracy: 0.9231\n",
      "Epoch 299/300\n",
      "1103/1103 [==============================] - 6s 5ms/step - loss: 0.2261 - binary_accuracy: 0.9163 - val_loss: 0.2087 - val_binary_accuracy: 0.9239\n",
      "Epoch 300/300\n",
      "1103/1103 [==============================] - 7s 6ms/step - loss: 0.2253 - binary_accuracy: 0.9151 - val_loss: 0.2031 - val_binary_accuracy: 0.9266\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7fdaff36acf8>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(training_generator,epochs=300,validation_data=validation_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
